phplot/Truecolor - Documentation for the experimental truecolor support
Last updated for PHPlot-5.1.1 on 2010-04-04
The project home page is http://sourceforge.net/projects/phplot/
-----------------------------------------------------------------------------
Overview:

This file documents the use of truecolor images in PHPlot. This includes
images with more colors, transparency control (alpha channel), and alpha
blending of colors.  Truecolor image support was added to PHPlot in
version 5.1.1 as an experimental feature.

    NOTICE:

    Truecolor support is experimental. This means the features and
    interface are subject to change in future releases, and these
    changes may be incompatible with the current implementation.
    Be aware of this before using truecolor in your application.

Feedback on this feature is welcome. Please use the "help" forum at
http://sourceforge.net/projects/phplot/

Contents:
  Application Interface - How to make truecolor PHPlot images
  Color Specification Extensions - How to specify colors with alpha
  Additional Operations on Truecolor Images - Advanced GD operations
  File Formats - Image file formats versus truecolor
  Plot Types - PHPlot plot types and truecolor with alpha blending
  Background Image - Caution about using a background image
  Implementation - How truecolor is implemented in PHPlot
  History of this document

-----------------------------------------------------------------------------
Application Interface:

To use truecolor images, create an object of the derived class
PHPlot_truecolor instead of the class PHPlot. For example, replace:
          $plot = new PHPlot(800, 600);
with:
          $plot = new PHPlot_truecolor(800, 600);

That is all you need to do in order to create truecolor images. All PHPlot
methods are compatible with PHPlot_truecolor objects. An image file
produced from a PHPlot_truecolor object with no other programming changes
will be the same as an image file produced from a PHPlot object except as
described under File Formats below.

To use partially transparent colors (that is, colors with an alpha channel) 
with a PHPlot_truecolor object, you can specify an alpha value as part of a
color specification, and you can specify a default alpha value for all data
colors. Use of alpha values with a color specification is described below
under "Color Specification Extensions". Here are some examples of using
colors with an alpha specification:
    $plot->SetTextColor(array(192, 192, 33, 50));
This sets the color used for labels to red=192, green=192, blue=33, and
alpha=50. (This alpha translates to 50/127 transparency.)
    $plot->SetTickColor('blue:64');
This sets the color used for tick marks to the color 'blue' from the color
map, with alpha value 64  (64/127 transparency).

To specify a default alpha value for all data colors, provide the alpha
value as the new 3rd argument to SetDataColors:
    $plot->SetDataColors($my_color_array, NULL, 50);
This uses the colors specified in $my_color_array with a default alpha of
50. The default is applied to any color definition which does not already
have an alpha value.

This can also be used to apply an alpha value to the default data colors.
    $plot->SetDataColors(NULL, NULL, 50);
This retains the default data colors, but applies alpha = 50 (50/127
transparency) to all the colors. This is a quick way to get partially
transparent data colors without re-specifying all the colors.

-----------------------------------------------------------------------------
Color Specification Extensions:

Refer to the PHPlot Reference Manual for all of the functions that allow
you to control colors. The standard color specifications for PHPlot are:
    A color name from the color map, such as 'red'.
    A string of the form '#rrggbb' where each of rr, gg, and bb represent
the value of a color component (red, green, blue) as a 2 digit hexadecimal
number 00 to ff.
    A PHP array of 3 integers representing red, green, and blue in order
with each value between 0 and 255.

When using truecolor images, the way you can specify colors in PHPlot is
extended to allow you to specify an alpha channel (transparency value).
These forms are recognized in addition to those listed above.
    A color name from the color map followed by a colon and alpha value as
a decimal number, such as 'red:60'. Alpha is between 0 and 127.
    A string of the form '#rrggbbaa' where each of rr, gg, and bb represent
the value of a color component (red, green, blue) as a 2 digit hexadecimal
number 00 to ff, and aa is the alpha value as a 2 digit hexadecimal number
00 to 7f.
    A PHP array of 4 integers representing red, green, and blue, an alpha
in order, with red, green, and blue between 0 and 255 and alpha between 0
and 127.

NOTE: This follows the GD convention of alpha value being a value between 0
and 127, with 0 meaning opaque and 127 meaning completely transparent. Be
aware that this convention differs from other systems, which often use
alpha of 0 to indicate complete transparency.

Color names can include an alpha value in the color map, or an alpha value
can be appended to a color in the color map. For example, you can define a
color map with these colors:
     'red2' => array(255, 0, 0, 80),  // Red with 80/127 transparency
     'red' => array(255, 0, 0),       // Red
Then you can use 'red2' or 'red:80' to get the same result.

An alpha value appended to a color name overrides an alpha value in the
color map, so using the above example 'red2:100' would be red with
alpha=100.

-----------------------------------------------------------------------------
Additional Operations on Truecolor Images Using Callbacks:

Advanced operations on truecolor PHPlot images are possible using PHPlot
callbacks. Refer to the PHPlot Reference Manual for additional information
about using callbacks, and to the GD section of the PHP Manual for
information about these operations. Here are some of the operations you can
perform, and their corresponding GD functions:

+ imageantialias()
You can turn on anti-aliasing of truecolor images. This must be done before
anything is drawn, so the pre-drawing callback 'draw_setup' is used. Here is
a partial example:
    function pre_plot($img)
    {
        imageantialias($img, True);
    }

    ...
    $plot = new PHPlot_truecolor(1024, 768);
    $plot->SetCallback('draw_setup', 'pre_plot');

Note: There are limitations with anti-aliased images. You cannot use wide
lines (SetLineWidths). Patterned lines do not work, so if you are displaying
X or Y grid lines you must use SetDrawDashedGrid(False) to make these solid.

+ imagealphablending() and imagelayereffect()
These functions control the combining of partially transparent colors. They
can be used via a 'draw_setup' callback, in the same way as imageantialias
in the example above.

+ imagegammacorrect()
You can have the GD library perform gamma adjustment on a truecolor image.
This must be done after all drawing, so the post-drawing callback 'draw_all'
is used. Here is a partial example:
    function post_plot($img)
    {
        imagegammacorrect($img, 1.0, 0.5); // Input gamma=1, output gamma=.5
    }

    ...
    $plot = new PHPlot_truecolor(1024, 768);
    $plot->SetCallback('draw_all', 'post_plot');

-----------------------------------------------------------------------------
File Formats:

PHPlot can produce JPEG, PNG, and GIF image files (and possibly others).
You select the PHPlot output image file format with SetFileFormat().

PHPlot works with GD images before producing an image file. There are two
types of GD images: truecolor and palette. Truecolor images are created
with the PHPlot_truecolor class, and palette images are created with the
PHPlot class.

What happens when you output the GD image to an image file depends on the
image file format you select.

JPEG image files are always truecolor. Whether you use a PHPlot object or a
PHPlot_truecolor object, you will get a truecolor image file.  However, the
truecolor features such as specification of alpha channel information are
only available if you use a PHPlot_truecolor object.  Note: You are
discouraged from using JPEG images with PHPlot, because they are not
optimal for this type of graphical information.

GIF image files are always palette type, limited to 256 colors. When
using a PHPlot object, you will get a palette GIF image file with the
colors you used in your plot. When using a PHPlot_truecolor object, GD will
convert your image to palette format, reducing the number of colors to 256
if necessary. This may change the appearance of your plot. Note that the
PHP manual incorrectly states that imagecreatetruecolor() does not work
with GIF formats

PNG image files support truecolor images and palette images of various
color depths. When using a PHPlot object, you will get a palette PNG image
file. When using a PHPlot_truecolor object, you will get a truecolor PNG
image file. Note that by default, even though PNG truecolor image files
support an alpha channel, GD eliminates the alpha channel when producing a
PNG file. The visual effects of alpha blending are reproduced using opaque
colors. GD apparently does this due to poor support in viewers for alpha
channels. Refer to the PHP Manual page on imagesavealpha() for details.

Regardless of your selected image file format, the truecolor features such
as specification of alpha channel information are only available if you use
a PHPlot_truecolor object.  That is, if you create a PHPlot object (palette
image), and then specify colors as (r, g, b, a), the alpha information will
be ignored - even if you create a JPEG truecolor image file.

-----------------------------------------------------------------------------
Plot Types:

All PHPlot plot types work with truecolor images, but not all plot types
work well with alpha blending of data colors. (Alpha blending refers to
specifying colors which are partially transparent, and having GD merge
overlayed colors.)

Pie charts - Avoid using alpha blending with pie charts. The underlying GD
routines do not fill the pie areas in a way that allows proper blending of
colors. Flat pie charts (using SetShading(0)) are not too bad, showing some
artifacts, but shaded or 3D-look pie charts are poorly rendered.

Bar charts and stacked bar charts - Bars are drawn properly, but the 3D
shading affects get blended, resulting in less than ideal appearance. Flat,
outlined bars (using SetShading(0)) are fine with transparency, but when
shading is on the 3D shadows overlap portions of the bars. With alpha
blending, the overlaps take on new colors.

-----------------------------------------------------------------------------
Background Image:

When creating a PHPlot or PHPlot_truecolor object, you can provide an
existing image filename to the constructor as the 4th argument, input_file.
     $plot = new PHPlot(800, 600, NULL, 'myimage.png');
This image file becomes the background for your plot. (The function
SetInputFile also does this, but is deprecated for use except through the
constructor.)

If you provide an input file to the constructor, the image associated with
your PHPlot or PHPlot_truecolor object takes on the type of the input file:
palette or truecolor. But advanced features of truecolor images are only
available if you use the PHPlot_truecolor class, and if your image is
actually a truecolor image. This can result in some confusion.

Note that JPEG files are always truecolor, and GIF files are always
palette type. PNG files can be either truecolor or palette.

Advanced truecolor features, such as alpha blending, will be available when
you use an input file only if that input file is a truecolor image file (a
JPEG, or a truecolor PNG), and you use the PHPlot_truecolor constructor.

If you use a JPEG or a truecolor PNG image file as background, but create a
PHPlot object (rather than a PHPlot_truecolor object), your image will be
truecolor but you will be unable to specify alpha values for colors or use
alpha blending.

If you use a GIF or palette PNG image file as background, you will get a
palette image file regardless of whether you use a PHPlot or a
PHPlot_truecolor objects, and you will be unable to use alpha values and
alpha blending.

-----------------------------------------------------------------------------
Implementation:

The PHPlot_truecolor class extends the PHPlot class and replaces the
following functions:

+ Constructor:
The PHPlot_truecolor constructor is a copy of the PHPlot constructor (which
it does not call), with the only change being use of imagecreatetruecolor()
instead of imagecreate().

+ SetIndexColor():
This internal function, which takes a general color specification and returns
a GD color index, is changed to use imagecolorresolvealpha(). It makes use of
the change to the PHPlot SetRGBColor() function (see below) which returns a
4th color component.

+ SetIndexDarkColor():
This internal function, which takes a general color specification and returns
a GD color index for a darker shade, is also changed to use
imagecolorresolvealpha(), similar to SetIndexColor.

+ SetRGBColor():
This internal function is changed from the base class function to accept an
optional alpha value to use as a default for colors that do not have an
alpha value, and also to return all four values from parse_color(). See
below for more on parse_color().


To implement truecolor, changes were made to the following base PHPlot class
functions:

+ SetRGBColor():
Color parsing is now performed by the internal function parse_color() - see
below. The base class's SetRGBColor() internal function now just returns an
array containing the first 3 elements (r, g, b) of the array returned by
parse_color.

+ SetDataColors():
This public function accepts a new parameter $default_alpha which it
applies to all data colors that don't already have an alpha specification.
It also saves the alpha value into a class variable $data_colors_alpha and
re-uses it as the default. This is necessary because PHPlot calls this
function again, with no arguments, to recalculate the color indexes.
Without saving and reusing the default alpha, all data colors would lose their
alpha value.

+ parse_color():
This new internal function parses a color specification. This was
previously implemented in SetRGBColor(), which is now a wrapper for
parse_color(). The function has been rewritten (compared to the previous
implementation of SetRGBColor) to allow for an alpha value in the various
ways of specifying a color, and to support a new argument for a default
alpha value.  parse_color() returns a 4 element array (r, g, b, a).  This
function is used exclusively by SetRGBColor(). In the base class
SetRGBColor() function, the default alpha argument is not provided and the
4th element of the returned array is ignored.

-----------------------------------------------------------------------------

History:
2010-04-03 First version, for PHPlot-5.1.1
-----------------------------------------------------------------------------
