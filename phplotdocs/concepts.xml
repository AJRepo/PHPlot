<!-- $Id$
     Concepts chapter for PHPlot Reference Manual
-->
<chapter id="concepts">
<title>PHPlot Concepts</title>

<abstract><title></title>
  <para>
This chapter explains the operation and use of PHPlot.
  </para>
</abstract>

<sect1 id="conc-defs">
<title>Definitions</title>
<abstract><title></title>
  <para>
This section contains definitions of terms used throughout the PHPlot
Reference Manual.
  </para>
</abstract>

<!-- Note: All defs need to be tagged with anchor id="def-..."
     To link a word to its definition, use <link linkend="def-...">Word</link>
     Keep the definitions in alphabetical order.
-->
<para>
  <variablelist>

    <varlistentry>
      <term><anchor id="def-alpha" />Alpha value</term>
      <listitem>
        <para>
A component in a color system which represents the amount of transparency,
or opacity.  At one extreme, an alpha value indicates an opaque object
which covers or hides whatever was drawn before it. At the other extreme,
it indicates a completely transparent object which has no affect on
whatever was drawn before it.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><anchor id="def-dataset" />Data Set</term>
      <listitem>
        <para>
A set of data points which represent some function, trend, samples, etc.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><anchor id="def-devcoor" />Device Coordinates</term>
      <listitem>
        <para>
The coordinate space used by GD to create images. The origin is at the
upper left corner, X increases to the left, Y increases down, and the units
are pixels. Also known as Pixel Coordinates or GD Coordinates.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><anchor id="def-element" />Element</term>
      <listitem>
        <para>
A component of a graph, such as a label, tick mark, axis, or plot.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><anchor id="def-gd" />GD</term>
      <listitem>
        <para>
A programming library used to create and manipulate images.
GD can be found at the <ulink url="http://libgd.org/">GD Graphics
Library home page</ulink>.
You can think of GD as a software implementation of a video card.
GD is also available as a PHP extension, and that is what PHPlot uses to
create images.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><anchor id="def-graph" />Graph</term>
      <listitem>
        <para>
A complete, labeled, graphical representation of some data sets.
In PHPlot, a graph contains a single plot and other elements such as axes,
tick marks, and labels.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><anchor id="def-image" />Image</term>
      <listitem>
        <para>
A graphical image, represented as data. For example, a PNG file is an image
in PNG format which is stored in a file. PHPlot creates images using the GD
library. A PHPlot image contains one or more graphs (but usually only one).
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><anchor id="def-palette" />Palette Image</term>
      <listitem>
        <para>
A color image file, or image in memory, in which each pixel value is an
index into a color map which contains the actual color. Typically, the
pixel value is 8 bits, limiting this type of image to 256 distinct colors.
See also <link linkend="def-truecolor">Truecolor Image</link>.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><anchor id="def-plot" />Plot</term>
      <listitem>
        <para>
The graphical representation of one or more data sets.
In PHPlot, each graph contains a single plot, but a plot
can contain representation of multiple data sets (for example,
you can have 3 line charts on a plot).
        </para>
        <para>
Less formally, the term 'plot' is often used for the overall output of
PHPlot: an image with a complete graphical representation of data, with
labels, legend, title, etc.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><anchor id="def-truecolor" />Truecolor Image</term>
      <listitem>
        <para>
A color image file, or image in memory, in which each pixel value has a
complete representation of the color of that pixel. The pixels may use 24
bits, with 8 bits each for red, blue, and green color components, or 32
bits with an additional alpha component.
See also <link linkend="def-palette">Palette Image</link>.
        </para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><anchor id="def-worldcoor" />World Coordinates</term>
      <listitem>
        <para>
The coordinate space of the plotted data. This is the "real world"
coordinate space, in the units of whatever the plotted data measures.
The origin of the world coordinate space is the 0,0 point on the X and Y
axes.
        </para>
      </listitem>
    </varlistentry>

  </variablelist>
</para>

</sect1>

<sect1 id="conc-overview">
<title>Programming Overview</title>
<abstract><title></title>
  <para>
This section contains an overview of how to use PHPlot.
  </para>
</abstract>

<sect2 id="conc-overview-howitworks">
<title>How It Works</title>
<para>
To create a plot with PHPlot, your PHP script will generally do the
following:
<orderedlist>
  <listitem>
    <para>
Include the <filename>phplot.php</filename> source using
<literal>require_once</literal>.
    </para>
  </listitem>
  <listitem>
    <para>
Create an object which is an instance of the <literal>PHPlot</literal> class.
    </para>
  </listitem>
  <listitem>
    <para>
Use PHPlot functions (methods of the class object) to select the plot type,
present the data array, and optionally change settings which control the
appearance of the plot.
    </para>
  </listitem>
  <listitem>
    <para>
Output the plot, typically to the user's browser but possibly to a file
instead.
    </para>
  </listitem>
</orderedlist>
</para>

<note>
  <para>
It is important to remember that if you are writing a PHP script that uses
PHPlot to create an image for a web page, that PHP script must output
<emphasis>only</emphasis> the image data.
If you want to embed the image into a web page with text and other images,
you need at least two scripts.
Your main script returns an HTML page which includes an IMG (Image) tag for
the plot.
The IMG tag has a SRC attribute which references the second script, and it
is this second script which creates the PHPlot image.
An example of this can be found in <xref linkend="ex-webform"/>.
You will most likely need a way to communicate parameters from your main
script to your image script. Two good ways to do this are using URL parameters,
and with PHP session variables.
  </para>
</note>

</sect2>

<sect2 id="conc-overview-annoex">
<title>Annotated Example</title>
<para>
Here is a simple, annotated example of a script which produces an image.
More examples can be found in <xref linkend="examples" />.
</para>

<para>
<programlisting><![CDATA[
require_once 'phplot.php';
]]></programlisting>
This brings in the PHPlot source into your script. For this to work,
PHP needs to be able to find the PHPlot source file. A good way to arrange
this is to install PHPlot into a directory outside your web server's
document root and on the PHP Include Path. Other ways are to include a full
path to <filename>phplot.php</filename> when including it, or to copy
<filename>phplot.php</filename> into the same directory as your script.
</para>

<para>
<programlisting><![CDATA[
$plot = new PHPlot();
]]></programlisting>
Here we create a new PHPlot object and call it <literal>plot</literal>.
Everything else we do with the plot will be through the $plot object.
</para>

<para>
<programlisting><![CDATA[
$plot->SetPlotType('lines');
$plot->SetDataType('text-data');
]]></programlisting>
Here we select the plot type 'lines', for a line plot
(see <xref linkend="conc-plottypes" />),
and indicate our data will be represented in the 'text-data' format
(see <xref linkend="conc-datatypes" />).
</para>

<para>
<programlisting><![CDATA[
$plot->SetDataValues($data);
]]></programlisting>
The data array $data is where we store the values to be plotted.
We haven't shown where the data came from, but in a typical application
it might be from a database query.
How the data array is constructed is described in 
<xref linkend="conc-datatypes" />.
</para>

<para>
<programlisting><![CDATA[
$plot->SetXDataLabelPos('none');
$plot->SetLineWidths(3);
$plot->SetDrawXGrid(True);
]]></programlisting>
These three functions illustrate how to change the appearance of the plot.
</para>

<para>
<programlisting><![CDATA[
$plot->DrawGraph();
]]></programlisting>
This final function call outputs the plot.
More accurately,
this function creates the plot using all the data and settings
which were established by previous functions, and then outputs the plot.
This is a crucial point when using PHPlot: Until you call DrawGraph,
PHPlot is simply recording all the settings resulting from the functions
you call, and saving a copy of your data array. Nothing really happens
until you complete the plot with DrawGraph.
</para>


</sect2>



</sect1>

<sect1 id="conc-datatypes">
<title>PHPlot Data Types</title>
<abstract><title></title>
  <para>
This section describes how data need to be organized for use with PHPlot.
  </para>
</abstract>

<sect2 id="conc-datatypes-types">
<title>Available Data Types</title>
<para>
The data values to be plotted are presented to PHPlot with
<xref linkend="SetDataValues" />.
In all cases, the data values are stored in a PHP array.
This data array contains elements, themselves also arrays, which are called
records.
Each record contains labels and/or data values.
The 'data type' of the data array determines how PHPlot will interpret
the records in the data array.
To set the data type, use <xref linkend="SetDataType" />.
</para>

<para>
The following data types are available in PHPlot:

<variablelist>

  <varlistentry>
    <term>text-data</term>
    <listitem>
      <para>
Each record contains a label, followed by one or more Y values:
<literal>array('label', y1, y2, ...)</literal>.
The corresponding X value for all Y values in a record is implicit.
PHPlot assigns x=0.5 to the first data record, x=1.5 to the second, etc.
This data type works with all plot types.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>data-data</term>
    <listitem>
      <para>
Each record contains a label, an X value, then one or more Y values:
<literal>array('label', x, y1, y2, ...)</literal>.
This is the same as 'text-data' except the X values are explicitly given.
This data type works with all plot types except bars and stackedbars.
      </para>
      <para>
Note that with data type 'data-data', it is possible to create a data array
with duplicate X values, or X values out of order. Depending on the plot
type, this may or may not make sense. For example, with a point plot (which
puts a marker at each data point), the data array can legitimately contain
duplicate and out-of-order X values. With a line plot (which connects
adjacent points in the data array with a line), it probably makes no sense
to have out-of-order or duplicate X values in the data array.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>data-data-error</term>
    <listitem>
      <para>
Each record contains a label, an X value, then sets of 3 values for each Y
point: the Y value, error in the positive direction, and error in the
negative direction:
<literal>array('label', x, y1, e1+, e1-, y2, e2+, e2-, ...)</literal>.
This data type works with plot types lines, points, and linepoints only.
      </para>
      <para>
Note that both errors (e+ and e-) are given as positive numbers. They
represent the absolute value of the error in the positive and negative
directions respectively.
      </para>
    </listitem>
  </varlistentry>

  <varlistentry>
    <term>text-data-single</term>
    <listitem>
      <para>
Each record contains a label and a single value:
<literal>array('label', factor)</literal>.
This data type is only for the pie chart plot type.
      </para>
    </listitem>
  </varlistentry>
</variablelist>
</para>
</sect2>

<sect2 id="conc-datatypes-array">
<title>Building Data Arrays</title>
<para>
In most of the examples in this manual, the data array is built from
constant values in PHP code. For example:
<programlisting><![CDATA[
$data = array(
  array('',  0,   0,   0,   0),
  array('',  1,   1,   1, -10),
  array('',  2,   8,   4, -20),
  array('',  3,  27,   9, -30),
  array('',  4,  64,  16, -40)
  array('',  5, 125,  25, -50)
);
]]></programlisting>
Which contains 6 records, each with an empty label, an X value (assuming
the data type is 'data-data'), and then 3 Y values representing 3 data sets
to plot.
</para>

<para>
In a real application, of course, the data values will most likely come
from a calculation, perhaps using values from a database.
This section provides a few sample code fragments which construct
data arrays. We use the PHP ability to append a new value to the end of an
array using <literal>$array[] = ...</literal>.
</para>

<para>
This code fragment creates a data array of type 'text-data' with three
data sets for Y=X+1, Y=X*X/2, and Y=X*X*X/3.
<programlisting><![CDATA[
$data = array();
for ($x = 0; $x <= 5; $x++) $data[] = array('', $x+1, $x*$x/2, $x*$x*$x/3);
]]></programlisting>
</para>

<para>
This code fragment creates a data array of type 'data-data' with about
100 points from the equation X * Y = 10.
<programlisting><![CDATA[
$data = array();
for ($x = 1.0; $x <= 10.0; $x += 0.1) $data[] = array('', $x, 10.0/$x);
]]></programlisting>
</para>

<para>
The next code fragments use database queries to build data arrays for PHPlot.
In many cases, you can create a query such that the returned columns
correspond to the format of a PHPlot data array record.
The first query result column should be the data label, the second (for
data type 'data-data' only) should be the X value, and subsequent column
results should be one or more Y values (depending on the number of datasets you are plotting).
(Pie charts work differently - see <xref linkend="plottype-pie" />.)
You aren't limited to simple table lookups - you can use the full power of the SQL language
to combine tables and perform calculations on the data.
Be sure to use <literal>ORDER BY</literal> in your SQL query to order the results,
or you will not get predictable plots.
</para>
<para>
Database access methods differ. This code is for PostgreSQL; for MySQL there are
similar functions like <function>mysql_fetch_row()</function>.
<programlisting><![CDATA[
$r = pg_query($db, 'SELECT ...');
if (!$r) exit();
$data = array();
$n_rows = pg_num_rows($r);
for ($i = 0; $i < $n_rows; $i++) $data[] = pg_fetch_row($r, $i);
...
$plot->SetDataValues($data);
]]></programlisting>
This works because <function>pg_fetch_row</function> assigns the result
columns from the query to sequentially numbered elements in the array.
</para>
<para>
Using data arrays from database query results also works if the result
columns are in an array which is indexed by the field name, because PHPlot
converts the data array to use numeric indexes.
So with PostgreSQL you can use <function>pg_fetch_assoc()</function>.
You can also use <function>pg_fetch_array()</function>,
but only if you specify the type as <literal>PGSQL_ASSOC</literal>
or <literal>PGSQL_NUM</literal>.
The default type <literal>PGSQL_BOTH</literal> will not work,
because the result array will contain the data values duplicated
under both number and field-name indexes,
and PHPlot will see both copies of the data.
</para>
<para>
Going even further, with a properly designed query you can use
<function>pg_fetch_all()</function> to fetch the entire query result and
assign it to a data array with one statement.
<programlisting><![CDATA[
$r = pg_query($db, 'SELECT ...');
if (!$r) exit();
$data = pg_fetch_all($r);
...
$plot->SetDataValues($data);
]]></programlisting>
This uses field-name indexes in the array representing each row, but as noted above PHPlot
will convert the data array to use numeric indexes.
</para>
</sect2>

<sect2 id="conc-datatypes-missing">
<title>Missing Data in Data Arrays</title>
<para>
The 'lines' (<xref linkend="plottype-lines" />)
and 'squared' (<xref linkend="plottype-squared" />) plot types support the
concept of missing points. A missing point is represented in your data
array with an empty string instead of a Y value. For example:
<programlisting><![CDATA[
  $data = array( array('1996', 45.5),
                 array('1997', 53.8),
                 array('1998', ''),   # No data available for 1998
                 array('1999', 34.1));
]]></programlisting>
</para>
<para>
By default, PHPlot will act as if the missing point does not exist,
connecting the points before it and after it. You can use
<xref linkend="SetDrawBrokenLines" /> to leave a gap at the missing point
instead.
</para>

</sect2>

<sect2 id="conc-datatypes-indexes">
<title>Data Array Indexes</title>
<para>
There are some rules you need to follow when building data arrays, in order
for PHPlot to correctly process your data. The following rules apply to the
array indexes, or keys, in your data array.
  <itemizedlist>
    <listitem>
      <para>
Your data array must be indexed using sequential integers starting with zero.
This is automatically true if you build an array with the empty-brackets
syntax (<literal>$mydata[] = ...</literal>), or if you use the
<literal>array(...)</literal> construct without specifying keys.
Note that this refers only to the data array itself, not the elements of
the data array - the records.
      </para>
    </listitem>
    <listitem>
      <para>
The data records, which are elements of the data array, are also arrays.
These record arrays are processed by PHPlot using the
<literal>array_values()</literal> function. This means the array keys
are ignored, and the elements of the record are processed in the same order
as they were assigned. As with the data array itself, you can use the
empty-brackets syntax, or the array() language construct, to build records
in the data array. You can also use words (such as database query result
fields) as indexes, as long as the assignments are made in the correct
order.
      </para>
    </listitem>
  </itemizedlist>
</para>
</sect2>

</sect1>

<sect1 id="conc-plottypes">
<title>PHPlot Plot Types</title>
<abstract><title></title>
  <para>
This section describes the PHPlot plot types and their individual data
type requirements.
  </para>
</abstract>
<para>
Plot types determine the overall look of the
graphical representation of the data values. To select the plot type,
use <xref linkend="SetPlotType" />.
The following plot types are available:
<informaltable>
  <tgroup cols="2">
    <?dbhtml table-summary="Available plot types"?>
    <colspec colname="c1" colwidth="20*" />
    <colspec colname="c2" colwidth="80*" />
    <thead>
      <row>
        <entry>Plot Type</entry>
        <entry>Description</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry><link linkend="plottype-area">area</link></entry>
        <entry>Filled areas between lines. Also known as 'cumulative line
            plot' or 'component line plot'.</entry>
      </row>
      <row>
        <entry><link linkend="plottype-bars">bars</link></entry>
        <entry>Filled bars with optional 3-D look, multiple datasets are offset</entry>
      </row>
      <row>
        <entry><link linkend="plottype-linepoints">linepoints</link></entry>
        <entry>Lines between points, a marker at each point, optional error bars
</entry>
      </row>
      <row>
        <entry><link linkend="plottype-lines">lines</link></entry>
        <entry>Straight lines between data points, optional error bars</entry>
      </row>
      <row>
        <entry><link linkend="plottype-pie">pie</link></entry>
        <entry>Pie chart with or without 3-D affects</entry>
      </row>
      <row>
        <entry><link linkend="plottype-points">points</link></entry>
        <entry>Draws a marker at each data point, optional error bars</entry>
      </row>
      <row>
        <entry><link linkend="plottype-squared">squared</link></entry>
        <entry>Stepped lines</entry>
      </row>
      <row>
        <entry><link linkend="plottype-stackedarea">stackedarea</link></entry>
        <entry>Filled areas between lines, with multiple data sets accumulated</entry>
      </row>
      <row>
        <entry><link linkend="plottype-stackedbars">stackedbars</link></entry>
        <entry>Filled bars with optional 3-D look, multiple data sets
            are accumulated and the sum is graphed</entry>
      </row>
      <row>
        <entry><link linkend="plottype-thinbarline">thinbarline</link></entry>
        <entry>Vertical lines from X axis up. Also known as impulse.</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</para>

<sect2 id="plottype-area">
<title>Plot Type: area (Area Plot)</title>
<para>
This plot type draws filled areas between lines.
This is often called a 'cumulative line plot' or 'component line plot'.
Each data set (set of corresponding Y values from each record in the
data array) is plotted in order, with the area
between each line and the next line filled solid. The area between the
last line and the X axis is also filled. The data must be arranged
so the values are (generally) decreasing within each row, because later
drawn filled areas will cover previously drawn areas.
</para>
<para>
This plot type works with data types 'text-data' and 'data-data'
(see <xref linkend="conc-datatypes-types" />).
For 'text-data', the data X values are assumed to be at 0.5+N for N=0,1,2...
</para>
<para>
This plot type uses the absolute value of each supplied Y, because negative
values do not make sense here. Missing values are taken as zero.
All records in the data array must have the same number of Y values.
</para>
<para>
The areas are filled with colors as set with <xref linkend="SetDataColors" />.
</para>
<para>
An example of this plot type can be seen in
<xref linkend="ex-area1" />.
</para>
</sect2>

<sect2 id="plottype-bars">
<title>Plot Type: bars (Bar Graph)</title>
<para>
This plot type draws a bar chart, with filled rectangles centered on
the X values. The rectangles can have a 3-D look or be flat with a border.
Multiple data-set plots work, with each one producing a set of bars
offset from the previous set.
</para>
<para>
This plot type only works with data type 'text-data'
(see <xref linkend="conc-datatypes-types" />).
The data X values are assumed to be at 0.5+N for N=0,1,2...
</para>
<para>
If shading is on with <xref linkend="SetShading" /> (default is on with value
5 pixels), then the bars have a 3-D look. If shading is off
(<function>SetShading(0)</function>), the bars are flat rectangles with borders.
The filled rectangle color is set with <xref linkend="SetDataColors" />.
The border color (if shading is off) can be set with
<xref linkend="SetDataBorderColors" />.
</para>
<para>
Examples of this plot type can be seen in
<xref linkend="ex-bars1" />,
<xref linkend="ex-bars2" />,
<xref linkend="ex-bars3" />, and
<xref linkend="ex-bars4" />.
</para>
</sect2>

<sect2 id="plottype-linepoints">
<title>Plot Type: linepoints (Lines and Points)</title>
<para>
This plot type draws a line graph with a markers at each point, thus
combining the 'line' and 'point' plot types.
</para>
<para>
This plot type works with data types 'text-data' and 'data-data'
(see <xref linkend="conc-datatypes-types" />).
For 'text-data', the data X values are assumed to be at 0.5+N for N=0,1,2...
It also works with 'data-data-error' for error bars.
</para>
<para>
Line and marker colors for each line are set with
<xref linkend="SetDataColors" />.
Marker styles for each line are set with <xref linkend="SetPointShapes" />.
Marker sizes for each line are set with <xref linkend="SetPointSizes" />.
Line widths for each line are set with <xref linkend="SetLineWidths" />.
Line styles (solid or dashed) for each line are set with
<xref linkend="SetLineStyles" />.
</para>
<para>
You can also suppress the line, or the markers, for individual data sets
in a graph.
This allows you combine points-only, lines-only, and line/points plots.
Refer to <xref linkend="SetLineStyles" /> and <xref linkend="SetPointShapes" />
for details.
</para>
<para>
For error-bar plots with data type 'data-data-error' only:
Error bar colors for each line are set with <xref linkend="SetErrorBarColors" />.
Error bar shape (tee or line) is set with <xref linkend="SetErrorBarShape" />.
If tee-shaped error bars are used, the width of the
upper and lower 'tee' is set with <xref linkend="SetErrorBarSize" />.
Error bar line width is set with <xref linkend="SetErrorBarLineWidth" />.
</para>
<para>
An example of this plot type can be seen in
<xref linkend="ex-linepoints1" />.
</para>
</sect2>

<sect2 id="plottype-lines">
<title>Plot Type: lines (Lines Graph)</title>
<para>
This plot type simply draws a line from each point to the next.
</para>
<para>
This plot type works with data types 'text-data' and 'data-data'
(see <xref linkend="conc-datatypes-types" />).
For 'text-data', the data X values are assumed to be at 0.5+N for N=0,1,2...
It also works with 'data-data-error' for error bars.
</para>
<para>
Line colors for each line are set with <xref linkend="SetDataColors" />.
Line widths for each line are set with <xref linkend="SetLineWidths" />.
Line styles (solid or dashed) for each line are set with
<xref linkend="SetLineStyles" />.
</para>
<para>
For error-bar plots with data type 'data-data-error' only:
Error bar colors for each line are set with <xref linkend="SetErrorBarColors" />.
Error bar shape (tee or line) is set with <xref linkend="SetErrorBarShape" />.
If tee-shaped error bars are used, the width of the
upper and lower 'tee' is set with <xref linkend="SetErrorBarSize" />.
Error bar line width is set with <xref linkend="SetErrorBarLineWidth" />.
</para>
<para>
Examples of this plot type can be seen in
<xref linkend="ex-lines1" /> and
<xref linkend="ex-lines2" />.
</para>
</sect2>

<sect2 id="plottype-pie">
<title>Plot Type: pie (Pie Chart)</title>
<para>
This plot type draws pie charts. The pie chart can have a 3-D look or be
drawn flat.
The first pie segment starts at 0 degrees (East, or 3:00PM) and they go around
the pie in a counter-clockwise direction.
Each segment is labeled with its percentage.
</para>
<para>
This plot type works with data types 'text-data', 'data-data', and
'text-data-single' (see <xref linkend="conc-datatypes-types" />).
Data arrays for pie charts are handled differently than with other plot types,
so the data types are described in more detail below.
</para>
<para>
If shading is on with <xref linkend="SetShading" /> (default is on with value
5 pixels), then the pie chart has a 3-D look. If shading is off
(<function>SetShading(0)</function>), the pie chart is drawn flat (circular
rather than oval).
The position of the segment percentage labels is set with
<xref linkend="SetLabelScalePosition" />.
</para>
<para>
Examples of this plot type can be seen in
<xref linkend="ex-pie1" /> (text-data-single),
<xref linkend="ex-pie2" /> (text-data), and
<xref linkend="ex-pie3" /> (unshaded).
</para>

<sect3 id="plottype-pie-tds">
<title>Pie Chart with data type: 'text-data-single'</title>
<para>
The data array for pie charts with 'text-data-single' data type is
structured as follows.
Each record in the data array represents a pie segment.
The record is an array of 2 elements: label and value,
but the label is ignored.
The value sets the relative size of a pie segment.
PHPlot totals up the values and computes the relative size of each segment.
</para>
<para>
For example:
<programlisting><![CDATA[
$data = array(array('', 1), array('',4), array('',5));
]]></programlisting>
This makes a pie chart with 3 segments, with sizes 10%, 40%, and 50%.
</para>
</sect3>

<sect3 id="plottype-pie-td">
<title>Pie Chart with data type: 'text-data'</title>
<para>
The data array for pie charts with 'text-data' data type is
structured as follows.
Each record in the data array is an array of a label followed by N data values.
The label is ignored. The pie chart will be produced with N segments.
The relative weight of the first segment is the sum of the first data values
in each record.
The relative weight of each subsequent segment is the sum of the corresponding
data values in each record.
</para>
<para>
For example:
<programlisting><![CDATA[
$data = array(array('', 10, 10, 20, 10),
              array('', 15, 10, 15, 10));
]]></programlisting>
This results in 4 segments with sizes 25%, 20%, 35%, and 20%.
</para>
</sect3>

<sect3 id="plottype-pie-dd">
<title>Pie Chart with data type: 'data-data'</title>
<para>
The data array for pie charts with 'data-data' data type is
structured the same as 'text-data', except that the first
two values in each record are ignored (the positions usually
used for label and X value).
Each element in the data array represents a record.
Each record is an array of a label, X value, then N data values.
The label and X value are ignored.
The pie chart will be produced with N segments.
The relative weight of the first segment is the sum of the first data values
in each record.
The relative weight of each subsequent segment is the sum of the corresponding
data values in each record.
</para>
<para>
For example:
<programlisting><![CDATA[
$data = array(array('', 1, 10, 10, 20, 10),
              array('', 2, 15, 10, 15, 10));
]]></programlisting>
This results in 4 segments with sizes 25%, 20%, 35%, and 20%.
The empty strings and '1' and '2' are ignored.
</para>
</sect3>

</sect2>

<sect2 id="plottype-points">
<title>Plot Type: points (Styled Dot Plot)</title>
<para>
This plot type draws a point marker at each X,Y value.
</para>
<para>
This plot type works with data types 'text-data' and 'data-data'
(see <xref linkend="conc-datatypes-types" />).
For 'text-data', the data X values are assumed to be at 0.5+N for N=0,1,2...
It also works with 'data-data-error' for points with error bars.
</para>
<para>
Marker colors for each line are set with <xref linkend="SetDataColors" />.
Marker styles for each line are set with <xref linkend="SetPointShapes" />.
Marker sizes for each line are set with <xref linkend="SetPointSizes" />.
</para>
<para>
For error-bar plots with data type 'data-data-error' only:
Error bar colors for each line are set with <xref linkend="SetErrorBarColors" />.
Error bar shape (tee or line) is set with <xref linkend="SetErrorBarShape" />.
If tee-shaped error bars are used, the width of the
upper and lower 'tee' is set with <xref linkend="SetErrorBarSize" />.
Error bar line width is set with <xref linkend="SetErrorBarLineWidth" />.
</para>
<para>
Examples of this plot type can be seen in
<xref linkend="ex-points2" /> (scatterplot), and
<xref linkend="ex-points1" /> (with error bars).
</para>
</sect2>

<sect2 id="plottype-squared">
<title>Plot Type: squared (Step Plot)</title>
<para>
This plot type makes stepped lines. For each point, you get a horizontal
line from the previous point to the current X, then a vertical line to
the current Y.
</para>
<para>
This plot type works with data types 'text-data' and 'data-data'
(see <xref linkend="conc-datatypes-types" />).
For 'text-data', the data X values are assumed to be at 0.5+N for N=0,1,2...
</para>
<para>
Line colors per line are set with <xref linkend="SetDataColors" />.
Line widths per line are set with <xref linkend="SetLineWidths" />.
Line style (solid or dashed) per line are set with
<xref linkend="SetLineStyles" />.
</para>
<para>
An example of this plot type can be seen in
<xref linkend="ex-squared1" />.
</para>
</sect2>

<sect2 id="plottype-stackedarea">
<title>Plot Type: stackedarea (Stacked Area Plot)</title>
<para>
This plot type draws filled areas between lines, similar to
<xref linkend="plottype-area" /> except the values are accumulated
in the same manner as for <xref linkend="plottype-stackedbars" />.
For each data set (set of corresponding Y values from each record in the
data array), the area between the X axis and the first Y value is filled.
The area between the first Y value and the sum of the first and second Y
values is filled next, and so on. The top-most line is the sum of all the Y
values for each record.
</para>
<para>
This plot type works with data types 'text-data' and 'data-data'
(see <xref linkend="conc-datatypes-types" />).
For 'text-data', the data X values are assumed to be at 0.5+N for N=0,1,2...
</para>
<para>
This plot type uses the absolute value of each supplied Y, because negative
values do not make sense here. Missing values are taken as zero.
All records in the data array must have the same number of Y values.
</para>
<para>
The areas are filled with colors as set with <xref linkend="SetDataColors" />.
Note that data sets are processed with stacked area plots in reverse order
relative to area plots.  With stacked area plots, the first data set (using the
first data color) will be at the bottom, but with area plots it will be at
the top.
Compare <xref linkend="ex-area1"/> and <xref linkend="ex-stackedarea1"/>.
</para>
<para>
An example of this plot type can be seen in
<xref linkend="ex-stackedarea1" />.
</para>
<para>
This plot type was added in PHPlot-5.1.1.
</para>
</sect2>

<sect2 id="plottype-stackedbars">
<title>Plot Type: stackedbars</title>
<para>
This plot type draws a bar chart with stacked bars centered on each X value.
Each data set value contributes one segment of a stack.
That is, the first data set is drawn at the X axis in the first
color, then the second data set is drawn stacked above the first
in the second color, etc.
For this plot type, all Y data values must be greater than or equal to 0.
Negative values are not supported.
</para>
<para>
This plot type only works with data type 'text-data'
(see <xref linkend="conc-datatypes-types" />).
The data X values are assumed to be at 0.5+N for N=0,1,2...
</para>
<para>
If shading is on with <xref linkend="SetShading" /> (default is on with value
5 pixels), then the bars have a 3-D look. If shading is off
(<function>SetShading(0)</function>), the bars are flat rectangles with borders.
The filled rectangle colors for each stacked segment are set with
<xref linkend="SetDataColors" />.
The border color (if shading is off) can be set with
<xref linkend="SetDataBorderColors" />.
</para>
<para>
Examples of this plot type can be seen in
<xref linkend="ex-stackedbars1" />,
<xref linkend="ex-stackedbars2" />, and
<xref linkend="ex-stackedbars3" />.
</para>
</sect2>

<sect2 id="plottype-thinbarline">
<title>Plot Type: thinbarline</title>
<para>
This plot type draws vertical lines up from the X axis to the Y value at
each point.
Other implementations call this type of plot 'impulses'.
Plotting multiple data sets does not work, because the lines are drawn on
top of each other and only one can typically be seen.
</para>
<para>
This plot type works with data types 'text-data' and 'data-data'
(see <xref linkend="conc-datatypes-types" />).
For 'text-data', the data X values are assumed to be at 0.5+N for N=0,1,2...
</para>
<para>
Impulse width can be controlled with <xref linkend="SetLineWidths" />.
</para>
<para>
Examples of this plot type can be seen in
<xref linkend="ex-thinbarline1" /> and
<xref linkend="ex-thinbarline2" />.
</para>

</sect2>

</sect1>

<sect1 id="conc-colors">
<title>Colors</title>
<abstract><title></title>
  <para>
This section contains information about using colors in PHPlot.
Functions described in <xref linkend="ref-colorstyle" /> in the Reference
chapter control the use of colors in PHPlot.
  </para>
  <para>
This section describes <link linkend="def-palette">Palette images</link>.
Starting with PHPlot-5.1.1, a second color model is available in
PHPlot: <link linkend="def-truecolor">Truecolor images</link>.
Refer to <xref linkend="conc-truecolor"/> for more information.
  </para>
</abstract>

<sect2 id="conc-colors-forms">
<title>Color Parameter Forms</title>
<para>
Individual colors as arguments to PHPlot functions can take one of the
following forms:
<orderedlist>
  <listitem>
    <para>
A color name, as defined by <xref linkend="SetRGBArray" /> or from a built-in
color map if SetRGBArray was not called.
Note that color names are case sensitive.
    </para>
  </listitem>
  <listitem>
    <para>
Numeric color component values, in the form <literal>#rrggbb</literal>.
Here rr is red, gg is green, and bb is blue, and each component
value is represented as a 2-digit hexadecimal number between 00 and ff.
For example, <literal>#0000ff</literal> is full-saturation blue.
    </para>
  </listitem>
  <listitem>
    <para>
A PHP array of red, green, and blue color component values, each value
being in the range 0 to 255 inclusive, for example
<literal>array(0,0,255)</literal> for blue.
    </para>
  </listitem>
</orderedlist>
Additional color forms can be found in <xref linkend="conc-truecolor-forms"/>. 
Those forms are more useful with truecolor images.
</para>
<note>
  <para>
You cannot use the (red, green, blue) array form as a color value in those
functions (like <xref linkend="SetDataColors" />) which accept either a
single color or an array of colors. The functions are unable to distinguish
between an array of colors and a single color represented as an array.
However, you can work around this restriction by using an array containing
the array with the colors, for example:
<literal>array(array(102, 0, 192))</literal>.
  </para>
</note>
</sect2>

<sect2 id="conc-colors-map">
<title>Built-in Color Maps</title>
<para>
There are 36 colors defined in the 'small' internal color map.
This is the set of colors available by default, unless
<xref linkend="SetRGBArray" /> is used to load in a different color map.
The colors and their names are shown in the figure below.
  <informalfigure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/colors.png" scale="58" format="PNG" />
      </imageobject>
      <textobject>
        <phrase>The 36 color 'small' color map</phrase>
      </textobject>
    </mediaobject>
  </informalfigure>
</para>

<para>
Here are the color names again.

<informaltable frame="none">
  <?dbfo table-width="75%"?> <!-- Table width hint for PDF only -->
  <tgroup cols="6">
    <?dbhtml table-summary="Color names"?>
    <colspec colname="c1" colwidth="16*" />
    <colspec colname="c2" colwidth="16*" />
    <colspec colname="c3" colwidth="16*" />
    <colspec colname="c4" colwidth="16*" />
    <colspec colname="c5" colwidth="16*" />
    <colspec colname="c6" colwidth="16*" />
    <tbody>
      <row>
        <entry>DarkGreen</entry>
        <entry>DimGrey</entry>
        <entry>PeachPuff</entry>
        <entry>SkyBlue</entry>
        <entry>SlateBlue</entry>
        <entry>YellowGreen</entry>
      </row>
      <row>
        <entry>aquamarine1</entry>
        <entry>azure1</entry>
        <entry>beige</entry>
        <entry>black</entry>
        <entry>blue</entry>
        <entry>brown</entry>
      </row>
      <row>
        <entry>cyan</entry>
        <entry>gold</entry>
        <entry>gray</entry>
        <entry>green</entry>
        <entry>grey</entry>
        <entry>ivory</entry>
      </row>
      <row>
        <entry>lavender</entry>
        <entry>magenta</entry>
        <entry>maroon</entry>
        <entry>navy</entry>
        <entry>orange</entry>
        <entry>orchid</entry>
      </row>
      <row>
        <entry>peru</entry>
        <entry>pink</entry>
        <entry>plum</entry>
        <entry>purple</entry>
        <entry>red</entry>
        <entry>salmon</entry>
      </row>
      <row>
        <entry>snow</entry>
        <entry>tan</entry>
        <entry>violet</entry>
        <entry>wheat</entry>
        <entry>white</entry>
        <entry>yellow</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</para>

<para>
The color names and values in the 'small' internal color map are
selected from the X11 RGB Color Database.
If you use <xref linkend="SetRGBArray" /> to pick the 'large' color map,
PHPlot loads a much larger list of colors equivalent to the entire
X11 RGB Color Database. Note that there are some duplicate colors in the
maps, as they include alternate spellings (like 'gray' and 'grey').
</para>

</sect2>

<sect2 id="conc-colors-datacolors">
<title>Plotting Colors</title>
<para>
<?dbfo keep-together="always"?>
Each data set plotted on a graph uses the next color in the Data Colors list.
By default, the Data Colors list contains the following 16 colors in order.
  <informaltable>
    <?dbfo table-width="50%"?> <!-- Table width hint for PDF only -->
    <tgroup cols="3">
      <?dbhtml table-summary="Default PHPlot Data Colors List"?>
      <colspec colname="c1" colwidth="30*" />
      <colspec colname="c2" colwidth="30*" />
      <colspec colname="c3" colwidth="40*" />
      <thead>
        <row>
          <entry>Data Set:</entry>
          <entry>Color Name:</entry>
          <entry>Color Sample:</entry>
        </row>
      </thead>
      <tbody>
<!-- Automatically generated content -->
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>1</entry>
          <entry>SkyBlue</entry>
          <entry><?dbhtml bgcolor="#87ceeb"?><?dbfo bgcolor="#87ceeb"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>2</entry>
          <entry>green</entry>
          <entry><?dbhtml bgcolor="#00ff00"?><?dbfo bgcolor="#00ff00"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>3</entry>
          <entry>orange</entry>
          <entry><?dbhtml bgcolor="#ffa500"?><?dbfo bgcolor="#ffa500"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>4</entry>
          <entry>blue</entry>
          <entry><?dbhtml bgcolor="#0000ff"?><?dbfo bgcolor="#0000ff"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>5</entry>
          <entry>red</entry>
          <entry><?dbhtml bgcolor="#ff0000"?><?dbfo bgcolor="#ff0000"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>6</entry>
          <entry>DarkGreen</entry>
          <entry><?dbhtml bgcolor="#006400"?><?dbfo bgcolor="#006400"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>7</entry>
          <entry>purple</entry>
          <entry><?dbhtml bgcolor="#a020f0"?><?dbfo bgcolor="#a020f0"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>8</entry>
          <entry>peru</entry>
          <entry><?dbhtml bgcolor="#cd853f"?><?dbfo bgcolor="#cd853f"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>9</entry>
          <entry>cyan</entry>
          <entry><?dbhtml bgcolor="#00ffff"?><?dbfo bgcolor="#00ffff"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>10</entry>
          <entry>salmon</entry>
          <entry><?dbhtml bgcolor="#fa8072"?><?dbfo bgcolor="#fa8072"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>11</entry>
          <entry>SlateBlue</entry>
          <entry><?dbhtml bgcolor="#6a5acd"?><?dbfo bgcolor="#6a5acd"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>12</entry>
          <entry>YellowGreen</entry>
          <entry><?dbhtml bgcolor="#9acd32"?><?dbfo bgcolor="#9acd32"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>13</entry>
          <entry>magenta</entry>
          <entry><?dbhtml bgcolor="#ff00ff"?><?dbfo bgcolor="#ff00ff"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>14</entry>
          <entry>aquamarine1</entry>
          <entry><?dbhtml bgcolor="#7fffd4"?><?dbfo bgcolor="#7fffd4"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>15</entry>
          <entry>gold</entry>
          <entry><?dbhtml bgcolor="#ffd700"?><?dbfo bgcolor="#ffd700"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
        <row><?dbhtml bgcolor="white"?><?dbfo bgcolor="white"?>
          <entry>16</entry>
          <entry>violet</entry>
          <entry><?dbhtml bgcolor="#ee82ee"?><?dbfo bgcolor="#ee82ee"?>&nbsp;&nbsp;&nbsp;&nbsp;</entry>
        </row>
<!-- End automatically generated content -->
      </tbody>
    </tgroup>
  </informaltable>
</para>
<para>
An additional color list is used with error plots. These have data type
data-data-error (see <xref linkend="conc-datatypes-types"/>).
The positive and negative error bars use a color map that is set using
<xref linkend="SetErrorBarColors"/>. By default, this color list contains
the same colors as the data color list, so each data set and its error bars
will be in the same color. If you change the data colors list with
<xref linkend="SetDataColors"/>, you probably want to use the same color
list for the error bars.
</para>
<para>
For bar charts and stackedbar charts, if shading is off, the color of the
bar borders can be set with <xref linkend="SetDataBorderColors"/>. By
default, unshaded bar charts use a black outline around the bars for all
data sets.
</para>
<para>
Note: PHPlot through version 5.0.7 used 8 colors in the default Data Colors
list: SkyBlue, green, orange, blue, orange, red, violet, and azure1.
If plotting more than four data sets with PHPlot-5.0.7 or earlier, you should
use <xref linkend="SetDataColors" /> to define your own data colors list.
Otherwise you will get two data sets plotted in the same color, orange.
</para>

<para>
Instead of using sequential data colors for plotted data sets, you can
control exactly which data color is used for each data value using the
data color callback.
For more information, see <xref linkend="conc-colors-datacolor-callback"/>.
</para>

</sect2>

<sect2 id="conc-colors-transparent">
<title>Transparency</title>
<para>
You can designate one color in the color map to be transparent.
This is most often used to make a plot with a transparent background.
Use <xref linkend="SetTransparentColor" /> to designate the color,
and <xref linkend="SetBackgroundColor" /> to use that color for the background.
Use a color which is not otherwise used in the plot.
</para>
<para>
For transparency to work, the output format (see <xref linkend="SetFileFormat" />)
must support transparency, and the the user's viewer or browser also must
support transparency.
If transparency is not supported, the user will see the actual color
which was designated as transparent (so don't use red, for example).
Most viewers support transparency in GIF format, and newer viewers should
support transparency in PNG format.  JPEG format does not support
transparency.
</para>
</sect2>

</sect1>

<sect1 id="conc-truecolor">
<title>Truecolor Images</title>
<abstract><title></title>
  <para>
This section contains information about using
<link linkend="def-truecolor">Truecolor images</link> in PHPlot.
This material supplements the text in the previous section,
<xref linkend="conc-colors"/>.
  </para>
</abstract>
<para>
Truecolor image support was added to PHPlot-5.1.1. With Truecolor image
support, you can:
  <itemizedlist>
    <listitem>
      <para>Create images with a larger number of colors</para>
    </listitem>
    <listitem>
      <para>Control color transparency with alpha blending</para>
    </listitem>
    <listitem>
      <para>Perform advanced image processing operations</para>
    </listitem>
  </itemizedlist>
</para>
<para>
An example of using Truecolor with PHPlot can be found in
<xref linkend="ex-truecolor-histogram"/>.
</para>

<sect2 id="conc-truecolor-overview">
<title>Using Truecolor Images in PHPlot</title>
<para>
To make a Truecolor image in PHPlot, create an object of the derived class
<literal>PHPlot_truecolor</literal> instead of the class
<literal>PHPlot</literal>.
For example, replace this:
<programlisting><![CDATA[
$plot = new PHPlot(800, 600);
]]></programlisting>
with this:
<programlisting><![CDATA[
$plot = new PHPlot_truecolor(800, 600);
]]></programlisting>
</para>

<para>
That is all you need to do in order to create truecolor images. All PHPlot
methods are compatible with PHPlot_truecolor objects. An image file
produced from a PHPlot_truecolor object with no other programming changes
will be the same as an image file produced from a PHPlot object except as
described under <xref linkend="conc-truecolor-fileformats"/>.
</para>

<para>
One of the advantages of truecolor images is the ability to use
variable transparency. This is described in the next two sections.
</para>

</sect2>

<sect2 id="conc-truecolor-alpha">
<title>Understanding Variable Transparency (Alpha)</title>
<para>
Colors in a truecolor image have four components: red, green, blue, and
alpha. The alpha component corresponds to the transparency of a color.
An alpha value of zero means the color is opaque, and an alpha value
of 127 means the color is transparent, or clear.<footnote>
  <para>
PHPlot follows the GD Library convention here. Other systems use alpha=0 to
mean transparent, and a maximum alpha value to mean opaque.
  </para></footnote>
In between values, from 1 to 126, correspond to various amounts of
transparency.
</para>

<para>
Transparency is only meaningful when drawing objects on top of objects, or
objects on top of the image background. An object drawn with an
opaque color (alpha=0) will replace whatever was in the image before the
object was drawn at that position. An object drawn with an transparent
color (alpha=127) is invisible and does not affect the appearance of the
image. An object drawn with a color that has an alpha value between 1 and
126 will be combined with whatever was in the image before the object was
drawn using alpha blending.
</para>

<para>
The PHP Manual explains alpha blending like this: "In blending mode, the
alpha channel component of the color supplied to all drawing functions
determines how much of the underlying color should be allowed to shine
through. As a result, gd automatically blends the existing color at that
point with the drawing color, and stores the result in the image. The
resulting pixel is opaque."<footnote><para>From the PHP Reference Manual,
imagealphablending</para></footnote>
</para>

<note>
  <para>
Note that the PHP Manual says the resulting pixel is opaque. This means
that objects drawn with alpha above 0 are partially or completely transparent
only relative to other objects in that same image. This does not result
in an image with transparent portions which would show through to a browser
or desktop background, for example.
(Read the PHP Manual page for <function>imagesavealpha</function> for more
about this behavior and how to change it.)
Use <xref linkend="SetTransparentColor"/> to make portions of an image
transparent to web page or desktop backgrounds.
  </para>
</note>

<para>
<?dbfo keep-together="always"?>
The following figure shows the effect of alpha blending when drawing lines.
The left side shows the normal overlaying of lines, and the right side
shows alpha-blended overlaying of lines with alpha = 60 (that is, 60/127
transparency).
The effect of alpha blending can be seen where the data lines cross.
Note: These plots use wide lines (3 pixels) and the portions of
the images are magnified 2x to show detail.
  <informalfigure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/alpha-blending.png" scale="58" format="PNG" />
      </imageobject>
      <textobject>
        <phrase>Line intersections without and with alpha blending.</phrase>
      </textobject>
    </mediaobject>
  </informalfigure>
</para>

</sect2>

<sect2 id="conc-truecolor-using-alpha">
<title>Using Variable Transparency (Alpha) in PHPlot</title>
<para>
To use partially transparent colors (that is, colors with an alpha channel)
with a PHPlot_truecolor object, you can specify an alpha value as part of a
color specification, and you can specify a default alpha value for all data
colors.
</para>

<para>
Use of alpha values with a color specification is described below,
in <xref linkend="conc-truecolor-forms"/>.
Here are some examples of using colors with an alpha specification.
</para>

<para>
This sets the color used for labels to red=192, green=192, blue=33, and
alpha=50 (that is, 50/127 transparency).
<programlisting><![CDATA[
$plot->SetTextColor(array(192, 192, 33, 50));
]]></programlisting>
</para>

<para>
This sets the color used for tick marks to the color 'blue' from the color
map, with alpha value 64 (64/127 transparency).
<programlisting><![CDATA[
$plot->SetTickColor('blue:64');
]]></programlisting>
</para>

<para>
This sets colors for the first three data sets to red, green, and blue with
different alpha values. The three colors are represented using
different formats for illustration purposes.
<programlisting><![CDATA[
$plot->SetDataColors(array(
      array(255, 0, 0, 60), // Red with alpha=60
      '#00ff0050',          // Green with alpha=80 (0x50)
      'blue:70'));          // Blue with alpha=70
]]></programlisting>
</para>

<para>
Instead of specifying the alpha value for each data set color, you can
provide a default alpha value for all data colors using the third argument to
This uses the colors specified in $my_color_array with a default alpha of
50. The default is applied to any color definition which does not already
have an alpha value.
<xref linkend="SetDataColors"/>.
<programlisting><![CDATA[
    $plot->SetDataColors($my_color_array, NULL, 50);
]]></programlisting>
</para>

<para>
This can also be used to apply an alpha value to the default data colors.
This retains the default data colors, but applies alpha = 50 (50/127
transparency) to all the colors. This is a quick way to get partially
transparent data colors without re-specifying all the colors.
<programlisting><![CDATA[
    $plot->SetDataColors(NULL, NULL, 50);
]]></programlisting>
</para>
</sect2>

<sect2 id="conc-truecolor-forms">
<title>Color Parameter Form Extensions</title>
<para>
In addition to the forms specified in <xref linkend="conc-colors-forms"/>,
colors specifications can include an alpha value. Although this works with
palette images as well as truecolor images, specifying alpha values
with palette images provides limited value.
<orderedlist>
  <listitem>
    <para>
A color name, as defined by <xref linkend="SetRGBArray" /> or from a built-in
color map if SetRGBArray was not called, followed by a colon and an alpha
value as a decimal number, for example: 'red:60'. The alpha value is
between 0 (opaque) and 127 (transparent).
Note that colors in the color map can be defined with or without an alpha
value. An alpha value appended to the color name overrides any specified
in the color map. For example, if the color 'red2' is defined in the color
map as array(255,0,0,80) - that is, red with 80/127 transparency - then
'red2' has alpha of 80, and 'red2:40' has alpha of 40.
    </para>
  </listitem>
  <listitem>
    <para>
Numeric color component values, in the form <literal>#rrggbbaa</literal>.
Here rr is red, gg is green, and bb is blue, and each component
value is represented as a 2-digit hexadecimal number between 00 and ff.
Also aa is alpha, represented as a 2 digit hexadecimal number between 00 and 7f.
For example, <literal>#00ff0010</literal> is green with 16/127 transparency.
    </para>
  </listitem>
  <listitem>
    <para>
A PHP array of red, green, blue, and alpha color component values.
Each value of red, green, and blue are in the range 0 to 255 inclusive,
and the alpha component is in the range 0 to 127 inclusive.
For example,
<literal>array(0,255,0,16)</literal> is the same green with 16/127 transparency.
    </para>
  </listitem>
</orderedlist>
</para>

</sect2>

<sect2 id="conc-truecolor-fileformats">
<title>Image Formats and File Formats, Palette and Truecolor</title>
<para>
PHPlot can produce JPEG, PNG, and GIF image files (and possibly others).
You select the PHPlot output image file format with
<xref linkend="SetFileFormat"/>.
</para>

<para>
PHPlot works with GD images before producing an image file. There are two
types of GD images: truecolor and palette. Truecolor images represent
pixels as 32 bit values, combining 8 bits each of red, green, and blue
components with a 7 bit alpha (transparency) value. Palette images use a
color table with at most 256 entries, and represent pixels as 8 bit indexes
into the color table. The palette image color table entries have 32 bit
values, with the same components as truecolor image pixel values. So
palette images in GD can have at most 256 unique colors, but there is no
limitation on the number of unique colors in truecolor images.
</para>

<para>
As long as you don't specify a background image when creating your plot object,
truecolor images are created with the <literal>PHPlot_truecolor</literal> class,
and palette images are created with the <literal>PHPlot</literal> class.
If you specify a background image, the GD image created by PHPlot matches the
type - truecolor or palette - of your background image file.
More on background image files can be found in
<xref linkend="conc-truecolor-background"/> below.
</para>

<para>
What happens when you output the GD image to an image file depends on the
image file format you select.
</para>

<para>
JPEG image files are always truecolor. Whether you have a GD palette image
or truecolor image, you will get a truecolor image file.  Note: You are
discouraged from using JPEG images with PHPlot, because they are not
optimal for this type of graphical information due to use of lossy
compression.
</para>

<para>
GIF image files are always palette type, limited to 256 colors. If
you have a GD palette image, you will get a palette GIF image file with the
colors you used in your plot. If you have a a GD truecolor image, GD will
convert your image to palette format, reducing the number of colors to 256
if necessary. This may change the appearance of your plot. Note that some
versions of the PHP manual for <function>imagecreatetruecolor()</function>
incorrectly state that you cannot output a GIF file from a truecolor GD image.
</para>

<para>
PNG image files support truecolor images and palette images of various
color depths.  If you have a GD palette image, you will get a palette PNG
image file. If you have a GD truecolor image, you will get a truecolor PNG
image file. Note that by default, even though PNG truecolor image files
support an alpha channel, GD eliminates the alpha channel when producing a
PNG file. The visual effects of alpha blending are reproduced using opaque
colors. GD apparently does this due to poor support in viewers for alpha
channels. Refer to the PHP Manual page on
<function>imagesavealpha()</function> for details.
</para>

<para>
In the initial release of Truecolor support in PHPlot-5.1.1, alpha channel
information was ignored when using a PHPlot object, and only used with a
PHPlot_truecolor object. This was changed in PHPlot-5.1.2, and alpha
channel information is used for both PHPlot and PHPlot_truecolor classes.
However, alpha channel information is not always useful with palette
images.
More on this can be found in <xref linkend="conc-truecolor-palette"/> below.
</para>
</sect2>

<sect2 id="conc-truecolor-plottypes">
<title>Truecolor Images and Plot Types</title>
<para>
All PHPlot plot types work with truecolor images, but not all plot types
work well with alpha blending of data colors.
</para>

<para>
<variablelist>
  <varlistentry>
    <term>Pie Charts</term>
    <listitem>
      <para>
Avoid using alpha blending with pie charts. The underlying GD
routines do not fill the pie areas in a way that allows proper blending of
colors. Flat pie charts (using SetShading(0)) are not too bad, showing some
artifacts, but shaded or 3D-look pie charts are poorly rendered.
      </para>
    </listitem>
  </varlistentry>
  <varlistentry>
    <term>Bar Charts</term>
    <term>Stacked Bar Charts</term>
    <listitem>
      <para>
Bars are drawn properly, but the 3D shading affects get blended, resulting
in less than ideal appearance. Flat, outlined bars (using SetShading(0))
are fine with transparency, but when shading is on the 3D shadows overlap
portions of the bars. With alpha blending, the overlaps take on new colors.
      </para>
    </listitem>
  </varlistentry>
</variablelist>
</para>

</sect2>

<sect2 id="conc-truecolor-background">
<title>Background Images</title>
<para>
When creating a PHPlot or PHPlot_truecolor object, you can provide an
existing image filename to the constructor as the fourth argument,
<parameter>$input_file</parameter>.
<programlisting><![CDATA[
$plot = new PHPlot(800, 600, NULL, 'myimage.png');
]]></programlisting>
This image file becomes the background for your plot. (The function
<xref linkend="SetInputFile"/> also does this,
but is deprecated for use except through the constructor.)
</para>

<para>
If you provide an input file to the constructor, the image associated with
your PHPlot or PHPlot_truecolor object takes on the type of the input file:
palette or truecolor. It does not matter which constructor you use when
specifying an input file as background.
(This was changed after the initial release of truecolor support.
In PHPlot-5.1.1, you must use the PHPlot_truecolor constructor in order to
use some truecolor features even when you use a truecolor background
image file. Starting with PHPlot-5.1.2 you can use either constructor.)
</para>

<note>
  <para>
The above applies only when an input file is specified to the PHPlot
or PHPlot_truecolor constructor.  It does not apply to
an image background set with <xref linkend="SetBgImage"/>
nor to a plot area background set with <xref linkend="SetPlotAreaBgImage"/>.
  </para>
</note>

</sect2>

<sect2 id="conc-truecolor-callbacks">
<title>Additional Operations on Truecolor Images Using Callbacks</title>
<para>
Advanced operations on truecolor PHPlot images are possible using PHPlot
callbacks. See <xref linkend="callbacks"/> for more information about using
callbacks.  Here are some of the operations you can perform, and the
corresponding GD functions.  Refer to the GD section of the PHP Manual for
more information on these functions.
</para>
<note>
  <para>
Some of these functions are only available when PHP was built with the
bundled version of the GD library.
  </para>
</note>

<sect3 id="conc-truecolor-callbacks-antialias">
<title>imageantialias()</title>
<para>
You can turn on anti-aliasing of truecolor images. This must be done before
anything is drawn, so the pre-drawing callback <literal>draw_setup</literal>
is used. Here is a partial example:
<programlisting><![CDATA[
function pre_plot($img)
{
    imageantialias($img, True);
}
...
$plot = new PHPlot_truecolor(1024, 768);
$plot->SetCallback('draw_setup', 'pre_plot');
]]></programlisting>
</para>

<para>
Note: There are limitations with anti-aliased images. You cannot use wide
lines (<xref linkend="SetLineWidths"/>).
Patterned lines do not work, so if you are displaying
X or Y grid lines you must use <xref linkend="SetDrawDashedGrid"/>(False)
to make these solid.
Also note that TrueType Font (TTF) text is always anti-aliased, even on
palette images, regardless of the use of <function>imageantialias()</function>.
</para>
</sect3>

<sect3 id="conc-truecolor-callbacks-alphablending">
<title>imagealphablending() and imagelayereffect()</title>
<para>
These functions control the combining of partially transparent colors. They
can be used via a <literal>draw_setup</literal> callback, in the same way
as <function>imageantialias</function> in the example above.
Note that alpha blending is on by default with all truecolor images.
</para>
</sect3>

<sect3 id="conc-truecolor-callbacks-gammacorrect">
<title>imagegammacorrect()</title>
<para>
You can have the GD library perform gamma adjustment on a truecolor image.
This must be done after all drawing, so the post-drawing callback
<literal>draw_all</literal> is used. Here is a partial example:
<programlisting><![CDATA[
function post_plot($img)
{
    imagegammacorrect($img, 1.0, 0.5); // Input gamma=1, output gamma=.5
}

...
$plot = new PHPlot_truecolor(1024, 768);
$plot->SetCallback('draw_all', 'post_plot');
]]></programlisting>
</para>
</sect3>
</sect2>

<sect2 id="conc-truecolor-palette">
<title>Palette Images and Advanced Color Features</title>
<para>
You will have a GD palette image if you use the <literal>PHPlot</literal>
constructor without a background image file, or if you use either the
<literal>PHPlot</literal> or <literal>PHPlot_truecolor</literal>
constructors with a background image file that is a palette image (GIF or
some types of PNG). You can use alpha color specifications with palette GD
images, but this is not recommended. The results are not well documented,
but the following behavior has been observed:
</para>

<para>
  <itemizedlist>
    <listitem>
      <para>
There is no alpha blending. Drawing operations simply replace existing
pixels values with the new pixel values. (These are actually index values
into the color table.)
      </para>
    </listitem>

    <listitem>
      <para>
Alpha values are ignored when the image is output to a JPEG or GIF file.
All colors are output as opaque.
      </para>
    </listitem>

    <listitem>
      <para>
Alpha values are preserved in PNG image files. These will be palette, not
truecolor, PNG images, with the color table containing the alpha values.
You can therefore have palette PNG files with partial transparency, however
not all viewers properly support this.
      </para>
    </listitem>
  </itemizedlist>
</para>

<para>
Nothing described in <xref linkend="conc-truecolor-callbacks"/> works with
palette images, including gamma adjust and anti-aliasing (except that
TrueType Font text is always anti-aliased.)
</para>
</sect2>

</sect1>

<sect1 id="conc-colors-datacolor-callback">
<title>Custom Data Color Selection</title>
<abstract><title></title>
  <para>
This section describes customizing the selection of data colors using a
PHPlot callback. The data color callback was added in PHPlot-5.1.3.
  </para>
</abstract>

<sect2 id="conc-colors-datacolor-callback-standard">
<title>Standard Behavior of Data Color Selection</title>
<para>
Before explaining how to customize data color selection, here is a review
of how data color selection works by default.
</para>

<para>
Think of your data array as having rows and columns. The rows represent
values of the independent variable (usually X), and the columns contain one
or more values of the dependent variable (usually Y) for that value of the
independent variable. For this discussion, ignore any additional entries in
the data array, such as labels and X values.
The set of values from a column in your data array is also referred to as a
data set.
</para>

<para>
The standard behavior of PHPlot is to select a data color from the data
colors array using the column index for the data point. The selected color
will be used to draw a point marker, line segment, bar, etc.
This was explained in <xref linkend="conc-colors-datacolors"/>.
</para>

<para>
For example, if you have a data array with 12 rows and 3 columns for a bar
chart, you are drawing 12 groups of 3 bars. Within each bar group, the first
bar will be drawn with the first color in the data colors array (the color
with index 0), the second bar will use the second color from
the data colors array, and the third bar will use the third color.
You can see this in <xref linkend="example-bars1"/>, where the first three
colors in the data colors array are skyblue, green, and orange.
</para>

<para>
There are two other color arrays: the error bar colors and data border
colors. Error bar colors are used in error plots to indicate the positive
and negative error range, and data border colors are used to outline bars
in bar charts when 3D shading is off.
The same index (but not necessarily the same color) is used to
select the color for any of the three elements which are used in a plot.
For example, the first data set in a points plot with error bars will use
data color index 0 for the point markers, and error bar color index 0 for
the error bars. The second bar in each group in an unshaded bar chart will
use the second data color to fill the bar and the second data border color
to outline it.
</para>

<para>
You can set the colors in the three color arrays with
<xref linkend="SetDataColors"/>, <xref linkend="SetErrorBarColors"/>, and
<xref linkend="SetDataBorderColors"/>.
PHPlot will pad all these arrays to the number of columns in your data
array, by duplicating the earlier values. (For example, if you have 5 data
sets and define 3 colors red, green, and blue, PHPlot will pad this to be a 5
color array red, green, blue, red, green.)
It will not truncate the arrays. This means you can define more data
colors than there are data columns. These additional colors will not be
used with the standard color selection method, but can be used with custom
data color selection.
</para>
</sect2>

<sect2 id="conc-colors-datacolor-callback-custom">
<title>Custom Data Color Selection</title>
<para>
If you need more control over data colors, you can use the PHPlot
callback called <literal>data_color</literal>.
(See <xref linkend="callbacks"/> for general information about callbacks.)
Some of the things you can do with custom data color selection are:
  <itemizedlist>
    <listitem>
      <para>
A bar chart with each bar having a different color.
      </para>
    </listitem>
    <listitem>
      <para>
A linepoints plot with different colors for the line segments and the
point markers.
      </para>
    </listitem>
    <listitem>
      <para>
A bar chart where the bar color depends on the value of that data point.
      </para>
    </listitem>
  </itemizedlist>
</para>

<note>
  <para>
Custom data color selection is not available for plot types
<literal>pie</literal>, <literal>area</literal>, or
<literal>stackedarea</literal>.
These three plot types already provide full control over the data color
selection, with no need for the callback function,
because each color in the color array is only used once.
  </para>
</note>

<para>
To customize the use of data colors, you will define a function that
accepts as arguments the data array row and column index numbers (0-based
integers), and returns the color array index.  Register this function with
PHPlot as a callback, and your function will be called whenever PHPlot
needs to select a data color.
</para>

<para>
Note that your callback will return an array index, not a color value.
For example, if it returns 0, the first color in the data colors array will
be used, and the first color in the error bar colors array (if error bars
are being drawn), and the first color in the data border colors array (if
data borders are being drawn).
You will most likely need to set up the data colors array (and possibly the
error bar colors array and data border colors array too) in order to get
the results you want.
</para>

<para>
A function to act as a data color callback might look like this:
<programlisting><![CDATA[
function pickcolor($img, $passthrough, $row, $col, $extra = 0)
{
  $color_index = ...;

  return $color_index;
}
]]></programlisting>
The first two arguments are common to all callbacks: the PHPlot image
resource, and your passthrough argument (if any - see below).
(You generally will not need to access the image resource from the data colors
callback, but it is provided to all callbacks.)
The second and third arguments specify which data value is being plotted.
The $row corresponds to the independent variable (usually X), and
$col corresponds to the data set - plot line, bar within a bar group, etc.
Both $row and $col are zero based integers indexes.
</para>

<para>
Your callback is expected to return a color array index for this data
point. This will be an integer greater than or equal to zero, where zero
indicates the first color in the colors array should be used.
Your returned index should be within the bounds of the color array being
referenced, however PHPlot will use the value you return modulo the size of
the array. For example, the default PHPlot data colors array has 16 colors.
If your callback returns the value 20, the 5th color in the array will be
used (because 20 % 16 = 4, and index 4 is the 5th value in the array).
</para>

<para>
The $extra argument to your callback is for extra information you may need
to determine the color to use. Currently, this is only used for
'linepoints' plots and 'linepoints' error plots. These plots are drawn in
two stages: points and lines. In case you want different colors for the
points and lines, use the $extra argument. It will have the value 1 when
PHPlot is requesting the color of the point marker (shape), and the value
will be 0 when requesting the color of the line segment.
Note that the error bars of a linepoints error plot are drawn with the
color index returned for the points (but using the error bars colors, not
the data colors).
</para>

<para>
You do not need to specify the $extra argument in your callback function
declaration if you do not need it. But if you do specify it, you must make
it an optional argument with the value zero, because PHPlot does not always
supply the value.
</para>

<para>
The above function would be established as a data color callback for a
PHPlot object $plot like this:
<programlisting><![CDATA[
$plot->SetCallback('data_color', 'pickcolor', $passthru_arg);
]]></programlisting>
The first argument is the callback name, or 'reason':
<literal>data_color</literal>.
The second argument is the name of your callback function. An object and
method can be used here instead - see <xref linkend="callbacks-objects"/>.
The third argument is an optional pass-through value that will be sent to
your callback function each time it is called.
</para>
</sect2>

<sect2 id="conc-colors-datacolor-callback-examples">
<title>Custom Data Color Selection Examples</title>
<para>
For examples of using a data color callback, see
<xref linkend="ex-colorcallbackgradient"/> and
<xref linkend="ex-colorcallbackbars"/>.
</para>

</sect2>
</sect1>

<sect1 id="conc-labels">
<title>Labels</title>
<abstract><title></title>
  <para>
This section contains information about creating labels which identify data
values on the plot.
  </para>
</abstract>
<para>
There are two types of labels for X values: data labels and tick labels.
There are also tick labels for Y values, and data labels for Y values
which only work with bar charts and stacked bar charts.
None of this applies to pie charts, which have no tick labels
and internally-generated data value labels.
</para>

<sect2 id="conc-labels-tick">
<title>Tick Labels</title>
<para>
Tick labels are calculated from the X or Y values of the data. By default,
PHPlot will figure out what to use for X and Y tick labels, but the results
may not be what you want. You can change the calculated tick labels by
using several PHPlot functions.
You can use <xref linkend="SetXTickIncrement" /> and
<xref linkend="SetYTickIncrement" />
to set the spacing between tick marks (in World Coordinates),
or you can use <xref linkend="SetNumXTicks" /> and <xref linkend="SetNumYTicks" />
to set the number of tick marks.
These don't affect the value of the first tick mark, only the interval.
To set the value for the first tick mark, you define the World Coordinate
mapping with <xref linkend="SetPlotAreaWorld" />. For example:
<programlisting><![CDATA[
$plot->SetPlotAreaWorld(-10, NULL, 10, NULL);
$plot->SetXTickIncrement(1);
]]></programlisting>
This results in the X tick labels going from -10 to 10, with a tick mark
every 1 data unit.
</para>

<para>
Note that even with data type 'data-data', where explicit X values for the
data are supplied, the X tick labels are still calculated automatically
(unless modified by the functions named above). That is, your supplied X
values in the data array are not used for tick labels.
</para>

<para>
You can enable, disable, or position the tick labels with
<xref linkend="SetXTickLabelPos" /> and <xref linkend="SetYTickLabelPos" />.
</para>
</sect2>

<sect2 id="conc-labels-data">
<title>Data Labels</title>
<para>
Data labels apply to X values for all plot types.
X data labels are supplied in your data array for each data point.
For example, with data type text-data :
<programlisting><![CDATA[
     $data = array( array('Peaches',100),
                    array('Apples', 140),
                    array('Pears', 90));
]]></programlisting>
The three points have data labels 'Peaches', 'Apples', and 'Pears'.
These data labels will be drawn at the bottom of the plot (by default)
below the corresponding X values.
You can disable or reposition the X data labels with
<xref linkend="SetXDataLabelPos" />.
</para>

<para>
You will generally not want both X tick labels and X data labels on,
because they will overlap and be unreadable. If you are not using data
labels, you should either make them all empty strings in your data array,
or else use <xref linkend="SetXDataLabelPos"/>('none') to turn them off.
You can also call <xref linkend="SetXTickLabelPos"/> to explicitly position
the tick labels; PHPlot will then disable the data labels.
</para>

<para>
If you don't tell PHPlot what to do with X data and X tick labels,
the behavior depends on the PHPlot version.
PHPlot 5.1.0 and later will examine your data array to see if there are any
non-empty data labels, and if so it will draw only data labels, and omit
tick labels.
If all of the data labels are empty, tick labels will be drawn.
(PHPlot through 5.0.7 will draw both tick and data labels in these cases.)
</para>

<para>
There is one type of Y data label for bar charts, which indicates the Y
value above each bar.
There are two types of Y data labels for stacked bar charts. Bar total
labels indicate the total Y value for a bar stack, and are drawn above the
bar. Bar segment labels indicate the incremental value of each segment
within the bar, and are drawn inside the segment below the top.
Use <xref linkend="SetYDataLabelPos" /> to enable Y data labels.
<xref linkend="ex-bars4" /> shows a bar chart with Y data labels.
<xref linkend="ex-stackedbars3" /> shows a stacked bar chart with Y data
labels.
(Note that Y data labels for stacked bars was first implemented
in PHPlot-5.1.1.)
</para>

</sect2>

<sect2 id="conc-labels-format">
<title>Formatting Labels</title>
<para>
Both tick and data labels are subject to format controls. There are several
choices in formatting.  By default, the label value itself is simply displayed.
Use <xref linkend="SetXLabelType" /> and <xref linkend="SetYLabelType" /> to
select one of the other format types for tick labels.
Use <xref linkend="SetXDataLabelType" /> and
<xref linkend="SetYDataLabelType" /> to select one of the other format
types for data labels. (Note that SetXLabelType also sets the default
format for X data labels, for use if SetXDataLabelType is not called.
Also SetYLabelType sets the default for Y data labels, for use if
SetYDataLabelType is not called.)
</para>

<para>
Label format type 'data' expects the tick or data label values to be numbers,
and formats the values as floating point numbers with a separator between every
group of thousands and a fixed number of decimal places.
You can set the number of digits of precision, with the default being 1 digit.
PHPlot will try to set the thousands grouping separator and decimal separator
according to your locale, but this can be overridden if necessary.
</para>

<para>
Label format type 'time' expects the tick or data label values to be a PHP time
value (number of seconds since a fixed base data, the Unix Epoch).
PHPlot will format the labels according to the format string you provide.
Refer to the PHP documentation for <function>strftime()</function> for
details on the format string, but here are some examples for 31 December
2004 at 1:23:45 pm:

<informaltable>
  <?dbfo table-width="40%"?> <!-- Table width hint for PDF only -->
  <?dbfo keep-together="always"?>
  <tgroup cols="2">
    <?dbhtml table-summary="Date/time format examples"?>
    <colspec colname="c1" colwidth="50*" />
    <colspec colname="c2" colwidth="50*" />
    <thead>
      <row>
        <entry>Format String:</entry>
        <entry>Result:</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>%Y-%m-%d</entry>   <entry>2004-12-31</entry>
      </row>
      <row>
        <entry>%b %Y</entry>      <entry>Dec 2004</entry>
      </row>
      <row>
        <entry>%b %d, %Y</entry>  <entry>Dec 31, 2004</entry>
      </row>
      <row>
        <entry>%d %b</entry>      <entry>31 Dec</entry>
      </row>
      <row>
        <entry>%H:%M:%S</entry>   <entry>13:23:45</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>
</para>

<note>
  <para>
If you select 'time' formatting, but don't set a time format string,
PHPlot-5.0rc3 and higher will format the values as hours, minutes, and
seconds as shown in the last row of the table above.
(The default format was undefined before version 5.0rc3.)
  </para>
  <para>
Also note that there are limits to the range of this type of formatting
that can make it unusable for historical data. On some platforms, dates
before 1970-01-01 can not be formatted.
  </para>
  <para>
Starting with PHPlot-5.0.4, empty string values for data labels are
ignored for 'time' and 'data' formatting. Earlier versions would format
the labels as 0 (for 'data') or cause an error (for 'time').
  </para>
</note>

<para>
While date/time formatting can be useful, for X values it may be
easier to just format the label values in your PHP code and put the result
into the label positions in the data array. If you need date/time formatting for
Y values (and it is hard to imagine where that would be useful), you have
no option but to use the 'time' format labels for tick values.
</para>

<para>
Two additional label format types are available.
Label format type 'printf' uses a custom print format string.
To use label format type 'custom', you supply a function of your own
to format the labels. See <xref linkend="SetXLabelType"/> for more
details about these format types.
</para>
</sect2>

</sect1>


<sect1 id="conc-text">
<title>Text Fonts</title>
<abstract><title></title>
  <para>
This section contains information about using text fonts in PHPlot.
See <xref linkend="ref-textfonts"/> for PHPlot functions used with text
fonts.
  </para>
</abstract>

<sect2 id="conc-text-fonts">
<title>TrueType Font Selection</title>
<para>
PHPlot text can use built-in GD fonts or TrueType fonts. When using GD
fonts, you specify a font name as a number between 1 and 5. This selects
from 5 built-in GD fonts.
When using TrueType fonts, you need to specify a font filename.
The rest of this section discusses only TrueType fonts.
</para>

<note>
  <para>
The material on specifying font files for PHPlot applies to releases
starting with PHPlot-5.1.3. Through PHPlot-5.1.2, you generally need to specify
the full pathname of a font file, or the full path of a font directory.
  </para>
</note>

<para>
On Windows systems, you need to use the font filename, not the font name.
You can get the font filename using Control Panel - Fonts.
For example, Windows applications may display "Arial Black", or "Arial
Black (TrueType)" as a font name, but the actual font filename is "ariblk.ttf".
Since GD knows to look for fonts in the Windows font directory, you will
not need to specify a full pathname to font files, unless the font is
installed in some other directory.
</para>

<para>
On Windows, you can use the "Character Map" system tool to examine a font.
This can also be used to find the Unicode character code of a special character.
These will be displayed in hexadecimal, for example U+20AC for the Euro.
See <xref linkend="conc-text-special"/>
for more information on using special characters.
</para>

<para>
Here are some font selection examples for Windows:
<programlisting><![CDATA[
   # For titles, use Arial Bold Italic at 14 points:
   $plot->SetFontTTF('title', 'ARIALBI.TTF', 14)
   # For X Title, use Verdana at 12 points:
   $plot->SetFontTTF('x_title', 'VERDANA.TTF', 12)
]]></programlisting>
</para>

<para>
On some Linux and similar systems, GD is able to find fonts specified
without paths, but on other systems you will have to specify a font
directory with either <xref linkend="SetTTFPath"/> or as part of the
font name in <xref linkend="SetFontTTF"/>.
If you specify a full pathname to a font, you must also supply the extension
(.ttf); you may omit the extension when relying on GD to find the font.
Remember that font filenames are case sensitive on most of these systems.
</para>

<para>
The font search path for GD (bundled with PHP) includes the following
directories on Linux and similar systems:
  <itemizedlist>
    <listitem>
      <para><filename>/usr/X11R6/lib/X11/fonts/TrueType</filename></para>
    </listitem>
    <listitem>
      <para><filename>/usr/X11R6/lib/X11/fonts/truetype</filename></para>
    </listitem>
    <listitem>
      <para><filename>/usr/X11R6/lib/X11/fonts/TTF</filename></para>
    </listitem>
    <listitem>
      <para><filename>/usr/share/fonts/TrueType</filename></para>
    </listitem>
    <listitem>
      <para><filename>/usr/share/fonts/truetype</filename></para>
    </listitem>
    <listitem>
      <para><filename>/usr/openwin/lib/X11/fonts/TrueType</filename></para>
    </listitem>
  </itemizedlist>
If your system has TrueType fonts in one of those directories, you can
select them with a filename only. If not, you must use a full directory path
in either the font name or with SetTTFPath.
</para>
<note>
  <para>
The environment variable <envar>GDFONTPATH</envar> can be defined to
contain a list of directories (separated by a colon ':') to search for
fonts. If defined, this replaces the above list.
  </para>
</note>

<para>
Your Linux system may include a tool for examining fonts. One such tool is
<application>gucharmap</application>.
This can also be used to find the Unicode character code of a special character.
These may be displayed in hexadecimal, for example U+20AC for the Euro.
See the next section for more information on using special characters.
</para>

<para>
Here are some font selection examples for Linux:
<programlisting><![CDATA[
   # On systems with fonts in an expected place, like Slackware Linux,
   # just use the font filename:
   # For titles, use Liberation Sans Bold Italic at 14 points:
   $plot->SetFontTTF('title', 'LiberationSans-BoldItalic.ttf', 14)
   # For X Title, use DejaVuSans Bold at 12 points:
   $plot->SetFontTTF('x_title', 'DejaVuSans-Bold.ttf', 12)

   # Ubuntu and Debian use subdirectories under a searched path.
   # You can use a partial path here.
   $plot->SetFontTTF('x_title', 'ttf-liberation/LiberationSans-Regular.ttf', 12)

   # Fedora uses subdirectories which are not under a searched path.
   # You must use full paths here.
   $plot->SetTTFPath('/usr/share/fonts/liberation/');
   $plot->SetFontTTF('x_title', 'LiberationSans-Regular.ttf', 12)

]]></programlisting>
</para>

</sect2>

<sect2 id="conc-text-defaultfont">
<title>Default TrueType Font</title>
<note>
  <para>
This section applies starting with PHPlot-5.1.3.
  </para>
</note>
<para>
If you try to use TrueType text without specifying a font name, PHPlot will
use the default font. You can set the default font with
<xref linkend="SetDefaultTTFont"/>. If you do not set a default font,
PHPlot tries to locate a sans-serif font to use. Here are the font names
that PHPlot tries in order. First it tries the filename alone, letting GD
use its search path, and then it tries with the default font path, as set
with <xref linkend="SetTTFPath"/>.
  <itemizedlist>
    <listitem>
      <para>
<filename>LiberationSans-Regular.ttf</filename>
- Likely to work on Linux and other systems with a correct GD font search path.
      </para>
    </listitem>
    <listitem>
      <para>
<filename>Verdana.ttf, Arial.ttf, Helvetica.ttf</filename>
- One of these is going to work on Windows, maybe other systems too.
      </para>
    </listitem>
    <listitem>
      <para>
<filename>ttf-liberation/LiberationSans-Regular.ttf</filename>
- This is for Debian, Ubuntu, and similar.
      </para>
    </listitem>
    <listitem>
      <para>
<filename>benjamingothic.ttf</filename>
- The original PHPlot default, for compatibility.
      </para>
    </listitem>
  </itemizedlist>
The last item on the list is used regardless of whether it can be found or
not. This means if you enable TrueType fonts without setting a default, and
get an fatal error from PHPlot that it can't find the font benjamingothic.ttf,
this means PHPlot was unable to find any of the standard fonts in its list.
On that system, then, you must provide either a font directory, or use full
font pathnames.
</para>
</sect2>

<sect2 id="conc-text-special">
<title>Using Special Characters</title>
<para>
You can include special characters in your PHPlot labels and titles. This
refers to characters which you may not be able to type with a single key
on your keyboard, including accented characters and special symbols.
</para>

<para>
PHPlot itself does not do any special processing of text strings, so you
should refer to the PHP GD and Image Functions reference for more
information.
</para>

<note>
  <para>
This mostly only works with TrueType fonts. The built-in GD fonts do
have some extended characters, but they are encoded in ISO8859-2 which is
probably not what you might expect, and the GD font routines do not support
special character entities.
  </para>
</note>

<para>
To use special characters in your PHPlot text strings, you need a TrueType
font that contains the characters you want. Ideally, you want a Unicode
font. You might have to examine the font using an operating system-specific
tool to see if your characters are present and to find their numeric values.
</para>

<para>
There are two basic ways to include special characters in your text
strings. The examples below use the Euro character, which is decimal
Unicode value 8364.
<itemizedlist>
  <listitem>
    <para>
Use HTML-type character entities with decimal numeric encoding. For
example, the Unicode Euro symbol is: &amp;#8364;
    </para>
  </listitem>
  <listitem>
    <para>
Include the UTF-8 encoding of the Unicode value in your string as a series
of hex escapes. For example, the Euro symbol is: "\xe2\x82\xac".
    </para>
  </listitem>
</itemizedlist>
</para>
<para>
These are shown in the example below, both of which set the Y axis title to
"Items per &euro;100".
<programlisting><![CDATA[
  $plot->SetYTitle("Items per &#8364;100"); # Numeric character entity
  $plot->SetYTitle("Items per \xe2\x82\xac100"); # UTF-8 encoding
]]></programlisting>
</para>

<para>
You can also use PHP functions to encode your characters for including in
PHPlot text strings. See the PHP documentation for the functions
<function>html_entity_decode()</function>
and <function>iconv()</function>.
Here are some examples (sent in by Sourceforge user 'kalvaro'):
<programlisting><![CDATA[

# Encode the Euro symbol into UTF-8:
$chars = html_entity_decode('&euro;', ENT_NOQUOTES, 'UTF-8');

# Use iconv() to convert a character value xA4 in ISO-8859-15 to UTF:
$chars = iconv('iso-8859-15', 'utf-8', chr(0xA4));

]]></programlisting>
</para>
</sect2>

</sect1>

<sect1 id="conc-errors">
<title>Error Handling</title>
<abstract><title></title>
  <para>
This section describes error handling in PHPlot. This information may not
be accurate for PHPlot-5.0.4 and earlier.
  </para>
</abstract>

<sect2 id="conc-errors-overview">
<title>Error Handling Overview</title>
<para>
Errors detected within PHPlot are programming or installation errors. These
are conditions that web application users should never see, because they
should be detected and corrected before an application is deployed.
Therefore, error handling in PHPlot is aimed more at the developer
than the application user.
</para>
<para>
PHPlot does the following when an error is detected:
<itemizedlist>
  <listitem>
    <para>
Creates an error image - an image containing the text of the error message.
    </para>
  </listitem>
  <listitem>
    <para>
Outputs the error image to standard output or to a file, depending on where
the plot image was supposed to go.
    </para>
  </listitem>
  <listitem>
    <para>
Triggers a user-level error condition.
If an error handler has been established, it determines what happens next.
Otherwise, with no error handler:
Writes the error message to error output, or logs it to the
web server error log, depending on the PHPlot SAPI in use.
Then the script will exit with a non-zero exit status.
    </para>
  </listitem>
</itemizedlist>
It is important not to have any text sent to standard output, even when
an error occurs, or the image will be corrupted or PHP will display a "headers
already sent" error and no image. Therefore it is necessary to turn off the
PHP <command>display_errors</command> parameter, otherwise PHP will also
write the error messages to standard output. This can be turned off in the
php.ini configuration file, where it affects all scripts, or in an
application script using:
<programlisting><![CDATA[
   ini_set('display_errors', 'off');
]]></programlisting>
</para>
<para>
Note that an image is produced and output on error even if
<function>SetPrintImage(False)</function> is used to suppress or delay
the normal output of a plot image. The error image is meant for the application
developer or tester, but you need to see the error message in order to fix
the problem which caused it, so the image is output when the error occurs.
</para>
<para>
<?dbfo keep-together="always"?>
The following figure shows an example of an error image resulting from
<function>$plot->SetPlotType('dots')</function>:
  <informalfigure>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/error-image.png" scale="58" format="PNG" />
      </imageobject>
      <textobject>
        <phrase>Example of an error image</phrase>
      </textobject>
    </mediaobject>
  </informalfigure>
</para>
</sect2>

<sect2 id="conc-errors-types">
<title>Types of Errors</title>
<para>
The following types of errors can occur within PHPlot:
<orderedlist>
  <listitem>
    <para>
Parameter value errors: Use of an incorrect argument to a PHPlot function,
such as: SetPlotType('dots') ['dots' is not a valid plot type].
    </para>
  </listitem>
  <listitem>
    <para>
Semantic errors: Invalid combination of parameters or data values, such as
trying to use data type 'data-data' with plot type 'bars' [bar charts only
work with 'text-data' data type].
    </para>
  </listitem>
  <listitem>
    <para>
Pathname errors: Missing font file or invalid font path; missing or
invalid image file used as background. It might seem extreme to have a
missing font file be a fatal error, but PHPlot has no way to substitute an
appropriate font, and a missing font would indicate an application
configuration or installation error.
    </para>
  </listitem>
  <listitem>
    <para>
Inability to create a GD image resource. Probably the only way this can
happen is if there is insufficient memory, which can occur if PHP's
configured per-script memory limit is reached. (See note below)
    </para>
  </listitem>
</orderedlist>
All of these result in an E_USER_ERROR level error, except for memory
exhaustion when creating an image, which is E_ERROR (fatal unrecoverable).
If no GD image resource was created, no error image will be output.
Furthermore, if the reason was memory exhaustion, there is no way to catch
the error and PHP will cause the script to immediately exit.
</para>
</sect2>
<sect2 id="conc-errors-handle">
<title>Error Handlers</title>
<para>
It is possible to set up an error handler with PHP's
<function>set_error_handler</function> to catch most errors from PHPlot.
The handler can be established for all errors (the default), or just
E_USER_ERROR error types (the only type PHPlot will trigger).
See the PHP documentation for more details.
Your handler function can perform cleanup before it exits, however it should
not return.
Some of the PHPlot functions will correctly handle a return from an error
handler, and return FALSE to their callers, but not all. At the very least,
a PHPlot object instance should be unset and not re-used after error.
Use of error handlers that return is untested and unsupported.
</para>
<para>
Note that an error image will be created and output, as described above,
even if you have established an error handler.
</para>

</sect2>


</sect1>

</chapter>
