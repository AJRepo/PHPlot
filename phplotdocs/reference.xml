<!-- $Id$
     Reference section for PHPlot Reference Manual

  Note: Part I is <part>, Part II is a <reference>, so force the label.
-->
<reference label="II" id="reference">
<title>PHPlot Function Reference</title>

<partintro id="refintro">
<abstract><title></title>
  <para>
This part of the PHPlot Reference Manual
contains the reference information for the PHPlot functions.
Note that all the functions (except the class constructor) are implemented
as methods of the class PHPlot, and are therefore called through an object
which is an instance of the class. In this text, <literal>$plot</literal> is
used to represent an instance of the PHPlot class.
  </para>
</abstract>
</partintro>

<refentry id="DrawGraph">
  <refmeta>
    <refentrytitle>DrawGraph</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>DrawGraph</refname>
    <refpurpose>Draw the current graph onto the image</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;DrawGraph()
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>DrawGraph</function> actually draws the current graph onto the
image. That is, until DrawGraph is used, nothing happens except the
recording of settings and data.
DrawGraph also outputs the image with <xref linkend="PrintImage" />,
unless <xref linkend="SetPrintImage" /> was used.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
None
    </para>
  </refsect1>
</refentry>

<refentry id="GetCallback">
  <refmeta>
    <refentrytitle>GetCallback</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>GetCallback</refname>
    <refpurpose>Returns the current callback function registered for the given reason</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;GetCallback(<parameter>$reason</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>GetCallback</function> returns the current callback function
registered for the given reason.
That is, it returns the function argument value used when a callback
function was registered with <xref linkend="SetCallback"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$reason</replaceable></term>
        <listitem>
          <para>
A PHPlot-defined name for the callback.
See <xref linkend="callbacks-names" />.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Return Value</title>
    <para>
Returns the function name as a string, or a 2-element array
for object instance and method calls.
Returns False if there is no callback registered for this reason,
or if the given reason is not valid.
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Since no valid function name (or array of object instance and method)
evaluates to false when directly tested, it is not necessary to check
using the identical-to (===) operator.
    </para>
    <para>
Callbacks are an experimental feature added to PHPlot-5.0.4.
Refer to <xref linkend="callbacks"/> for more information.
    </para>
  </refsect1>
</refentry>

<refentry id="GetDeviceXY">
  <refmeta>
    <refentrytitle>GetDeviceXY</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>GetDeviceXY</refname>
    <refpurpose>Translate world coordinates into device coordinates</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
list($x, $y) = $plot-&gt;GetDeviceXY(<parameter>$x_world</parameter>, <parameter>$y_world</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>GetDeviceXY</function> translates values in
<link linkend="def-worldcoor">world coordinates</link> into
values in <link linkend="def-devcoor">device coordinates</link>.
This is useful if you want to annotate a plot with text or graphics
positioned relative to specific data values. Given the coordinates of a
point in the coordinate space of your data values, this function returns
the pixel coordinates of that point in the image.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$x_world</replaceable></term>
        <listitem>
          <para>
The X coordinate to translate from world coordinates.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$y_world</replaceable></term>
        <listitem>
          <para>
The Y coordinate to translate from world coordinates.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Return Value</title>
    <para>
Returns an array of two values ($x, $y) in device coordinates which
correspond to the world coordinate parameters.
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This function only works after scaling factors have been established, which
happens in <xref linkend="DrawGraph"/>. So it can only be used in two cases:
      <itemizedlist>
        <listitem>
          <para>
From a drawing callback (see <xref linkend="callbacks"/>) - that is, a
callback whose name starts with 'draw'.
          </para>
        </listitem>
        <listitem>
          <para>
If <xref linkend="SetPrintImage"/>(False) is used to disable automatic
output of the image file, then <function>GetDeviceXY()</function> can be
used after <xref linkend="DrawGraph"/> returns.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
<function>GetDeviceXY()</function> will fail with an error message if it
is called before scaling is set up.
    </para>
    <para>
If the world coordinates represent a point that is not visible on the plot,
the returned device coordinates will be outside the plot area, or even
outside the image area.
    </para>
    <para>
To see how this can be used in callbacks,
see <xref linkend="callbacks-drawing"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.1.0.
    </para>
  </refsect1>
</refentry>

<refentry id="PHPlot">
  <refmeta>
    <refentrytitle>PHPlot</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>PHPlot</refname>
    <refpurpose>Construct a new PHPlot Class Object</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot = new PHPlot(<optional><parameter>$width</parameter></optional>, <optional><parameter>$height</parameter></optional>, <optional><parameter>$output_file</parameter></optional>, <optional><parameter>$input_file</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
This is the class constructor for PHPlot. It creates a new plot object and
initializes all internal settings to default values.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$width</replaceable></term>
        <listitem>
          <para>
Optional width of the plot image, in pixels. Default is 600.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$height</replaceable></term>
        <listitem>
          <para>
Optional height of the plot image, in pixels. Default is 400.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$output_file</replaceable></term>
        <listitem>
          <para>
Optional name of a file where the image output will be written.
This is the same as using <xref linkend="SetOutputFile" />.
Default is no output file, meaning the image is written to standard output
(that is, sent back to the browser).
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$input_file</replaceable></term>
        <listitem>
          <para>
Optional name of a file to use as a starting image. This becomes the
background for the plot.  If an input_file is given, any width and height
given to the constructor are ignored, and the size of the image in the
named input_file are the plot image size.  Default is no input file,
meaning a blank image will be created at the given or default width and
height.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Return Value</title>
    <para>
Returns an object, an instance of the PHPlot class.
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The output_file will be ignored unless <xref linkend="SetIsInline" />(True) is
called.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Earlier versions of this manual said that the created object should always
be returned as a reference, like this:
      <programlisting><![CDATA[
  $plot =& new PHPlot(...);  // Do not use this
]]></programlisting>
This was because PHPlot included a function to deallocate memory used by
the object at script shutdown, but that would only work if a reference
assignment was used. This quasi-destructor was removed at PHPlot-5.0.4
because it interfered with memory deallocation until the script ended.
So the reference assignment should not be used.
In addition, reference assignment of a newly created object instance
is deprecated starting with PHP5.
    </para>
  </refsect1>
</refentry>

<refentry id="PrintImage">
  <refmeta>
    <refentrytitle>PrintImage</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>PrintImage</refname>
    <refpurpose>Output the generated graph image and clean up the
internal storage space.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;PrintImage()
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>PrintImage</function> outputs the generated graph image and
cleans up the internal storage space used.
Output goes to the browser by default, or to the output file set by
<xref linkend="SetOutputFile" />.
    </para>
    <para>
Using PrintImage is not normally needed,
since <xref linkend="DrawGraph" /> calls PrintImage unless it was
told not to using <xref linkend="SetPrintImage" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
None
    </para>
  </refsect1>
</refentry>

<refentry id="RemoveCallback">
  <refmeta>
    <refentrytitle>RemoveCallback</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>RemoveCallback</refname>
    <refpurpose>Unregisters any callback registered for the given reason</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;RemoveCallback(<parameter>$reason</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>RemoveCallback</function> unregisters any callback registered
for the given reason.
It undoes the effect of <xref linkend="SetCallback"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$reason</replaceable></term>
        <listitem>
          <para>
A PHPlot-defined name for the callback.
See <xref linkend="callbacks-names" />.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Return Value</title>
    <para>
Returns True if the given reason is valid (whether or not
there was actually a callback registered for it).
Returns False if reason is not a valid callback reason.
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Callbacks are an experimental feature added to PHPlot-5.0.4.
Refer to <xref linkend="callbacks"/> for more information.
    </para>
  </refsect1>
</refentry>

<refentry id="SetBackgroundColor">
  <refmeta>
    <refentrytitle>SetBackgroundColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetBackgroundColor</refname>
    <refpurpose>Sets the overall background color.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetBackgroundColor(<parameter>$color</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetBackgroundcolor</function> sets the overall background
color. This is the color of the background of the whole image.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>


  <refsect1>
    <title>Notes</title>
    <para>
The default background color is white.
Background image overrides background color;
background color is ignored if a background image was set with
<xref linkend="SetBgImage" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetBgImage">
  <refmeta>
    <refentrytitle>SetBgImage</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetBgImage</refname>
    <refpurpose>Set a graphic file to be used in the graph background</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetBgImage(<parameter>$input_file</parameter>, <optional><parameter>$mode</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetBgImage</function> sets an image file to be used as the graph
background. The image can be scaled or tiled to fit.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$input_file</replaceable></term>
        <listitem>
          <para>
Path to the file to be used. The file can be any type allowed by GD, which
usually includes JPEG, GIF, and PNG.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$mode</replaceable></term>
        <listitem>
          <para>
Optional display mode for the background image: one of the strings
'centeredtile', 'tile', or 'scale'. The default is 'centeredtile'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If a background image has been set, background color (set with
<xref linkend="SetBackgroundColor" />) is ignored.
    </para>
    <para>
Scale mode scales the supplied background image file to fit the image area
of the entire graph.  Tile and centeredtile modes repeat the supplied
background image file as needed to fit the image area of the graph.  The
difference is that centeredtile offsets the start position within the
background image by half its size, which works better for some images.
    </para>
    <para>
SetBgImage sets a background for the entire image area, while
<xref linkend="SetPlotAreaBgImage" /> sets a background for
the plot area (generally, the area between the axes).
If both are used, the plot area background overlays that portion
of the overall background.
    </para>
  </refsect1>
</refentry>

<refentry id="SetBrowserCache">
  <refmeta>
    <refentrytitle>SetBrowserCache</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetBrowserCache</refname>
    <refpurpose>Control browser-side image caching</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetBrowserCache(<parameter>$browser_cache</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetBrowserCache</function> controls whether to allow the browser
to cache the image generated by PHPlot.
By default, PHPlot sends out HTTP headers to tell the browser not to cache
the generated image, since it is assumed that the image is generated from
dynamic data and a cached copy would not be accurate. You can use this
function to allow the browser to cache the image.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$browser_cache</replaceable></term>
        <listitem>
          <para>
True to allow the browser to cache the image; False to not allow the
browser to cache the image.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
</refentry>

<refentry id="SetCallback">
  <refmeta>
    <refentrytitle>SetCallback</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetCallback</refname>
    <refpurpose>Registers a callback function</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetCallback(<parameter>$reason</parameter>, <parameter>$function</parameter>, <optional><parameter>$arg</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetCallback</function> registers a callback function. That is, it
arranges for the caller-provided function to be called at a specific point
or points inside PHPlot's internal processing.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$reason</replaceable></term>
        <listitem>
          <para>
A PHPlot-defined name for the callback.
See <xref linkend="callbacks-names" />.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$function</replaceable></term>
        <listitem>
          <para>
The function to be called. This can be either the name of a function as a
string, or a two-element array with an object class instance and method name.
See <xref linkend="callbacks-api"/> for more information.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$arg</replaceable></term>
        <listitem>
          <para>
An optional opaque argument passed-through to the callback function when
PHPlot triggers the callback. If not supplied, the callback function will
get a NULL argument.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Return Value</title>
    <para>
Returns True if the callback has been registered.
Returns False on error. The only error condition is if the given callback
reason is not valid. Note that the function name is not validated until
the callback is triggered.
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If a callback is already registered for the given reason, the new callback
replaces the old one.
    </para>
    <para>
Callbacks are an experimental feature added to PHPlot-5.0.4.
Refer to <xref linkend="callbacks"/> for more information.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDataBorderColors">
  <refmeta>
    <refentrytitle>SetDataBorderColors</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDataBorderColors</refname>
    <refpurpose>Set the rectangle border color on bars and stacked bars</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetDataBorderColors(<parameter>$border</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDataBorderColors</function> sets the colors used for the
borders of the bars and stacked bars for plot types 'bars' and
'stackedbars'. The borders are only drawn if shading is turned off
with <xref linkend="SetShading" />; the default is to draw bars with
a drop-shadow for a 3-D look and no borders.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$border</replaceable></term>
        <listitem>
          <para>
An array of color values, one for the bar border of each data set.
Or, a single color value (not an array) to use for all data sets.
For other possibilities, see Notes.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$border</parameter>, it
must use zero based sequential integer indexes. This is what the PHP manual 
calls 'the usual integer indices (starting from zero, increasing by one)'.
    </para>
    <para>
If this function is never called, and <xref linkend="SetShading" /> is called
to turn shading off, a default color map is used which sets all data borders
to black.
    </para>
    <para>
This is only used for plot types 'bars' and 'stackedbars', and only if shading
is turned off.
    </para>
    <para>
If you want flat (unshaded), borderless bars, call SetShading(0) to turn
off the shading, and call SetDataBorderColors with the same color (or color
array) that you use with <xref linkend="SetDataColors" />.
    </para>
    <para>
If <parameter>$border</parameter> is not an array, but a single color
value, then that color will be used for all data sets.
However, the array(r,g,b) notation is not allowed in
this case (because it looks like an array of 3 separate color values).
    </para>
    <para>
Two special uses of the <parameter>$border</parameter> argument
are available.
If the argument is an empty string, or boolean False, the color map is reset
to the defaults. This can be used to restore the default color map.
If the argument is NULL or missing from the function call, the color map is
reset to the defaults, but only if it has not already been set.
This is used internal to PHPlot for one-time initialization.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDataColors">
  <refmeta>
    <refentrytitle>SetDataColors</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDataColors</refname>
    <refpurpose>Set the colors for plotting data sets</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetDataColors(<parameter>$data_colors</parameter>, <optional><parameter>$border</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDataColors</function> sets the colors used for plotting the
data.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$data_colors</replaceable></term>
        <listitem>
          <para>
An array of color values, one for each data set.
Or, a single color value (not an array) to use for all data sets.
For other possibilities, see Notes.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$border</replaceable></term>
        <listitem>
          <para>
Argument provided for backward compatibility.
Use <xref linkend="SetDataBorderColors" /> instead.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$data_colors</parameter>, it
must use zero based sequential integer indexes. This is what the PHP manual 
calls 'the usual integer indices (starting from zero, increasing by one)'.
    </para>
    <para>
Usually the <parameter>$data_colors</parameter> argument is an array of colors,
one for each data set to be plotted. For example:
      <programlisting><![CDATA[
$plot->SetDataColors(array('red', 'green', 'blue'));
$plot->SetDataType('data-data');
$plot->SetDataValues(array( array('', 1, 4, 10, 5),
                            array('', 2, 6, 20, 3)));
]]></programlisting>
This will plot a red line from (1,4) to (2,6), a green line from (1,10) to
(2,20), and a blue line from (1,5) to (2,3).
    </para>
    <para>
If <parameter>$data_colors</parameter> is not an array, but a single color
value, then that color will be used for all data sets.
However, the array(r,g,b) notation is not allowed in
this case (because it looks like an array of 3 separate color values).
    </para>
    <para>
Two special uses of the <parameter>$data_colors</parameter> argument
are available.
If the argument is an empty string, or boolean False, the color map is reset
to the defaults. This can be used to restore the default color map.
If the argument is NULL or missing from the function call, the color map is
reset to the defaults, but only if it has not already been set.
This is used internal to PHPlot for one-time initialization.
    </para>
    <para>
If SetDataColors is never called, a default color map is used which
contains 16 colors starting with SkyBlue, green, orange, and blue.
For the full list, see <xref linkend="conc-colors-datacolors"/>.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, the default color map contained these 8 colors:
SkyBlue, green, orange, blue, orange, red, violet, and azure1.
These were used if SetDataColors was never called.
Unfortunately, orange is used twice, and azure1 is so close to the white
background that it is invisible. Also, through PHPlot-5.0.7, if
SetDataColors was called with an empty string argument, the color map was
set to these 4 colors: blue red green orange.
Starting with PHPlot-5.1.0, a new default color map with 16 colors was
defined. Given an empty string (or False), SetDataColors now restores the
default color map.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDataType">
  <refmeta>
    <refentrytitle>SetDataType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDataType</refname>
    <refpurpose>Indicate the format of the data array</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetDataType(<parameter>$dt</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDataType</function> tells PHPlot how to interpret the data
array set with <xref linkend="SetDataValues" />.
More information on data types can be found in <xref linkend="conc-datatypes" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$dt</replaceable></term>
        <listitem>
          <para>
The data array format type, which must be one of the following values:
            <informaltable>
              <tgroup cols="2">
                <?dbhtml table-summary="Available data types"?>
                <thead>
                  <row>
                    <entry>Format</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>text-data</entry>
                    <entry>Each data array entry is an array with a label,
                      followed by one or more Y values.</entry>
                  </row>
                  <row>
                    <entry>data-data</entry>
                    <entry>Each data array entry is an array with a label,
                      an X value, then one or more Y values.</entry>
                  </row>
                  <row>
                    <entry>data-data-error</entry>
                    <entry>Each data array entry is an array with a label,
                      an X value, then one or more triplets of Y value,
                      error in the positive directory, and error in the
                      negative direction.</entry>
                  </row>
                  <row>
                    <entry>text-data-single</entry>
                    <entry>This is used only for pie charts. Each data
                      array entry is an array with a label and a single
                      data value.</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default data type is <literal>text-data</literal>.
    </para>
    <para>
An example of a <literal>text-data</literal> data array is:
      <programlisting><![CDATA[
     $data = array(  array('Jan', 100, 150, 200),
                     array('Feb', 110, 140, 210),
                     array('Mar', 120, 145, 200),
                     array('Apr', 110, 160, 220) );
]]></programlisting>
This defines the data for 3 plots with 4 points on each, and a month name
as label for each point.
    </para>

    <para>
An example of a <literal>data-data</literal> data array is:
      <programlisting><![CDATA[
     $data = array(  array('', 2, 15),
                     array('', 4, 14),
                     array('', 6, 10),
                     array('', 8, 20) );
]]></programlisting>
Here the labels are empty strings, next are the X values, then a single
set of Y values (1 plot).
    </para>

    <para>
An example of a <literal>data-data-error</literal> data array is:
      <programlisting><![CDATA[
     $data = array(  array('1999', 1, 23.5, 5, 3),
                     array('2000', 2, 20.1, 4, 4),
                     array('2001', 3, 19.1, 3, 4),
                     array('2002', 4, 16.8, 4, 3) );
]]></programlisting>
Here the labels are years, next are the X values 1-4, then a single
set of Y values with error ranges between 3 and 5 for each point.
    </para>

    <para>
An example of a <literal>text-data-single</literal> data array,
used only for pie charts, is:
      <programlisting><![CDATA[
     $data = array(  array('', 10),
                     array('', 40),
                     array('', 50) );
]]></programlisting>
Here the labels are empty (they aren't used with a pie chart anyway),
and 3 slices with relative weights of 10, 40, and 50 are defined.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDataValues">
  <refmeta>
    <refentrytitle>SetDataValues</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDataValues</refname>
    <refpurpose>Set the data array for plotting</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetDataValues(<parameter>$dv</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDataValues</function> sets the data array which contains the
data values to be plotted. Use of this function is required.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$dv</replaceable></term>
        <listitem>
          <para>
The data array, containing values according to the data type format
set by <xref linkend="SetDataType" />.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
</refentry>

<refentry id="SetDefaultDashedStyle">
  <refmeta>
    <refentrytitle>SetDefaultDashedStyle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDefaultDashedStyle</refname>
    <refpurpose>Sets the on/off pattern for dashed lines.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetDefaultDashedStyle(<parameter>$style</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDefaultDashedStyle</function> sets the line style for dashed
lines. That is, it customizes the look of dashed lines by specifying the
dash and gap lengths.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$style</replaceable></term>
        <listitem>
          <para>
A string specifying the number of alternating colored and transparent dots,
in order. For example, '4-3' means 4 colored, 3 transparent;
'2-3-1-2' means 2 colored, 3 transparent, 1 colored, 2 transparent.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default dashed style is '2-4', meaning 2 pixels drawn, followed by a
gap of 4 pixels.
    </para>
    <para>
All dashed lines on a plot must use the same dashed style.
Dashed lines are used for the grid (unless disabled with
<xref linkend="SetDrawDashedGrid" />), and for any data sets with
line style set to dashed with <xref linkend="SetLineStyles" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDefaultTTFont">
  <refmeta>
    <refentrytitle>SetDefaultTTFont</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDefaultTTFont</refname>
    <refpurpose>Set the default TrueType font</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetDefaultTTFont(<parameter>$font</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDefaultTTFont</function> sets the default TrueType font,
resets all text elements to use that font, and makes TrueType fonts the
default font type.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$font</replaceable></term>
        <listitem>
          <para>
Name of the TrueType font file to use as default. Specify either a
filename in the default TrueType font directory, or a full pathname to the
font file.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If given a filename, rather than a full path, the function expects to find
the font file in the default TrueType font directory as set with
<xref linkend="SetTTFPath" />.
This function selects TrueType fonts as the default font type as if
<xref linkend="SetUseTTF" />(True) was called.
    </para>
    <para>
This function resets all elements to use the named font and default sizes,
so it undoes all prior
<xref linkend="SetFont" />, <xref linkend="SetFontGD" />,
and <xref linkend="SetFontTTF" /> calls.
    </para>
    <para>
Change the font used by individual text elements with
<xref linkend="SetFont" />, <xref linkend="SetFontGD" />,
and <xref linkend="SetFontTTF" /> after using SetDefaultTTFont.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.5, setting a default TrueType font with this function
also forced all text on the graph to use TrueType text.
Starting with PHPlot-5.0.6, it just sets the default font type.
Set <xref linkend="SetUseTTF" /> for more information on this change.
    </para>
    <para>
This function was changed at PHPlot-5.0rc3 to work as described above.
We are not quite sure how it worked before.
    </para>
  </refsect1>

</refentry>

<refentry id="SetDrawBrokenLines">
  <refmeta>
    <refentrytitle>SetDrawBrokenLines</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawBrokenLines</refname>
    <refpurpose>Sets whether lines should be broken at missing data</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetDrawBrokenLines(<parameter>$bl</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawBrokenLines</function> determines how to plot lines with
missing data points (that is, missing Y values). By default, PHPlot will
act as if the point does not exist, connecting the points before and after
the missing datum in the usual way. Use SetDrawBrokenLines to leave a gap
between the points before and after missing data instead.
    </para>
    <para>
This only applies to 'lines' and 'squared' plot types.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$bl</replaceable></term>
        <listitem>
          <para>
True to break the lines at missing Y data points. False to connect the
lines around missing data.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default is to ignore missing data and connect lines around missing points.
    </para>
    <para>
A missing Y value can be represented in the data array by an empty string.
(Anything non-numeric works.)
    </para>
  </refsect1>
</refentry>

<refentry id="SetDrawDashedGrid">
  <refmeta>
    <refentrytitle>SetDrawDashedGrid</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawDashedGrid</refname>
    <refpurpose>Use solid or dashed lines for the grid</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetDrawDashedGrid(<parameter>$ddg</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawDashedGrid</function> determines whether the grid
will be drawn with solid or dashed lines. The default is to used
dashed lines.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ddg</replaceable></term>
        <listitem>
          <para>
True to use dashed lines, False to use solid lines.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
</refentry>


<refentry id="SetDrawPlotAreaBackground">
  <refmeta>
    <refentrytitle>SetDrawPlotAreaBackground</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawPlotAreaBackground</refname>
    <refpurpose>Enables drawing of a plot area background color</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetDrawPlotAreaBackground(<parameter>$dpab</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawPlotAreaBackground</function> enables or disables drawing
of a solid fill color behind the plot area (the area inside the axes,
typically). By default, no plot area background color is used, which
results in the overall image background color applying to the plot area.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$dpab</replaceable></term>
        <listitem>
          <para>
If True, draw the plot area background color. If False, ignore the plot
area background color.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The actual color which will be drawn in the plot area background
is set with <xref linkend="SetPlotBgColor" />.
    </para>
    <para>
Plot area background color is ignored if a plot area background image was
set with <xref linkend="SetPlotAreaBgImage" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDrawXDataLabelLines">
  <refmeta>
    <refentrytitle>SetDrawXDataLabelLines</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawXDataLabelLines</refname>
    <refpurpose>Draw data lines</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetDrawXDataLabelLines(<parameter>$dxdl</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawXDataLabelLines</function> enables drawing of data label lines.
Data label lines are vertical lines drawn from the X data label positions
to the data points. In the usual case, with the X axis at the bottom of the
plot and the data labels just below the X axis, the data label lines would be
drawn up from the X axis to the data points. Depending on the data label
locations set with <xref linkend="SetXDataLabelPos"/>, the lines would be
drawn down or up (or both, or neither) from the data points to the bottom
or top of the plot area.
    </para>
    <para>
To use data label lines, you generally want to turn off ticks, tick labels,
and the X grid lines.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$dxdl</replaceable></term>
        <listitem>
          <para>
True to draw the data label lines, False to not draw the lines.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Data label lines only work with these plot types: lines, points, linepoints,
and thinbarline.
    </para>
    <para>
If a graph contains multiple data sets, data label lines drawn down will start
at the maximum Y value for each X value. Data label lines drawn up will
start at the minimum Y value for each X value.
    </para>
    <para>
By default, data label lines are not drawn.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDrawXGrid">
  <refmeta>
    <refentrytitle>SetDrawXGrid</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawXGrid</refname>
    <refpurpose>Whether or not to draw the X grid lines</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetDrawXGrid(<parameter>$dxg</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawXGrid</function> enables or disables the drawing of the X
grid lines. (The X grid lines are the vertical lines which intersect the
X axis and are parallel to the Y axis.)
The default is to not draw the X grid.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$dxg</replaceable></term>
        <listitem>
          <para>
True to draw the X grid lines, False to not draw the X grid lines.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
<xref linkend="SetLightGridColor" /> sets the color of the grid lines.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDrawYGrid">
  <refmeta>
    <refentrytitle>SetDrawYGrid</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawYGrid</refname>
    <refpurpose>Whether or not to draw the Y grid lines</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetDrawYGrid(<parameter>$dyg</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawYGrid</function> enables or disables the drawing of the Y
grid lines. (The Y grid lines are the horizontal lines which intersect the
Y axis and are parallel to the X axis.)
The default is to draw the Y grid.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$dyg</replaceable></term>
        <listitem>
          <para>
True to draw the Y grid lines, False to not draw the Y grid lines.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
<xref linkend="SetLightGridColor" /> sets the color of the grid lines.
    </para>
  </refsect1>
</refentry>

<refentry id="SetErrorBarColors">
  <refmeta>
    <refentrytitle>SetErrorBarColors</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetErrorBarColors</refname>
    <refpurpose>Sets the colors used for data error bars</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetErrorBarColors(<parameter>$error_bar_colors</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetErrorBarColors</function> sets the colors used for each
data set's error bars, in the same way <xref linkend="SetDataColors" />
sets the colors used for the data plot itself.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$error_bar_colors</replaceable></term>
        <listitem>
          <para>
An array of color values, one for each data set's error bars.
Or, a single color value (not an array) to use for all data set error bars.
For other possibilities, see Notes.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$error_bar_colors</parameter>, it
must use zero based sequential integer indexes. This is what the PHP manual 
calls 'the usual integer indices (starting from zero, increasing by one)'.
    </para>
    <para>
If <parameter>$error_bar_colors</parameter> is not an array, but a single color
value, then that color will be used for all data sets' error bars.
However, the array(r,g,b) notation is not allowed in
this case (because it looks like an array of 3 separate color values).
    </para>
    <para>
Two special uses of the <parameter>$error_bar_colors</parameter> argument
are available.
If the argument is an empty string, or boolean False, the color map is reset
to the defaults. This can be used to restore the default color map.
If the argument is NULL or missing from the function call, the color map is
reset to the defaults, but only if it has not already been set.
This is used internal to PHPlot for one-time initialization.
    </para>
    <para>
If SetErrorBarColors is never called, the default color map is the same as
for <xref linkend="SetDataColors"/>. It contains 16 colors, starting with
SkyBlue, green, orange, and blue.
For the full list, see <xref linkend="conc-colors-datacolors"/>.
   </para>
   <para>
If you change the data colors with <xref linkend="SetDataColors" />,
you probably want to change the error bar colors to the same array.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, the default color map contained these 8 colors:
SkyBlue, green, orange, blue, orange, red, violet, and azure1.
These were used if SetErrorBarColors was never called.
Also, through PHPlot-5.0.7, if SetErrorBarColors was called with an empty
string argument, the color map was set to just contain 'black'.
Starting with PHPlot-5.1.0, a new default color map with 16 colors was
defined. Given an empty string (or False), SetErrorBarColors now restores the
default color map.
    </para>
  </refsect1>
</refentry>

<refentry id="SetErrorBarLineWidth">
  <refmeta>
    <refentrytitle>SetErrorBarLineWidth</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetErrorBarLineWidth</refname>
    <refpurpose>Set the line width used for error bars</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetErrorBarLineWidth(<parameter>$seblw</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetErrorBarLineWidth</function> sets the line width used for
error bars. This width is used to draw the vertical lines indicating the
error range in the positive and negative direction, and also the tees
(if enabled) and the top and bottom.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$seblw</replaceable></term>
        <listitem>
          <para>
Desired width in pixels of the lines used to draw error bars.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default is to use 1 pixel wide lines.
    </para>
    <para>
This is only used with <literal>data-data-error</literal> plot data type.
    </para>
    <para>
All lines in a plot use the same error bar width.
    </para>
  </refsect1>
</refentry>

<refentry id="SetErrorBarShape">
  <refmeta>
    <refentrytitle>SetErrorBarShape</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetErrorBarShape</refname>
    <refpurpose>Select line or tee-style error bars</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetErrorBarShape(<parameter>$ebs</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetErrorBarShape</function> selects the shape used for error
indicators. Two shapes are available: 'tee' puts a short horizontal line at
the top and bottom of each error bar, and 'line' does not.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ebs</replaceable></term>
        <listitem>
          <para>
Error bar shape: either 'tee' or 'line'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default error bar shape is 'tee'.
    </para>
    <para>
This is only used with <literal>data-data-error</literal> plot data type.
    </para>
    <para>
All lines in a plot use the same error bar shape.
    </para>
  </refsect1>
</refentry>

<refentry id="SetErrorBarSize">
  <refmeta>
    <refentrytitle>SetErrorBarSize</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetErrorBarSize</refname>
    <refpurpose>Set the size of the error bar tee.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetErrorBarSize(<parameter>$ebs</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetErrorBarSize</function> sets the length of the 'tee' drawn at
the top and bottom of error bars, if the error bar shape is set to 'tee'
with <xref linkend="SetErrorBarShape" /> (or defaulted to 'tee').
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ebs</replaceable></term>
        <listitem>
          <para>
Error bar tee length in pixels.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default size is 5 pixels.
    </para>
    <para>
This is only used with <literal>data-data-error</literal> plot data type,
and with error bar shape 'tee'.
    </para>
    <para>
All lines in a plot use the same error bar size.
    </para>
  </refsect1>
</refentry>

<refentry id="SetFileFormat">
  <refmeta>
    <refentrytitle>SetFileFormat</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetFileFormat</refname>
    <refpurpose>Select the graphic image format generated by PHPlot</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetFileFormat(<parameter>$format</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetFileFormat</function> selects a graphic image format from the
available image formats. Depending on how PHP and/or GD were built on your
system, available formats include JPEG, PNG, GIF, and WBMP.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$format</replaceable></term>
        <listitem>
          <para>
What graphic image format to use: 'jpg', 'png', 'gif', or 'wbmp'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default file format is 'png'.
    </para>
    <para>
Depending on how GD was built, not all of these formats will be available.
You can use <literal>phpinfo()</literal> to see what formats are supported
by your PHP/GD installation.
    </para>
    <para>
JPEG is generally a bad choice for this type of image, as the lossy
compression reduces the quality of lines and text.
    </para>
  </refsect1>
</refentry>

<refentry id="SetFont">
  <refmeta>
    <refentrytitle>SetFont</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetFont</refname>
    <refpurpose>Select which font to use for a plot element</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetFont(<parameter>$elem</parameter>, <parameter>$font</parameter>, <optional><parameter>$size</parameter></optional>, <optional><parameter>$line_spacing</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetFont</function> selects the font and size to use for one plot
element (for example, the title). This functions works differently depending
on whether or not you are using TrueType fonts. If using TrueType fonts,
call either <xref linkend="SetDefaultTTFont" /> or <xref linkend="SetUseTTF" />
before calling SetFont.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>

      <varlistentry>
        <term><replaceable>$elem</replaceable></term>
        <listitem>
          <para>
The name of the element to change the font for. Use one of the following
strings: 'title', 'legend', 'generic', 'x_label', 'y_label', 'x_title',
or 'y_title'. (The 'generic' font is currently used for pie chart
percentage labels and error message images.)
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$font</replaceable></term>
        <listitem>
          <para>
Selects the font to use. For TrueType fonts, this is the filename
(without path, if the font file is in the default TrueType font
directory as set with <xref linkend="SetTTFPath" />, or a full
pathname) of the TrueType font file. An empty string or NULL can be
used to keep the same TrueType font and change the size.
For built-in GD fonts, this is a number between 1 and 5 which selects one
of the built-in GD fonts.  Font 1 is the smallest, and font 5 is the
largest.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$size</replaceable></term>
        <listitem>
          <para>
The font size in points for TrueType fonts. Ignored for built-in GD fonts.
If not specified, a default value of 12 is used.
See note below.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$line_spacing</replaceable></term>
        <listitem>
          <para>
Optional line spacing adjustment for this text element.
This is interpreted differently for GD and TrueType text.
See <xref linkend="SetLineSpacing"/> for details.
If not specified, the value set by <xref linkend="SetLineSpacing"/> is used.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
When using built-in GD fonts, the default fonts are shown in the following
table, where font 1 is the smallest font and font 5 is the biggest font.
      <informaltable>
        <tgroup cols="2">
          <?dbhtml table-summary="Default built-in fonts"?>
          <thead>
            <row>
              <entry>Element</entry>
              <entry>Default Built-in Font</entry>
            </row>
          </thead>
          <tbody>
            <row> <entry>generic</entry> <entry>2</entry> </row>
            <row> <entry>legend</entry>  <entry>2</entry> </row>
            <row> <entry>title</entry>   <entry>5</entry> </row>
            <row> <entry>x_label</entry> <entry>1</entry> </row>
            <row> <entry>y_label</entry> <entry>1</entry> </row>
            <row> <entry>x_title</entry> <entry>3</entry> </row>
            <row> <entry>y_title</entry> <entry>3</entry> </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
    <para>
When using TrueType fonts, the default font sizes are shown in the following
table. Use <xref linkend="SetDefaultTTFont" /> to set the default TrueType font.
      <informaltable>
        <tgroup cols="2">
          <?dbhtml table-summary="Default TrueType font sizes"?>
          <thead>
            <row>
              <entry>Element</entry>
              <entry>Default TrueType Font Size (points)</entry>
            </row>
          </thead>
          <tbody>
            <row> <entry>generic</entry> <entry>8</entry> </row>
            <row> <entry>legend</entry>  <entry>8</entry> </row>
            <row> <entry>title</entry>   <entry>14</entry> </row>
            <row> <entry>x_label</entry> <entry>6</entry> </row>
            <row> <entry>y_label</entry> <entry>6</entry> </row>
            <row> <entry>x_title</entry> <entry>10</entry> </row>
            <row> <entry>y_title</entry> <entry>10</entry> </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>

    <para>
Simultaneous use of GD and TrueType font text is allowed in the same plot.
To mix font types, use 
<xref linkend="SetFontGD"/> and <xref linkend="SetFontTTF"/> to
specify the font and font type of an element, instead of using SetFont.
    </para>

    <para>
SetFont implicitly uses the default font type.
When a PHPlot object instance is created, the default font type is GD.
Using <xref linkend="SetUseTTF"/>(True), or selecting a default font with
<xref linkend="SetDefaultTTFont"/>, sets the default font type to TrueType.
Using <xref linkend="SetUseTTF"/>(False) sets the default font type back
to GD. Either of these three operations will also reset all current text
elements to the defaults indicated above, negating any prior SetFont,
SetFontGD, or SetFontTTF calls. Note that <xref linkend="SetTTFPath"/>,
which selects the directory where TrueType fonts can be found, does not
affect the default font type nor does it change any existing font
selections.
    </para>

    <para>
Although PHP documents the TrueType font sizes as being given in points
(where there are about 72 points per inch), it doesn't know the output
device resolution, so it just assumes a fixed resolution of 72 pixels per
inch.  As a result, the TrueType font size argument actually measures the
approximate font height in pixels. For example, if you use $size=18,
the text will be about 18 pixels high in the user's browser. The actual
size seen by the user will depend on the resolution of the user's display.
On a 72 pixels per inch display, the text size will be 18 points, but at
96 pixels per inch it would only be 13.5 points.
    </para>

  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
Simultaneous use of GD and TrueType font text was added at PHPlot-5.0.6.
Through PHPlot-5.0.5, all text in a plot used GD fonts, or all text used
TrueType fonts.
    </para>

    <para>
The line_spacing parameter was added at PHPlot-5.0.6 to allow finer
control over the line spacing for different elements. Through PHPlot-5.0.5,
the same line spacing was used for all text elements.
    </para>

    <para>
The described behavior for finding TrueType font files (first using the
name as given, then looking in the SetTTFPath font directory) was
implemented in PHPlot-5.0rc3.
    </para>
  </refsect1>

</refentry>

<refentry id="SetFontGD">
  <refmeta>
    <refentrytitle>SetFontGD</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetFontGD</refname>
    <refpurpose>Select a GD font to use for a plot element</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetFontGD(<parameter>$elem</parameter>, <parameter>$font</parameter>, <optional><parameter>$line_spacing</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetFontGD</function> selects a GD font to use for one plot
element (for example, the title).
This function supplements <xref linkend="SetFont"/>, which selects a GD or TTF
font depending on the currently selected font type. SetFontGD always selects
a GD font, even if TrueType fonts are in use.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>

      <varlistentry>
        <term><replaceable>$elem</replaceable></term>
        <listitem>
          <para>
The name of the element to change the font for. Use one of the following
strings: 'title', 'legend', 'generic', 'x_label', 'y_label', 'x_title',
or 'y_title'. (The 'generic' font is currently used for pie chart
percentage labels and error message images.)
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$font</replaceable></term>
        <listitem>
          <para>
Selects the GD font to use.  This is a number between 1 and 5 which selects
one of the built-in GD fonts.
Font 1 is the smallest, and font 5 is the largest.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$line_spacing</replaceable></term>
        <listitem>
          <para>
Optional line spacing adjustment for this text element.
For GD fonts, this is the number of pixels between lines.
If not specified, the value set by <xref linkend="SetLineSpacing"/> is used.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="SetFont"/> for more information about fonts.
See <xref linkend="SetLineSpacing"/> for more information about line spacing.
    </para>

    <para>
Use <xref linkend="SetUseTTF"/>
(or <xref linkend="SetDefaultTTFont"/>, which calls it) to set the default
font type.
Use <xref linkend="SetFont" /> to specify the font to use for an element
using the default font type.
Use SetFontGD and <xref linkend="SetFontTTF"/> to
specify the font of an element using the specific type of font.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added at PHPlot-5.0.6, along with <xref
linkend="SetFontTTF"/>, to allow mixing GD and TrueType fonts
in the same graph.
    </para>
  </refsect1>
</refentry>

<refentry id="SetFontTTF">
  <refmeta>
    <refentrytitle>SetFontTTF</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetFontTTF</refname>
    <refpurpose>Select a TrueType font to use for a plot element</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetFontTTF(<parameter>$elem</parameter>, <parameter>$font</parameter>, <optional><parameter>$size</parameter></optional>, <optional><parameter>$line_spacing</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetFontTTF</function> selects a TrueType font and size to use for one
plot element (for example, the title).
This function supplements <xref linkend="SetFont"/>, which selects a GD or TTF
font depending on the currently selected font type. SetFontTTF always selects
a TrueType font, even if TrueType fonts are not the default font type.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>

      <varlistentry>
        <term><replaceable>$elem</replaceable></term>
        <listitem>
          <para>
The name of the element to change the font for. Use one of the following
strings: 'title', 'legend', 'generic', 'x_label', 'y_label', 'x_title',
or 'y_title'. (The 'generic' font is currently used for pie chart
percentage labels and error message images.)
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$font</replaceable></term>
        <listitem>
          <para>
Selects the TrueType font to use. This is the filename
(without path, if the font file is in the default TrueType font
directory as set with <xref linkend="SetTTFPath" />, or a full
pathname) of the TrueType font file. An empty string or NULL can be
specified to use the default TrueType font (but see notes below).
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$size</replaceable></term>
        <listitem>
          <para>
The TrueType font size in points.
If not specified, a default value of 12 is used.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$line_spacing</replaceable></term>
        <listitem>
          <para>
Optional line spacing adjustment for this text element.
For TrueType text, this is an adjustment factor for the built-in font
spacing.
See <xref linkend="SetLineSpacing"/> for details.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="SetFont"/> for more information about fonts.
See <xref linkend="SetLineSpacing"/> for more information about line spacing.
    </para>

    <para>
Use <xref linkend="SetUseTTF"/>
(or <xref linkend="SetDefaultTTFont"/>, which calls it) to set the default
font type.
Use <xref linkend="SetFont" /> to specify the font to use for an element
using the default font type.
Use <xref linkend="SetFontGD"/> and SetFontTTF to
specify the font of an element using the specific type of font.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added at PHPlot-5.0.6, along with <xref
linkend="SetFontGD"/>, to allow mixing GD and TrueType fonts
in the same graph.
    </para>
  </refsect1>
</refentry>

<refentry id="SetGridColor">
  <refmeta>
    <refentrytitle>SetGridColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetGridColor</refname>
    <refpurpose>Set the color used for the axes and borders</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetGridColor(<parameter>$color</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetGridColor</function> sets the color used for the X and Y
axes, the plot border, the legend border, and pie chart percentage labels
(but not the grid).
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default color is black.
    </para>
    <para>
This doesn't actually set the color used by the grid; for that see
<xref linkend="SetLightGridColor" />. We have no idea why this is so.
    </para>
    <para>
For pie charts drawn with no shading, this also sets the color of the pie
slice borders.
    </para>
  </refsect1>
</refentry>

<refentry id="SetImageBorderColor">
  <refmeta>
    <refentrytitle>SetImageBorderColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetImageBorderColor</refname>
    <refpurpose>Set image border color, if enabled</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetImageBorderColor(<parameter>$color</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetImageBorderColor</function> sets the color to use for a
border around the entire image.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The image border is only drawn if <xref linkend="SetImageBorderType" /> is
called with a type of 'plain' or 'raised'; by default there is no border.
If the border is enabled but no color is set, the default color is
gray (194,194,194).
    </para>
  </refsect1>
</refentry>

<refentry id="SetImageBorderType">
  <refmeta>
    <refentrytitle>SetImageBorderType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetImageBorderType</refname>
    <refpurpose>Draw a border around the image</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetImageBorderType(<parameter>$sibt</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetImageBorderType</function> controls the drawing of a border
around the entire image. By default, no border is drawn.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$sibt</replaceable></term>
        <listitem>
          <para>
A string indicating the desired border type: 'raised', 'plain', or 'none'.
A plain border is 1 pixel wide. A raised border is 2 pixels wide, with the
bottom and left sides drawn in a darker color.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The color of the image border is set with <xref linkend="SetImageBorderColor" />.
By default, no image border is drawn.
    </para>
    <para>
It can be useful to have a border drawn around images when embedded in an
HTML page. An alternative to this function is to use the BORDER attribute
in the IMG tag when embedding the image. With that attribute, you can also
control the border width.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Use of 'none' to turn the border off was added in PHPlot-5.1.0.
    </para>
  </refsect1>
</refentry>

<refentry id="SetIsInline">
  <refmeta>
    <refentrytitle>SetIsInline</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetIsInline</refname>
    <refpurpose>Set the output image to be <quote>inline</quote> - without HTTP headers</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetIsInline(<parameter>$is_inline</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetIsInline</function> determines if HTTP headers are sent along
with the output image or not. By default, HTTP headers are sent,
identifying the image type for browsers. If PHPlot output is not being
directed to a browser, or in other special-purpose applications, you can
turn off the HTTP content type header using this function.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$is_inline</replaceable></term>
        <listitem>
          <para>
True to suppress HTTP content type headers, False to include the headers.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default is to include the headers. However, the PHP CLI (command line
interface) never outputs headers, so using this function is not necessary
if you are using the PHP CLI to create image files by redirecting standard
output to a file.
    </para>
    <para>
You must call SetIsInline(True) if you are sending PHPlot output to a file
with <xref linkend="SetOutputFile" />, or by supplying a filename argument to
the <xref linkend="PHPlot" /> constructor.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLabelColor">
  <refmeta>
    <refentrytitle>SetLabelColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLabelColor</refname>
    <refpurpose>Do not use</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetLabelColor(<parameter>$color</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLabelColor</function> should not be used.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color to use.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This function should not be used. It duplicates <xref linkend="SetTitleColor" />.
Data labels currently use the color set with <xref linkend="SetTextColor" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLabelScalePosition">
  <refmeta>
    <refentrytitle>SetLabelScalePosition</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLabelScalePosition</refname>
    <refpurpose>Position pie-chart percentage labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetLabelScalePosition(<parameter>$blp</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLabelScalePosition</function> adjusts the position of the pie
chart data labels which show the percentage values of the slices.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$blp</replaceable></term>
        <listitem>
          <para>
Position factor for pie chart labels. This is a floating point number
between 0 and 1.0. The initial value is 0.5, which places the labels
outside the circumference of the pie.
Smaller values move the labels in to the center,
and larger values move them out from the center.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This affects pie charts only. The maximum value is 1.0 but as that value is
approached the labels will move off the page. The minimum value is 0 which
makes the labels pile up in the center of the pie.
    </para>
    <para>
The labels always display percentages. If you want to display numeric data
for each slice, try putting it in the legend with <xref linkend="SetLegend" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegend">
  <refmeta>
    <refentrytitle>SetLegend</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegend</refname>
    <refpurpose>Add text to a legend box</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetLegend(<parameter>$leg</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegend</function> sets the text to be displayed in the legend.
A legend is usually needed when a graph contains multiple plots (that is,
more than one data set), to identify the purpose of the different data sets
plotted.  The legend text consists of multiple lines, with each line
identifying one plot (one data set) on the graph. PHPlot adds an
identifying color box next to each line in the legend.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$leg</replaceable></term>
        <listitem>
          <para>
An array with each element containing the text for one line of the legend.
Or, if not an array, the one line to be appended to the legend. See notes.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The legend text needs to contain one line of text for each data set plotted
on the graph, in the same order as the data array.
You can supply all the legend lines in a single call to SetLegend as an
array, or you can build up the legend one line at a time with multiple
calls to SetLegend, supplying one line per call (in the same order as
the data sets in the data array).
    </para>
    <para>
By default, no legend is displayed.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegendPixels">
  <refmeta>
    <refentrytitle>SetLegendPixels</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegendPixels</refname>
    <refpurpose>Position the legend on the image (device coordinates)</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetLegendPixels(<parameter>$x</parameter>, <parameter>$y</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegendPixels</function> lets you position the legend on the
image, using device coordinates, rather than letting PHPlot position it for you.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$x</replaceable></term>
        <term><replaceable>$y</replaceable></term>
        <listitem>
          <para>
Absolute device coordinates of the upper left corner of the legend box.
The units are pixels and the origin is in the upper left corner of the image.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See also <xref linkend="SetLegendWorld" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegendStyle">
  <refmeta>
    <refentrytitle>SetLegendStyle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegendStyle</refname>
    <refpurpose>Control the appearance of the legend</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetLegendStyle(<parameter>$text_align</parameter>, <optional><parameter>$colorbox_align</parameter></optional>, <optional><parameter>$style</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegendStyle</function> controls the appearance of the legend,
which is drawn if <xref linkend="SetLegend" /> is used.  The legend
contains of a series of text strings and color boxes, identifying the plot
lines. SetLegendStyle sets the alignment of the text strings and color
boxes. The color boxes are aligned within the legend box, left or right,
and then the text strings are aligned within the remaining space, left or
right. SetLegendStyle can also turn off the color boxes.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$text_align</replaceable></term>
        <listitem>
          <para>
A string indicating the alignment of the text strings: 'left' or 'right'.
If 'left', the text strings are left-aligned between the legend box edge
and the color boxes. If 'right', the text strings are right-aligned between
the legend box edge and the color boxes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$colorbox_align</replaceable></term>
        <listitem>
          <para>
Optional string indicating the alignment of the color boxes: 'left', 'right',
or 'none'.
If 'left', the color boxes are drawn along the left side of the legend box.
If 'right', the color boxes are drawn along the right side of the legend box.
If 'none', no color boxes are drawn.
If this parameter is omitted, the same alignment as $text_align is used.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$style</replaceable></term>
        <listitem>
          <para>
Optional parameter, reserved for future use, and currently ignored.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, the color boxes are lined up along the right side of the legend
box, and the text strings are right-aligned just left of the color boxes.
The following figure shows the four possible alignment choices.
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/legendstyle.png" format="PNG" />
          </imageobject>
          <textobject>
            <phrase>Four possible text/color-box alignment choices</phrase>
          </textobject>
        </mediaobject>
      </informalfigure>
    </para>
    <para>
Using 'none' for $colorbox_align results in a legend with only text lines.
This is not recommended for multi-line or multi-dataset plots, unless you
have provided some other way to indicate which legend text line goes with
which plot, or if you are using the legend for some purpose other than
identifying the plot lines.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added to PHPlot-5.0.4.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegendWorld">
  <refmeta>
    <refentrytitle>SetLegendWorld</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegendWorld</refname>
    <refpurpose>Position the legend on the image (world coordinates)</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetLegendWorld(<parameter>$x</parameter>, <parameter>$y</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegendWorld</function> lets you position the legend on the
image, using world coordinates, rather than letting PHPlot position it for you.
(World coordinates are the coordinate space of your data points.)
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$x</replaceable></term>
        <term><replaceable>$y</replaceable></term>
        <listitem>
          <para>
World coordinates of the upper left corner of the legend box.
The units and origin are the same as the data you are plotting.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See also <xref linkend="SetLegendPixels" />.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0rc3, it was required that the
data array, axis types, and any other setting which affects the scale of
the data be set up before this function is used.
Starting at PHPlot-5.0.4 this is no longer required, as the coordinates
you supply are not scaled until the plot is drawn.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLightGridColor">
  <refmeta>
    <refentrytitle>SetLightGridColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLightGridColor</refname>
    <refpurpose>Set the color for grid lines and X data label lines</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetLightGridColor(<parameter>$color</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLightGridColor</function> sets the color used for the X and Y
grid lines.
This color is also used for X Data Lines, if enabled with
<xref linkend="SetDrawXDataLabelLines"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This function, not <xref linkend="SetGridColor" />, sets the color for the
grid lines.
The default color is gray.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLineSpacing">
  <refmeta>
    <refentrytitle>SetLineSpacing</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLineSpacing</refname>
    <refpurpose>Set spacing between lines of multi-line text elements</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetLineSpacing(<parameter>$spc</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLineSpacing</function> sets the default spacing between lines
of a multi-line text element. Multiple lines can be specified in titles,
for example, by placing a newline between lines (for example: "Line 1\nLine
2"). Line spacing also affects the legend.
You can override the default line spacing for individual text elements
(such as the X title) using <xref linkend="SetFont"/>,
<xref linkend="SetFontGD"/>, and <xref linkend="SetFontTTF"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$spc</replaceable></term>
        <listitem>
          <para>
Desired default line spacing factor.
For the built-in GD fonts, this is the number of pixels between lines.
For TrueType fonts, this is an adjustment factor for the font's built-in
line spacing (see notes).
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default line spacing value is 4. For GD fonts, this is the number of
pixels between text lines, and is independent of the font size.
    </para>
    <para>
TrueType fonts have a built-in line spacing amount, which is the distance
between the baseline of one text line and the top of the next text line.
With TrueType text, PHPlot uses the line spacing value (set with SetLineSpacing
or one of the SetFont functions) as an adjustment factor for this built-in
line spacing. A value of 4 produces the built-in line spacing, lower values
reduce the spacing and larger values increase the spacing. A value of 0 for
line spacing would result in the baseline of one line nearly touching the
top of the next line.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
The interpretation of the line spacing as an adjustment factor for TrueType
text, rather than a value in pixels, began with PHPlot-5.0.6. This is also
when the line spacing could be adjusted for each text element.
    </para>
    <para>
At PHPlot-5.0.5, line spacing was the number of pixels between lines of text,
for both GD or TrueType fonts.
Before PHPlot-5.0.5, line spacing did not affect TrueType font text at all,
except in the legend.
    </para>
    <para>
Before PHPlot-5.0.5, the line spacing had to be set before setting titles,
because the title height was calculated when setting the title. This
restriction was removed in PHPlot-5.0.5, so line spacing and titles can be
set in either order.
    </para>

  </refsect1>
</refentry>

<refentry id="SetLineStyles">
  <refmeta>
    <refentrytitle>SetLineStyles</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLineStyles</refname>
    <refpurpose>Set the line style (solid or dashed) for each data set</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetLineStyles(<parameter>$ls</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLineStyles</function> selects the line style for each plotted
data set.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ls</replaceable></term>
        <listitem>
          <para>
An array of strings, each either 'solid', for solid lines; 'dashed', for
dashed lines, or 'none', to suppress the lines (see notes).
Or, a single value of 'solid' or 'dashed' to apply to all data sets.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$ls</parameter>, it
must use zero based sequential integer indexes. This is what the PHP manual 
calls 'the usual integer indices (starting from zero, increasing by one)'.
    </para>
    <para>
The line style for dashed lines can be set with
<xref linkend="SetDefaultDashedStyle" />.
    </para>
    <para>
By default, the line styles are 'solid', 'solid', and 'dashed'.
(As with all style arrays, PHPlot duplicates the array as needed for the
number of data sets to be plotted.)
This means the 3rd and 6th data sets will plot as dashed lines unless you
use SetLineStyles to change it.
    </para>
    <para>
A line style can be set to 'none' to suppress the line for that data set.
This is only useful with 'linepoints' plot types, and results in a 'points'
plot type for that data set: markers only, but no lines.
(This is available with PHPlot-5.0rc3 and higher.)
    </para>
  </refsect1>
</refentry>

<refentry id="SetLineWidths">
  <refmeta>
    <refentrytitle>SetLineWidths</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLineWidths</refname>
    <refpurpose>Set line width (thickness) for each data set</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetLineWidths(<parameter>$lw</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLineWidths</function> sets the desired line width to be used
when plotting each data set.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$lw</replaceable></term>
        <listitem>
          <para>
An array of line widths in pixels, one for each data set to be plotted.
Or, a single value to be used for all data sets.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$lw</parameter>, it
must use zero based sequential integer indexes. This is what the PHP manual 
calls 'the usual integer indices (starting from zero, increasing by one)'.
    </para>
    <para>
By default, all data set plot lines are 1 pixel wide.
    </para>
  </refsect1>
</refentry>

<refentry id="SetMarginsPixels">
  <refmeta>
    <refentrytitle>SetMarginsPixels</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetMarginsPixels</refname>
    <refpurpose>Set margins around the plot area</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetMarginsPixels(<optional><parameter>$lm</parameter></optional>, <optional><parameter>$rm</parameter></optional>, <optional><parameter>$tm</parameter></optional>, <optional><parameter>$bm</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetMarginsPixels</function> sets the size of the margins around
the plot area.  By default, the margin sizes are automatically calculated
based on the space needed.  Use SetMarginsPixels to override these
automatic calculations and set specific margin sizes.  The four margins are
specified independently and in pixels.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$lm</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the left margin, in pixels.
If omitted or NULL, the value is automatically calculated.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$rm</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the right margin, in pixels.
If omitted or NULL, the value is automatically calculated.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$tm</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the top margin, in pixels.
If omitted or NULL, the value is automatically calculated.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$bm</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the bottom margin, in pixels.
If omitted or NULL, the value is automatically calculated.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, the margin sizes are automatically calculated based on the
space needed (for the axis labels, tick labels, and tick marks).
Use SetMarginsPixels to override these automatic calculations and
control the margins.
    </para>
    <para>
The upper left corner of the plot area is at device coordinates
(Left_Margin, Top_Margin).
The lower right corner of the plot area is at device coordinates
(Image_Width - Right_Margin, Image_Height - Bottom_Margin).
    </para>
    <para>
SetMarginsPixels and <xref linkend="SetPlotAreaPixels"/> perform the same
function with different semantics. It makes no sense to use both - only the
last one called will have an effect.
    </para>
    <para>
Trailing defaulted arguments can be omitted, but non-trailing defaulted
arguments must be specified as NULL. For example, to set the right margin
to 100 pixels, and let PHPlot calculate the other three margins, use:
      <programlisting><![CDATA[
$plot->SetMarginsPixels(NULL, 100);
]]></programlisting>
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.6, SetMarginsPixels required all 4 arguments be
specified and not be NULL. Starting with PHPlot-5.0.7, each margin can
either be specified or automatically calculated.
    </para>
  </refsect1>
</refentry>

<refentry id="SetNumberFormat">
  <refmeta>
    <refentrytitle>SetNumberFormat</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetNumberFormat</refname>
    <refpurpose>Set the separators used when formatting number labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetNumberFormat(<parameter>$decimal_point</parameter>, <parameter>$thousands_sep</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetNumberFormat</function> sets the separator characters used when
formatting number labels. Labels are formatted as numbers when the 'data'
format type is selected with
<xref linkend="SetXLabelType" /> or <xref linkend="SetYLabelType" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$decimal_point</replaceable></term>
        <listitem>
          <para>
The character used as a decimal point, to separate the integer part of the
label from the fraction part.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$thousands_sep</replaceable></term>
        <listitem>
          <para>
The character used as a thousands grouping separator (placed between every
group of 3 digits left of the decimal point).
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
These separators are only used for labels when 'data' mode formatting is
selected with
<xref linkend="SetXLabelType" /> or <xref linkend="SetYLabelType" />.
    </para>
    <para>
If <function>SetNumberFormat</function> is not used, PHPlot attempts to get
the proper separator characters from your system locale. If this works and
your locale is set correctly, you will probably not need to use this function.
If locale information is not available, the default for decimal_point is
a period, and the default for thousands_sep is a comma.
    </para>
    <para>
If your system locale is set to "C" or "POSIX", you might find that there
are no thousands separators in your formatted labels. This is the correct
behavior for those locales. If you cannot select a more specific locale,
use <function>SetNumberFormat</function> to set the correct separators.
    </para>
    <para>
To set the number of decimal places, use
<xref linkend="SetPrecisionX" /> and <xref linkend="SetPrecisionY" />.
    </para>
    <para>
If you are trying to force a specific locale with setlocale(), it will not
work, because PHPlot uses setlocale(LC_ALL, '') to import locale
information from the system, and this overrides a forced locale from your
script. On non-Windows platforms, you can force a locale using environment
variables, but this does not work on Windows. To address this,
PHPlot has (see the History section below) a special member variable
<parameter>locale_override</parameter> that prevents PHPlot from importing
locale settings from the system. For example, if the following code is used,
numeric formatting will use the fr_CA locale settings, regardless of
the system locale.
      <programlisting><![CDATA[
   setlocale(LC_ALL, 'fr_CA');  # On Windows use: 'French_Canada'
   $plot = new PHPlot(800, 600);
   $plot->locale_override = True;
]]></programlisting>
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
The <parameter>locale_override</parameter> hook was added in PHPlot-5.1.0.
Before that, there was no way to force a specific locale on Windows, and on
other platforms a locale could be forced only by using environment variables.
The hook was added primarily for testing on Windows, but could be needed in
other situations too.
    </para>
    <para>
This function was added to PHPlot-5.0.4. Versions up to and including 5.0rc3
always used a period for decimal point, and comma for thousands separator.
    </para>
  </refsect1>
</refentry>

<refentry id="SetNumXTicks">
  <refmeta>
    <refentrytitle>SetNumXTicks</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetNumXTicks</refname>
    <refpurpose>Set the number of X tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetNumXTicks(<parameter>$nt</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetNumXTicks</function> sets the exact number of tick marks to
draw on the X axis.
You can use either this function or <xref linkend="SetXTickIncrement" />
(but not both) to control the tick mark spacing.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$nt</replaceable></term>
        <listitem>
          <para>
Integer number of tick marks to draw.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If neither <function>SetNumXTicks</function> nor 
<xref linkend="SetXTickIncrement" /> is used, the tick mark interval
is calculated as 1/10th of the X data range.
    </para>
  </refsect1>
</refentry>

<refentry id="SetNumYTicks">
  <refmeta>
    <refentrytitle>SetNumYTicks</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetNumYTicks</refname>
    <refpurpose>Set the number of Y tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetNumYTicks(<parameter>$nt</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetNumYTicks</function> sets the exact number of tick marks to
draw on the Y axis.
You can use either this function or <xref linkend="SetYTickIncrement" />
(but not both) to control the tick mark spacing.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$nt</replaceable></term>
        <listitem>
          <para>
Integer number of tick marks to draw.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If neither <function>SetNumYTicks</function> nor 
<xref linkend="SetYTickIncrement" /> is used, the tick mark interval
is calculated as 1/10th of the Y data range.
    </para>
  </refsect1>
</refentry>

<refentry id="SetOutputFile">
  <refmeta>
    <refentrytitle>SetOutputFile</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetOutputFile</refname>
    <refpurpose>Redirect PHPlot output to a file</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetOutputFile(<parameter>$output_file</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetOutputFile</function> arranges for image output to be sent to
a file instead of to the browser (or standard output). By default, output
is sent to the browser (or standard output, if running from the command
line).
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$output_file</replaceable></term>
        <listitem>
          <para>
Pathname of the file to write the image data into.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The output file will only be produced if <xref linkend="SetIsInline" />(True) is
called.
    </para>
    <para>
By default, there is no output file, and the image is written to the browser
or standard output.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPlotAreaBgImage">
  <refmeta>
    <refentrytitle>SetPlotAreaBgImage</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPlotAreaBgImage</refname>
    <refpurpose>Set a graphic file to be used in the plot area background</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetPlotAreaBgImage(<parameter>$input_file</parameter>, <optional><parameter>$mode</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPlotAreaBgImage</function> sets an image file to be used as
the plot area background. The image can be scaled or tiled to fit.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$input_file</replaceable></term>
        <listitem>
          <para>
Path to the file to be used. The file can be any type allowed by GD, which
usually includes JPEG, GIF, and PNG.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$mode</replaceable></term>
        <listitem>
          <para>
Optional display mode for the background image: one of the strings
'centeredtile', 'tile', or 'scale'. The default is 'tile'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If a background image has been set, background color (set with
<xref linkend="SetPlotBgColor" />) is ignored.
    </para>
    <para>
Scale mode scales the supplied background image file to fit the plot area.
Tile and centeredtile modes repeat the supplied background image file as
needed to fit the plot area.  The difference is that centeredtile offsets the
start position within the background image by half its size, which works
better for some images.
    </para>
    <para>
SetPlotAreaBgImage sets a background for the plot area, while
<xref linkend="SetBgImage" /> sets a background for the entire image area.
If both are used, the plot area background overlays that portion
of the overall background.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPlotAreaPixels">
  <refmeta>
    <refentrytitle>SetPlotAreaPixels</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPlotAreaPixels</refname>
    <refpurpose>Set the limits for the plot area in device coordinates</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetPlotAreaPixels(<optional><parameter>$x1</parameter></optional>, <optional><parameter>$y1</parameter></optional>, <optional><parameter>$x2</parameter></optional>, <optional><parameter>$y2</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPlotAreaPixels</function> sets the area to be used for the plot
within the image, in device coordinates.
(Device coordinates are GD coordinates, with the origin at the top left
of the image, X values increase to the right, Y values increase down,
and the units in pixels.)
The plot area is equal to the image area minus the margins. By default, the
margins (and therefore the plot area) are automatically calculated based on
the space needed for titles, labels, etc.
Use SetPlotAreaPixels to override these automatic calculations and
control the plot area.
The four coordinate values are specified independently.
SetPlotAreaPixels and <xref linkend="SetMarginsPixels"/> perform the same
function with different semantics.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$x1</replaceable></term>
        <term><replaceable>$y1</replaceable></term>
        <listitem>
          <para>
Device coordinates of the top left corner of the area to use for the plot.
Each value is optional, and if omitted or NULL the automatically calculated
value is used.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$x2</replaceable></term>
        <term><replaceable>$y2</replaceable></term>
        <listitem>
          <para>
Device coordinates of the bottom right corner of the area to use for the plot.
Each value is optional, and if omitted or NULL the automatically calculated
value is used.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The plot area is equal to the image area minus the margins. By default, the
margins (and therefore the plot area) are automatically calculated based on
the space needed (for the axis labels, tick labels, and tick marks).
Use SetPlotAreaPixels to override these automatic calculations and
control the plot area.
    </para>
    <para>
SetPlotAreaPixels and <xref linkend="SetMarginsPixels"/> perform the same
function with different semantics. It makes no sense to use both - only the
last one called will have an effect.
    </para>
    <para>
One possible use for SetPlotAreaPixels is to place multiple plots on an image.
See <xref linkend="example-twoplot1" /> for an example of multiple plots.
SetPlotAreaPixels is used there to limit the plot area to only use part of
the image for each plot.
    </para>
    <para>
Trailing defaulted arguments can be omitted, but non-trailing defaulted
arguments must be specified as NULL. For example, to fix the bottom right
corner of the plot area at (600, 400) and let PHPlot calculate the upper
left corner use:
      <programlisting><![CDATA[
$plot->SetPlotAreaPixels(NULL, NULL, 600, 400);
]]></programlisting>
You do not have to specify both X and Y. The following example sets the right
edge of the plot area at X=600 and lets the other 3 edges be automatically
calculated:
      <programlisting><![CDATA[
$plot->SetPlotAreaPixels(NULL, NULL, 600);
]]></programlisting>
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.6, SetPlotAreaPixels required all 4 arguments be
specified and not be NULL. Starting with PHPlot-5.0.7, each X and Y
parameter can either be specified or automatically calculated.
    </para>
    <para>
SetPlotAreaPixels and SetPlotAreaWorld can be called in either order.
Through PHPlot-5.0.4 this was because SetPlotAreaPixels would
reset the scale factors if <xref linkend="SetPlotAreaWorld" /> was already
called.
Starting with PHPlot-5.0.5, both functions just store the information,
and no calculations take place until <xref linkend="DrawGraph" /> is used.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPlotAreaWorld">
  <refmeta>
    <refentrytitle>SetPlotAreaWorld</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPlotAreaWorld</refname>
    <refpurpose>Override automatic data scaling to device coordinates</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetPlotAreaWorld(<optional><parameter>$xmin</parameter></optional>, <optional><parameter>$ymin</parameter></optional>, <optional><parameter>$xmax</parameter></optional>, <optional><parameter>$ymax</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPlotAreaWorld</function> changes the range for World Coordinate
space. This is the coordinate space of the data to be plotted, and is
translated and scaled to fit into the Device Coordinate space of the image.
By default, PHPlot defines the world coordinate space by the actual limits
of the data to be plotted. By using SetPlotAreaWorld, you can override one or
more of these calculated limits. Each parameter you specify overrides
the corresponding calculated limit. Each defaulted or NULL parameter is
ignored and the calculated limit is used.
    </para>
    <para>
Since tick marks are automatically positioned based on the world coordinate
limits, SetPlotAreaWorld is also used to force a specific range for tick marks.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xmin</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the desired X data range minimum value.
If omitted or NULL, the value is calculated from the actual plot data.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$ymin</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the desired Y data range minimum value.
If omitted or NULL, the value is calculated from the actual plot data.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$xmax</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the desired X data range maximum value.
If omitted or NULL, the value is calculated from the actual plot data.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$ymax</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the desired Y data range maximum value.
If omitted or NULL, the value is calculated from the actual plot data.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Trailing defaulted arguments can be omitted, but non-trailing defaulted
arguments must be specified as NULL. For example, to set the minimum X
value to 10, the maximum X value to 100, and default the Y scaling, you can
use:
      <programlisting><![CDATA[
$plot->SetPlotAreaWorld(10, NULL, 100);
]]></programlisting>
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
SetPlotAreaPixels and SetPlotAreaWorld can be called in either order.
Through PHPlot-5.0.4 this was because SetPlotAreaWorld would
reset the scale factors if <xref linkend="SetPlotAreaPixels" /> was already
called.
Starting with PHPlot-5.0.5, both functions just store the information,
and no calculations take place until <xref linkend="DrawGraph" /> is used.
    </para>
    <para>
Through PHPlot-5.0.4, SetPlotAreaWorld needed to access and interpret the data
array, so it had to be called after <xref linkend="SetDataValues" /> sets the
data array, and after <xref linkend="SetDataType" /> (if used).
Starting with PHPlot-5.0.5, this restriction no longer applies and the
functions can be called in any order.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPlotBgColor">
  <refmeta>
    <refentrytitle>SetPlotBgColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPlotBgColor</refname>
    <refpurpose>Set plot area background color</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetPlotBgColor(<parameter>$color</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPlotBgColor</function> sets the background color of the
plot area of the image (the area inside the margins, title, and usually the
axes).
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Background color is disabled by default. If you want a background color
for the plot area, you must enabled it with
<xref linkend="SetDrawPlotAreaBackground" />.
    </para>
    <para>
Background image takes priority over background color.
If a background image was set
with <xref linkend="SetPlotAreaBgImage" />,
then no background color will be drawn, even if it was enabled.
    </para>
    <para>
The default background color for the plot area is white (if enabled as noted
above). If background color for the plot area is not enabled, the overall
background color (or image) will be seen in the plot area.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPlotBorderType">
  <refmeta>
    <refentrytitle>SetPlotBorderType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPlotBorderType</refname>
    <refpurpose>Control how much of a border is drawn around the plot</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetPlotBorderType(<parameter>$pbt</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPlotBorderType</function> controls how much of a border is
drawn around the plot. By default, left and right side borders are drawn.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$bt</replaceable></term>
        <listitem>
          <para>
A string indicating where to draw the plot borders:
            <informaltable>
              <tgroup cols="2">
                <?dbhtml table-summary="Border position values"?>
                <thead>
                  <row>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>left</entry>
                    <entry>Border on left side of plot only</entry>
                  </row>
                  <row>
                    <entry>sides</entry>
                    <entry>Border on left and right sides of plot</entry>
                  </row>
                  <row>
                    <entry>full</entry>
                    <entry>Border on all four sides of the plot</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No plot area border</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Plot border color is set by <xref linkend="SetGridColor" /> (this color
also applies to the axes and other elements).
The default color is black.
    </para>
    <para>
Usually, the X axis is at the bottom of the plot where there bottom edge of
the border would go. The Y axis is (apparently) always on the left where
the left border would go. So typically this function only controls the top
and right border.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPlotType">
  <refmeta>
    <refentrytitle>SetPlotType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPlotType</refname>
    <refpurpose>Select the type of plot - how the data will be graphed</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetPlotType(<parameter>$pt</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPlotType</function> selects a type of plot from among the plot
types supported by PHPlot. This includes bar charts, line plots, point
plots, and others. A complete description of the type of plots available
can be found in <xref linkend="conc-plottypes" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$pt</replaceable></term>
        <listitem>
          <para>
A string indicating the type of plot. The following types are available:
            <itemizedlist spacing="compact">
              <listitem><para>area</para></listitem>
              <listitem><para>bars</para></listitem>
              <listitem><para>linepoints</para></listitem>
              <listitem><para>lines</para></listitem>
              <listitem><para>pie</para></listitem>
              <listitem><para>points</para></listitem>
              <listitem><para>squared</para></listitem>
              <listitem><para>stackedarea</para></listitem>
              <listitem><para>stackedbars</para></listitem>
              <listitem><para>thinbarline</para></listitem>
            </itemizedlist>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  <refsect1>
    <title>Notes</title>
    <para>
The default plot type is 'linepoints'.
     </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Plot type 'stackedarea' was added after PHPlot-5.1.0.
     </para>
  </refsect1>
</refentry>

<refentry id="SetPointShapes">
  <refmeta>
    <refentrytitle>SetPointShapes</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPointShapes</refname>
    <refpurpose>Select a point shape for each data set</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetPointShapes(<parameter>$pt</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPointShapes</function> assigns a point shape to each data set
in a plot.
'Point' here refers to the marker drawn at each data point in 'points' and
'linepoints' type plots.
For example, if each data row contains 4 Y values, the first
point shape will be used for the first Y value, the second point shape for
the second Y value, etc. There are 20 point shapes to chose from.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$pt</replaceable></term>
        <listitem>
          <para>
An array of point shape names, or a string naming a single point shape.
If a string, that shape name is used for all data sets.
If an array, the array values name the point shapes for each subsequent
data set in a plot.
The following shapes are available:
            <informaltable>
              <tgroup cols="2">
                <?dbhtml table-summary="Available shape names"?>
                <thead>
                  <row>
                    <entry>Shape Name</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>bowtie</entry>
                    <entry>Two filled triangles pointing right and left towards the point.</entry>
                  </row>
                  <row>
                    <entry>box</entry>
                    <entry>A square outline centered on the point.</entry>
                  </row>
                  <row>
                    <entry>circle</entry>
                    <entry>A hollow circle centered on the point.</entry>
                  </row>
                  <row>
                    <entry>cross</entry>
                    <entry>An X centered on the point.</entry>
                  </row>
                  <row>
                    <entry>delta</entry>
                    <entry>A filled triangle pointing up, centered on the point.</entry>
                  </row>
                  <row>
                    <entry>diamond</entry>
                    <entry>A filled diamond (square rotated 45 degrees), centered on the point.</entry>
                  </row>
                  <row>
                    <entry>dot</entry>
                    <entry>A filled circle centered on the point.</entry>
                  </row>
                  <row>
                    <entry>down</entry>
                    <entry>An unfilled triangle pointing down, centered on the point.</entry>
                  </row>
                  <row>
                    <entry>halfline</entry>
                    <entry>A short line from the point going left.</entry>
                  </row>
                  <row>
                    <entry>home</entry>
                    <entry>A filled 5-sided shape, centered on the point.</entry>
                  </row>
                  <row>
                    <entry>hourglass</entry>
                    <entry>Two filled triangles pointing up and down towards the point.</entry>
                  </row>
                  <row>
                    <entry>line</entry>
                    <entry>A horizontal line centered on the point.</entry>
                  </row>
                  <row>
                    <entry>plus</entry>
                    <entry>A plus sign centered on the point.</entry>
                  </row>
                  <row>
                    <entry>rect</entry>
                    <entry>A filled square centered on the point.</entry>
                  </row>
                  <row>
                    <entry>star</entry>
                    <entry>Four lines crossing at the point.</entry>
                  </row>
                  <row>
                    <entry>target</entry>
                    <entry>A square outline with two filled squares and two open squares, centered on the point.</entry>
                  </row>
                  <row>
                    <entry>triangle</entry>
                    <entry>A filled triangle pointing down from the point.</entry>
                  </row>
                  <row>
                    <entry>trianglemid</entry>
                    <entry>A filled triangle pointing down to the point.</entry>
                  </row>
                  <row>
                    <entry>up</entry>
                    <entry>An unfilled triangle pointing up, centered on the point.</entry>
                  </row>
                  <row>
                    <entry>yield</entry>
                    <entry>A filled triangle pointing down, centered on the point.</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No marker (see notes).</entry>
                  </row>

                </tbody>
              </tgroup>
            </informaltable>
See <xref linkend="example-linepoints1" /> for a picture of the shapes.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$pt</parameter>, it
must use zero based sequential integer indexes. This is what the PHP manual 
calls 'the usual integer indices (starting from zero, increasing by one)'.
    </para>
    <para>
This applies only to 'points' and 'linepoints' plot types.
    </para>
    <para>
By default, ten shapes are used in order:
diamond, dot, delta, home, yield, box, circle, up, down, and cross.
    </para>
    <para>
A point shape can be set to 'none' to suppress the point markers for that
data set.
This is only useful with 'linepoints' plot types, and results in a 'lines'
plot type for that data set: a line only, but no markers.
    </para>
    <para>
PHPlot duplicates the entries in the shorter of the two arrays,
point sizes (set by <xref linkend="SetPointSizes"/>) and point shapes,
to make both arrays the same size. Then it uses the entries in order,
restarting at the beginning, for each data set at each X value.
For example, if point sizes is (6, 10), and point shapes is ('diamond',
'dot', 'rect'), then PHPlot first extends point sizes to (6, 10, 6) to
match the point shapes. If there are 4 data sets to plot, PHPlot draws the
point markers at each X value as: diamond (size 6), dot (size 10),
rect (size 6), diamond (size 6).
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, these ten shapes were available: halfline, line, plus,
cross, rect, circle, dot, diamond, triangle, trianglemid, and none. The
default shape for all data sets was 'diamond'.
Starting with PHPlot-5.1.0, ten new point shapes were added, and different shape
defaults were assigned for ten data sets.
To restore the behavior in PHPlot-5.0.7 and earlier, call
<literal>SetPointShapes('diamond')</literal>.
    </para>
    <para>
Using 'none' as a point shape was added in PHPlot-5.0rc3.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPointSizes">
  <refmeta>
    <refentrytitle>SetPointSizes</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPointSizes</refname>
    <refpurpose>Sets the point size for each data set</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetPointSizes(<parameter>$ps</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPointSizes</function> assigns a point size to each data
set in a plot.
'Point' here refers to the marker drawn at each data point in 'points' and
'linepoints' type plots.
For example, if each data row contains 4 Y values, the first
point size will be used for the first Y value, the second point size for
the second Y value, etc.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ps</replaceable></term>
        <listitem>
          <para>
An array of point sizes, or a single value. All values are in pixels.
If a single value, that size is used for all data sets.
If an array, the array values are the sizes for each subsequent
data set in a plot.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$ps</parameter>, it
must use zero based sequential integer indexes. This is what the PHP manual 
calls 'the usual integer indices (starting from zero, increasing by one)'.
    </para>
    <para>
This applies only to 'points' and 'linepoints' plot types.
    </para>
    <para>
PHPlot duplicates the entries in the shorter of the two arrays,
point sizes and point shapes (set by <xref linkend="SetPointShapes"/>),
to make both arrays the same size. Then it uses the entries in order,
restarting at the beginning, for each data set at each X value.
For example, if point sizes is (6, 10), and point shapes is ('diamond',
'dot', 'rect'), then PHPlot first extends point sizes to (6, 10, 6) to
match the point shapes. If there are 4 data sets to plot, PHPlot draws the
point markers at each X value as: diamond (size 6), dot (size 10),
rect (size 6), diamond (size 6).
    </para>
    <para>
By default, all point sizes are 6 pixels.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, the default size array was (5, 5, 3). However, there
were bugs in processing the sizes of the point shapes and point sizes arrays.
Also, for some point sizes, PHPlot rounded the size up to the next even number.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPrecisionX">
  <refmeta>
    <refentrytitle>SetPrecisionX</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPrecisionX</refname>
    <refpurpose>Set precision for numeric formated X labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetPrecisionX(<parameter>$prec</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPrecisionX</function> sets the desired numeric precision
for X tick and data labels, and also enables 'data' mode formatting
of those labels with <xref linkend="SetXLabelType" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$prec</replaceable></term>
        <listitem>
          <para>
The desired numeric precision.
This is the number of decimal positions to output.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Setting numeric precision with this function automatically enables 'data'
mode formatting as if <literal>SetXLabelType('data')</literal> was called.
    </para>
    <para>
The default is to format numbers with 1 decimal position, but only
if 'data' mode formatting is selected.
    </para>
    <para>
This applies to both X data labels and X tick labels (only one of which
should be enabled). Using 'data' format for X data labels only makes sense
when your data array contains numeric data in the label position.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-5.0.6, using <code>SetPrecisionX($n)</code>
is exactly the same as calling <code>SetXLabelType('data', $n)</code>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPrecisionY">
  <refmeta>
    <refentrytitle>SetPrecisionY</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPrecisionY</refname>
    <refpurpose>Set precision for numeric formated Y tick labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetPrecisionY(<parameter>$prec</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPrecisionY</function> sets the desired numeric precision
for Y tick and data labels, and also enables 'data' mode formatting
of those labels with <xref linkend="SetYLabelType" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$prec</replaceable></term>
        <listitem>
          <para>
The desired numeric precision.
This is the number of decimal positions to output.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Setting numeric precision with this function automatically enables 'data'
mode formatting as if <literal>SetYLabelType('data')</literal> was called.
    </para>
    <para>
The default is to format numbers with 1 decimal position, but only
if 'data' mode formatting is selected.
    </para>
    <para>
This function applies to Y tick labels, and also to the Y data labels
available with bar charts and stacked bar charts.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-5.0.6, using <code>SetPrecisionY($n)</code>
is exactly the same as calling <code>SetYLabelType('data', $n)</code>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPrintImage">
  <refmeta>
    <refentrytitle>SetPrintImage</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPrintImage</refname>
    <refpurpose>Determine whether or not to automatically output the image
when the plot is drawn</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetPrintImage(<parameter>$pi</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPrintImage</function> determines whether or not to automatically
output the image (as if <xref linkend="PrintImage" /> was used) when a plot
is drawn (with <xref linkend="DrawGraph" />). The default is True.
When putting multiple plots on one image, is is necessary to defer PrintImage
until after all the plots have been drawn.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$pi</replaceable></term>
        <listitem>
          <para>
True to automatically print the image when drawn with DrawGraph; False to
defer printing the image until PrintImage is explicitly called.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
To put multiple plots on an image, call SetPrintImage(False). Then for each
plot activate the position for it with <xref linkend="SetPlotAreaPixels" />,
produce the plot, and draw it with <xref linkend="DrawGraph" />.
When all the plots are drawn, output the image with <xref linkend="PrintImage" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetRGBArray">
  <refmeta>
    <refentrytitle>SetRGBArray</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetRGBArray</refname>
    <refpurpose>Select a color map</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetRGBArray(<parameter>$color_array</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetRGBArray</function> selects a color map to use. A color map is
an array of colors available to be used in the image. You can select from
pre-defined color maps, or define your own. Each color in a color map has a
name, and 3 color component values (red, green, blue) in the range 0 to 255
inclusive.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color_array</replaceable></term>
        <listitem>
          <para>
An array or a string. If an array, each element defines a color in the color
map. The array element key is the color name, and the array element value
is an array of three color components. (See example below).
          </para>
          <para>
Or, a string selecting a built-in color map.
Use 'small' to select a map of 36 colors, or 'large'
to select a much larger color map.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If SetRGBArray is not called, the 'small' color map is used.
    </para>
    <para>
More information about the color maps can be found in
<xref linkend="conc-colors-map" />.
    </para>
    <para>
Color names are case sensitive.
    </para>
    <para>
For the large color map to be loaded with SetRGBArray('large'), the file
<filename>rgb.inc.php</filename> must be found on the PHP include path or
in the same directory as <filename>phplot.php</filename>.
    </para>
    <para>
When defining a color map, care must be taken to avoid invalid color errors. 
PHPlot uses a number of pre-defined color names, and these must either be
defined in your color map or changed.
If you define your own color map, it should always contain colors named 'black',
'white', and 'gray', and you should use <xref linkend="SetDataColors" /> and
<xref linkend="SetErrorBarColors" /> to select colors which are in your
color map.
    </para>
  </refsect1>
  <refsect1>
    <title>Examples</title>
    <para>
An example of a user-defined color map is:
      <programlisting><![CDATA[
    array( 'black' => array(0, 0, 0),
           'white' => array(255, 255, 255),
           'gray'  => array(190, 190, 190),
           'red'   => array(255, 0, 0),
           'green' => array(0, 255, 0),
           'blue'  => array(0, 0, 255) )
]]></programlisting>
    </para>
  </refsect1>
</refentry>

<refentry id="SetShading">
  <refmeta>
    <refentrytitle>SetShading</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetShading</refname>
    <refpurpose>Set the size of the drop shadow for bar and pie charts.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetShading(<parameter>$s</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetShading</function> sets the size in pixels of the drop shadow
used to give bar and pie charts a 3-D look. The 3-D look can be disabled by
setting the shading to zero.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$s</replaceable></term>
        <listitem>
          <para>
Desired shading size in pixels. If this is set to 0, pie charts are flat
(not rotated away from the screen) with no shadow, and bars in bar charts
and stackedbar charts are drawn as rectangles without drop shadows.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default is shading enabled with a size of 5 pixels.
    </para>
    <para>
If shading is turned off for bar and stackedbar charts, the bars
will be drawn with borders. The color of the borders is set with
<xref linkend="SetDataBorderColors" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetSkipBottomTick">
  <refmeta>
    <refentrytitle>SetSkipBottomTick</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetSkipBottomTick</refname>
    <refpurpose>Suppress the bottom Y axis tick mark and label</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetSkipBottomTick(<parameter>$skip</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetSkipBottomTick</function> can be used to skip (suppress) the
bottom-most Y tick mark and its label.
See also
<xref linkend="SetSkipLeftTick" />,
<xref linkend="SetSkipRightTick" />, and
<xref linkend="SetSkipTopTick" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$skip</replaceable></term>
        <listitem>
          <para>
If True, don't draw the bottom Y tick mark and label;
if False, draw the bottom Y tick mark and label.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, no tick marks or labels are skipped.
    </para>
  </refsect1>
</refentry>

<refentry id="SetSkipLeftTick">
  <refmeta>
    <refentrytitle>SetSkipLeftTick</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetSkipLeftTick</refname>
    <refpurpose>Suppress the first X axis tick mark and label</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetSkipLeftTick(<parameter>$skip</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetSkipLeftTick</function> can be used to skip (suppress) the
left-most X tick mark and its label.
See also
<xref linkend="SetSkipBottomTick" />,
<xref linkend="SetSkipRightTick" />, and
<xref linkend="SetSkipTopTick" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
      <term><replaceable>$skip</replaceable></term>
        <listitem>
          <para>
If True, don't draw the first X tick mark and label;
if False, draw the first X tick mark and label.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, no tick marks or labels are skipped.
    </para>
  </refsect1>
</refentry>

<refentry id="SetSkipRightTick">
  <refmeta>
    <refentrytitle>SetSkipRightTick</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetSkipRightTick</refname>
    <refpurpose>Suppress the last X axis tick mark and label</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetSkipRightTick(<parameter>$skip</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetSkipRightTick</function> can be used to skip (suppress) the
right-most X tick mark and its label.
See also
<xref linkend="SetSkipBottomTick" />,
<xref linkend="SetSkipLeftTick" />, and
<xref linkend="SetSkipTopTick" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$skip</replaceable></term>
        <listitem>
          <para>
If True, don't draw the last X tick mark and label;
if False, draw the last X tick mark and label.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, no tick marks or labels are skipped.
    </para>
  </refsect1>
</refentry>

<refentry id="SetSkipTopTick">
  <refmeta>
    <refentrytitle>SetSkipTopTick</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetSkipTopTick</refname>
    <refpurpose>Suppress the top Y axis tick mark and label</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetSkipTopTick(<parameter>$skip</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetSkipTopTick</function> can be used to skip (suppress) the
top-most Y tick mark and its label.
See also
<xref linkend="SetSkipBottomTick" />,
<xref linkend="SetSkipLeftTick" />, and
<xref linkend="SetSkipRightTick" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$skip</replaceable></term>
        <listitem>
          <para>
If True, don't draw the top Y tick mark and label;
if False, draw the top Y tick mark and label.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, no tick marks or labels are skipped.
    </para>
  </refsect1>
</refentry>

<refentry id="SetTTFPath">
  <refmeta>
    <refentrytitle>SetTTFPath</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetTTFPath</refname>
    <refpurpose>Set the name of the default TrueType font directory</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetTTFPath(<parameter>$path</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetTTFPath</function> sets the name of the directory where
<xref linkend="SetFont" /> and <xref linkend="SetFontTTF" />
can find TrueType font files.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$path</replaceable></term>
        <listitem>
          <para>
Full path to a directory containing TrueType fonts.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default TrueType font directory is '.', meaning fonts will only be
searched for in the directory containing your main PHP script.
This default can be changed at installation time as described in
<xref linkend="install-install" />.
    </para>
    <para>
SetTTFPath does not enable the use of TrueType fonts.
See the note at the end of the reference for <xref linkend="SetUseTTF" />
on how to set up and use TrueType fonts.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-5.0rc3, the default TrueType font directory is used both
for the default font set with <xref linkend="SetDefaultTTFont" /> and for
fonts set with <xref linkend="SetFont" />. Refer to those two functions for
details.
    </para>
  </refsect1>
</refentry>

<refentry id="SetTextColor">
  <refmeta>
    <refentrytitle>SetTextColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetTextColor</refname>
    <refpurpose>Set general text color</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetTextColor(<parameter>$color</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetTextColor</function> sets the color which is used for several
text elements on the plot, including the tick labels, data labels, and the
text in the legend.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default text color is black.
    </para>
  </refsect1>
</refentry>

<refentry id="SetTickColor">
  <refmeta>
    <refentrytitle>SetTickColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetTickColor</refname>
    <refpurpose>Set the color of the axis tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetTickColor(<parameter>$color</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetTickColor</function> sets the color of the axis tick marks.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default color for the tick marks is black.
    </para>
  </refsect1>
</refentry>

<refentry id="SetTitle">
  <refmeta>
    <refentrytitle>SetTitle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetTitle</refname>
    <refpurpose>Set the main title text for the plot</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetTitle(<parameter>$title</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetTitle</function> sets the main plot title text. This is
displayed centered at the top of the plot.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$title</replaceable></term>
        <listitem>
          <para>
The title text to be displayed.
The string can contain multiple lines, separated by newlines (in PHP: "\n").
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
</refentry>

<refentry id="SetTitleColor">
  <refmeta>
    <refentrytitle>SetTitleColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetTitleColor</refname>
    <refpurpose>Set the color of the plot titles</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetTitleColor(<parameter>$color</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetTitleColor</function> sets the color of the plot title
(as set with <xref linkend="SetTitle" />), and the X and Y axis titles
(as set with <xref linkend="SetXTitle" /> and <xref linkend="SetYTitle" />).
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default color for the titles is black.
    </para>
  </refsect1>
</refentry>

<refentry id="SetTransparentColor">
  <refmeta>
    <refentrytitle>SetTransparentColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetTransparentColor</refname>
    <refpurpose>Designate one color to be transparent</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetTransparentColor(<parameter>$color</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetTransparentColor</function> designates one color in the image
to be transparent. The designated color will not be visible (assuming the
image is viewed with a program which supports transparency) - instead,
everything drawn in that color will be transparent.
By default, no color is transparent.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Name of the color in the current color map (see <xref linkend="SetRGBArray" />)
which should become transparent.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This will only work if both the selected image file format
(see <xref linkend="SetFileFormat" />)
and the user's browser or viewer support transparency.
GIF format supports transparency.
PNG format also supports transparency, but viewer support is more limited.
    </para>
  </refsect1>
  <refsect1>
    <title>Example</title>
    <para>
To set the plot image background to be transparent, pick a color (here
'yellow') that won't be used anywhere else on the image, and use code
like this:
      <programlisting><![CDATA[
$plot->SetBackgroundColor('yellow');
$plot->SetTransparentColor('yellow');
]]></programlisting>
    </para>
  </refsect1>
</refentry>

<refentry id="SetUseTTF">
  <refmeta>
    <refentrytitle>SetUseTTF</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetUseTTF</refname>
    <refpurpose>Set the default font type</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetUseTTF(<parameter>$ttf</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetUseTTF</function> sets the default font type to TrueType fonts or
built-in GD fonts, and re-initializes all font settings.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ttf</replaceable></term>
        <listitem>
          <para>
True to use TrueType fonts by default, False to use built-in GD fonts
by default.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Changing the font type re-initializes all the font settings to the defaults.
    </para>
    <para>
The default is False, to use the built-in GD fonts.
    </para>
    <para>
There must be a valid default font before enabling TrueType fonts with
SetUseTTF, or PHPlot will abort with an error because it cannot find
the default font. There are three ways to
properly set up TrueType fonts to avoid this error:
      <itemizedlist>
        <listitem>
          <para>
Call <xref linkend="SetDefaultTTFont" /> with the full pathname to a
TrueType font file to use as the default. Since SetDefaultTTFont
automatically selects TrueType fonts as the default,
you don't need to call SetUseTTF if you use this option.
          </para>
        </listitem>
        <listitem>
          <para>
Call <xref linkend="SetTTFPath" /> with the path to a directory where you
have stored TrueType fonts, then call <xref linkend="SetDefaultTTFont" />
with the filename (e.g. <filename>arial.ttf</filename>) of the
TrueType font file to use as the default. Since SetDefaultTTFont
automatically selects TrueType fonts as the default,
you don't need to call SetUseTTF if you use this option either.
          </para>
        </listitem>
        <listitem>
          <para>
Modify the built-in values for the default TrueType font, and the default
font directory (if needed), in <filename>phplot.php</filename> at
installation time as described in <xref linkend="install-install" />.
If the built-in defaults are sufficient to find the font file, you can
use SetUseTTF to enable TrueType fonts.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
After enabling TrueType fonts, you can use
<xref linkend="SetFont" /> or <xref linkend="SetFontTTF" />
to select fonts and sizes for individual text elements in the plot.
You can also use <xref linkend="SetFontGD" /> to use GD fonts for one or
more elements, overriding the default font type.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.5, this function enabled or disabled the use of TrueType
font text, since all text on a graph had to be either TrueType or all GD.
Starting with PHPlot-5.0.6, this function selects the default font type (and
still re-initializes all fonts). Both GD and TrueType font text can now be
used on a graph.
    </para>
  </refsect1>

</refentry>

<refentry id="SetXAxisPosition">
  <refmeta>
    <refentrytitle>SetXAxisPosition</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXAxisPosition</refname>
    <refpurpose>Move the X axis</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXAxisPosition(<parameter>$pos</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXAxisPosition</function> sets the position of the X axis,
which is normally at Y=0.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$pos</replaceable></term>
        <listitem>
          <para>
The Y position in world coordinates for the X axis.
(World coordinates are the coordinate space of your data points.)
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The given position is truncated (towards 0) to an integer value.
    </para>
    <para>
The default position for the X axis is Y=0, provided Y=0 is within the
range of the graph. If Y=0 is not within the range of the graph, the X axis
will default to the edge with the smallest absolute Y value.
This means the X axis will be at the bottom of the graph if all values of Y
are greater than zero, and at the top of the graph if all values of Y are
less than zero.
(For log scale plots, however, the default X axis position is Y=1.)
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.1.0, the default position for the X axis was the bottom of
the graph whenever Y=0 was not within the range the graph, regardless of
whether the data was all positive or all negative.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXDataLabelAngle">
  <refmeta>
    <refentrytitle>SetXDataLabelAngle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXDataLabelAngle</refname>
    <refpurpose>Set the text angle for X data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXDataLabelAngle(<parameter>$xdla</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXDataLabelAngle</function> sets the text angle for X data labels.
If using TrueType fonts, any angle can be used.
If using built-in GD fonts, only 0 degree and 90 degree text can be used.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xdla</replaceable></term>
        <listitem>
          <para>
Desired angle for label text, in degrees.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, X Data Labels are drawn at the same angle as X Tick Labels, as
set with <xref linkend="SetXLabelAngle"/>.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added to PHPlot in 5.1.0. Through PHPlot-5.0.7,
<xref linkend="SetXLabelAngle"/> set the angle for both text and data labels.
    </para>
    <para>
Through PHPlot-5.0.7, there was a deprecated function by the same name that
simply called SetXLabelAngle.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXDataLabelPos">
  <refmeta>
    <refentrytitle>SetXDataLabelPos</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXDataLabelPos</refname>
    <refpurpose>Where to draw the X data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXDataLabelPos(<parameter>$xdlp</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXDataLabelPos</function> determines where the X data labels
are drawn. The labels can be drawn at the bottom of the plot (below the X
axis), above the plot, in both positions, or neither.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xdlp</replaceable></term>
        <listitem>
          <para>
A string indicating the desired position for the X data labels:
            <informaltable>
              <tgroup cols="2">
                <?dbhtml table-summary="X data label position choices"?>
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotdown</entry>
                    <entry>Data labels below the plot</entry>
                  </row>
                  <row>
                    <entry>plotup</entry>
                    <entry>Data labels above the plot</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>Data labels both below and above the plot</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No data labels</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default position for X data labels is below the plot. However PHPlot
only enables the data labels if SetXDataLabelPos was used to position them,
or if <xref linkend="SetXTickLabelPos"/> was not used to enable the tick
labels and the data labels are non-empty.
    </para>
    <para>
This applies only to data labels.
For tick labels, see <xref linkend="SetXTickLabelPos" />.
    </para>
    <para>
If X data lines are enabled with <xref linkend="SetDrawXDataLabelLines"/>,
then SetXDataLabelPos() also determines the direction of the lines which
are drawn from the data points.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, the default position for X data labels was below the
plot ('plotdown').
This would result in overlaid data and tick labels by default.
In addition, positioning the X tick labels with
<xref linkend="SetXTickLabelPos"/> with a position other than 'none'
resulted in disabling the X data labels, and vice-versa.
If both tick and data labels were positioned, the later setting overrode
the earlier, which was turned off.
Starting with PHPlot-5.1.0, PHPlot handles tick and data label positions
as described in the notes above.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXDataLabelType">
  <refmeta>
    <refentrytitle>SetXDataLabelType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXDataLabelType</refname>
    <refpurpose>Set formatting type for X data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXDataLabelType(<parameter>$type</parameter>, <optional><parameter>...</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXDataLabelType</function> sets the formatting type for X data
labels. By default, data labels are formatted the same as tick labels.
If <xref linkend="SetXLabelType"/> is not used, then there is no special
formatting for either label type, so the labels are output as-is.
Available format types are 'data', 'time', 'printf', and 'custom'.
    </para>
    <para>
'data' formatting formats the labels as floating point numbers,
with digits grouped into thousands (3 digit groups),
and with user-defined precision.
Grouping separator characters can be set with <xref linkend="SetNumberFormat" />.
The precision (number of digits after the decimal point) can be set
as an additional argument to SetXDataLabelType.
A prefix and suffix string can also be specified.
    </para>
    <para>
'time' formatting formats the labels as date/time values, with the
format string specified as an additional argument to SetXDataLabelType.
    </para>
    <para>
'printf' formatting formats the labels using the standard
<function>sprintf</function> function, with the format string specified
as an additional argument to SetXDataLabelType.
    </para>
    <para>
'custom' formatting formats the labels using a caller-provided function,
with an optional pass-through argument. This provides the maximum
flexibility in formatting labels.
    </para>

  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
There is one required argument, $type. Other arguments depend on the value
of the $type argument.
      <variablelist>
        <varlistentry>
          <term><replaceable>$type</replaceable></term>
          <listitem>
            <para>
A string indicating the desired formatting mode: 'data', 'time', 'printf',
or 'custom'. Or, an empty string meaning revert to no formatting.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'data', there are three optional arguments:
      <variablelist>
        <varlistentry>
          <term><replaceable>$precision</replaceable></term>
          <listitem>
            <para>
The formatting precision, or number of decimal places (optional).
If omitted, the default is 1.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$prefix</replaceable></term>
          <listitem>
            <para>
A prefix string to be placed before the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$suffix</replaceable></term>
          <listitem>
            <para>
A suffix string to be placed after the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'time', there is one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format</replaceable></term>
          <listitem>
            <para>
Formatting string, used with <function>strftime()</function>.
For example, '%Y-%m-%d' results in formatting a <literal>time_t</literal>
value as a year, month, and day numbers.
If omitted, the default is '%H:%M:%S' (hours, minutes, and seconds).
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'printf', there is one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format</replaceable></term>
          <listitem>
            <para>
Formatting string, used with <function>sprintf()</function>.
If omitted, the default value of '%e' uses scientific notation with default
field sizes.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'custom', there is one required argument and one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$callback</replaceable></term>
          <listitem>
            <para>
A callback function to format the label. This is either the name of a
function (as a string), or a two-element array with an object instance and
method name. (Refer to the PHP documentation for more information on the
callback type.) The callback will be called with two arguments: the value
of the label to be formatted, and the pass-through argument (see next).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$callback_arg</replaceable></term>
          <listitem>
            <para>
A pass-through argument for the callback function.
If omitted, NULL is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default formatting mode is to do no special formatting of the labels.
Strings will be output as-is, and numbers will be output using PHP's
default formatting.
If you need to change label formatting back to the default,
or to override a format type you set for tick labels and have no
formatting for data labels,
use SetXDataLabelType without arguments, or with an empty string argument.
    </para>
    <para>
When using a custom label formatting function, do not assume the labels are
formatted in any particular order, or only once each.
    </para>
  </refsect1>

  <refsect1>
    <title>Examples</title>
    <para>
See <xref linkend="SetXLabelType" />.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.1.0.
Through PHPlot-5.0.7, data labels and tick labels always used the same
formatting, as set with <xref linkend="SetXLabelType"/>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXLabelAngle">
  <refmeta>
    <refentrytitle>SetXLabelAngle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXLabelAngle</refname>
    <refpurpose>Set the text angle for X labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXLabelAngle(<parameter>$xla</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXLabelAngle</function> sets the text angle for X tick labels.
Unless <xref linkend="SetXDataLabelAngle"/> is called, the same angle is
also used for X data labels.
If using TrueType fonts, any angle can be used.
If using built-in GD fonts, only 0 degree and 90 degree text can be used.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xla</replaceable></term>
        <listitem>
          <para>
Desired angle for label text, in degrees.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default text angle for X labels is 0 degrees, for horizontal text.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, SetXLabelAngle sets the angle for both tick and data
labels. Starting with PHPlot-5.1.0, these can be controlled independently
using <xref linkend="SetXDataLabelAngle"/>.
For compatibility, data label angles default to the value set for tick label
angles with SetXLabelAngle.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXLabelType">
  <refmeta>
    <refentrytitle>SetXLabelType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXLabelType</refname>
    <refpurpose>Set formatting type for X tick labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXLabelType(<parameter>$type</parameter>, <optional><parameter>...</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXLabelType</function> sets the formatting type for X tick labels,
and the default formatting type for X data labels.
(If <xref linkend="SetXDataLabelType"/> is never called,
<function>SetXLabelType</function> effectively sets the formatting type
for both X tick labels and X data labels.)
By default, there is no special formatting, so the labels are output as-is.
Available format types are 'data', 'time', 'printf', and 'custom'.
    </para>
    <para>
'data' formatting formats the labels as floating point numbers,
with digits grouped into thousands (3 digit groups),
and with user-defined precision.
Grouping separator characters can be set with <xref linkend="SetNumberFormat" />.
The precision (number of digits after the decimal point) can be set with
<xref linkend="SetPrecisionX" />, or as an additional argument to SetXLabelType.
A prefix and suffix string can also be specified.
    </para>
    <para>
'time' formatting formats the labels as date/time values,
using a format specifier set by <xref linkend="SetXTimeFormat" />
or using an additional argument to SetXLabelType.
    </para>
    <para>
'printf' formatting formats the labels using the standard
<function>sprintf</function> function, with the format string specified
as an additional argument to SetXLabelType.
    </para>
    <para>
'custom' formatting formats the labels using a caller-provided function,
with an optional pass-through argument. This provides the maximum
flexibility in formatting labels.
    </para>

  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
There is one required argument, $type. Other arguments depend on the value
of the $type argument.
      <variablelist>
        <varlistentry>
          <term><replaceable>$type</replaceable></term>
          <listitem>
            <para>
A string indicating the desired formatting mode: 'data', 'time', 'printf',
or 'custom'. Or, an empty string meaning revert to no formatting.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'data', there are three optional arguments:
      <variablelist>
        <varlistentry>
          <term><replaceable>$precision</replaceable></term>
          <listitem>
            <para>
The formatting precision, or number of decimal places (optional).
If omitted, the value set with <xref linkend="SetPrecisionX" /> is used,
or if that was never called then the default is 1.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$prefix</replaceable></term>
          <listitem>
            <para>
A prefix string to be placed before the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$suffix</replaceable></term>
          <listitem>
            <para>
A suffix string to be placed after the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'time', there is one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format</replaceable></term>
          <listitem>
            <para>
Formatting string, used with <function>strftime()</function>.
For example, '%Y-%m-%d' results in formatting a <literal>time_t</literal>
value as a year, month, and day numbers.
If omitted, the value set with <xref linkend="SetXTimeFormat" /> is used,
or if that was never called then the default is '%H:%M:%S' (hours, minutes,
and seconds).
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'printf', there is one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format</replaceable></term>
          <listitem>
            <para>
Formatting string, used with <function>sprintf()</function>.
If omitted, the default value of '%e' uses scientific notation with default
field sizes.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'custom', there is one required argument and one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$callback</replaceable></term>
          <listitem>
            <para>
A callback function to format the label. This is either the name of a
function (as a string), or a two-element array with an object instance and
method name. (Refer to the PHP documentation for more information on the
callback type.) The callback will be called with two arguments: the value
of the label to be formatted, and the pass-through argument (see next).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$callback_arg</replaceable></term>
          <listitem>
            <para>
A pass-through argument for the callback function.
If omitted, NULL is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default formatting mode is to do no special formatting of the labels.
Strings will be output as-is, and numbers will be output using PHP's
default formatting.
If you need to change label formatting back to the default,
use SetXLabelType without arguments, or with an empty string argument.
    </para>
    <para>
A side effect of <xref linkend="SetPrecisionX" /> is to call this function
SetXLabelType and set the format type to 'data'.
Note that <xref linkend="SetXTimeFormat" /> does not have a corresponding
side effect on the format type.
    </para>
    <para>
When using a custom label formatting function, do not assume the labels are
formatted in any particular order, or only once each.
    </para>
  </refsect1>

  <refsect1>
    <title>Examples</title>
    <para>
The following table shows some label formatting examples.
These also apply to <function>SetXLabelType</function>,
<xref linkend="SetXDataLabelType"/>, <xref linkend="SetYLabelType"/>,
and <xref linkend="SetYDataLabelType"/>.
      <informaltable>
        <tgroup cols="4">
          <?dbhtml table-summary="Examples of label formatting"?>
          <thead>
            <row>
              <entry>Code:</entry>
              <entry>Value:</entry>
              <entry>Result:</entry>
              <entry>Notes:</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><programlisting><![CDATA[
$plot->SetXLabelType('data', 2);
]]></programlisting></entry>
              <entry>1234.56</entry>
              <entry>1,234.56</entry>
              <entry>
Data (numeric) formatting with two digits of precision.
Grouping and decimal separators depend on locale.
              </entry>
            </row>

            <row>
              <entry><programlisting><![CDATA[
$plot->SetXLabelType('data', 0, '&amp;#8364;');
]]></programlisting></entry>
              <entry>100000</entry>
              <entry>&euro;1,000,000</entry>
              <entry>
Data (numeric) formatting with prefix.
&amp;#8364; is the entity code for the Euro sign in Unicode. (Numeric entity
codes are handled by the GD library, but not named character entity codes.)
Here we use it as a prefix, common usage for English.
The Euro sign may appear differently in your browser. But when used with
PHPlot it requires a Unicode font on the server.
              </entry>
            </row>

            <row>
              <entry><programlisting><![CDATA[
$plot->SetNumberFormat(',', '.');
$plot->SetXLabelType('data', 2, '',
                     '\xe2\x82\xac');
]]></programlisting></entry>
              <entry>100000</entry>
              <entry>1.000.000,00&euro;</entry>
              <entry>
Data (numeric) formatting with suffix.
Here we use the Euro as a suffix, common usage for French.
Unlike the previous example, here we represent it as a 3 byte UTF-8
sequence. You can use html_entity_decode() with UTF-8 as the character set
to translate &amp;euro; into this sequence. (You cannot used named
character entity codes in PHPlot strings that are processed by GD, as GD
only handles UTF-8 sequences or numeric entity codes.)
The thousands and decimal separator default to locale-dependent values,
but here we set them ourselves with SetNumberFormat.
The Euro sign may appear differently in your browser. But when used with
PHPlot it requires a Unicode font on the server.
              </entry>
            </row>

            <row>
              <entry><programlisting><![CDATA[
$plot->SetXLabelType('time', '%m/%Y');
]]></programlisting></entry>
              <entry>1208232000</entry>
              <entry>04/2008</entry>
              <entry>
Date/time formatting.
The given value is mktime(0,0,0,4,15,2008).
The format string could be set with SetXTimeFormat instead.
              </entry>
            </row>

            <row>
              <entry><programlisting><![CDATA[
$plot->SetXLabelType('printf', '%8.2e');
]]></programlisting></entry>
              <entry>1234</entry>
              <entry>1.23e+3</entry>
              <entry>
Formatting using printf.
Note PHP printf may differ from the standard C library. For example, PHP
outputs only a one digit exponent here.
              </entry>
            </row>

            <row>
              <entry><programlisting><![CDATA[
function deg_min_sec($value)
{
  $deg = (int)$value;
  $value = ($value - $deg) * 60;
  $min = (int)$value;
  $sec = (int)(($value - $min) * 60);
  return "{$deg}d {$min}m {$sec}s";
}
$plot->SetXLabelType('custom', 'deg_min_sec');
]]></programlisting></entry>
              <entry>75.12345</entry>
              <entry>75d 7m 24s</entry>
              <entry>
A custom formatting function is used to format values in decimal degrees as
degrees, minutes, and seconds. (This only works for non-negative angles.)
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, this function set the format type for both X tick
labels and X data labels.
Starting with PHPlot-5.1.0, a new function <xref linkend="SetXDataLabelType"/>
was added to allow separate control of tick and data labels.
<function>SetXLabelType</function> now sets the format type for X tick labels,
and the default format type for X data labels.
    </para>
    <para>
New label format types 'printf' and 'custom' were added at PHPlot-5.0.6, 
as well as all arguments after the first. In PHPlot-5.0.5 and earlier, you
must use SetXTimeFormat and SetPrecisionX to set the formatting parameters.
Starting with PHPlot-5.0.6, you have the choice of using those, or
providing additional arguments to SetXLabelType.
Also added was the ability to add a prefix and suffix to 'data' formatted
labels. In PHPlot-5.0.5 and earlier, there was an undocumented class variable 
<parameter>data_units_text</parameter> that was applied as a suffix to 'data'
mode labels, for both X and Y. This continues to work, but is deprecated.
    </para>
    <para>
Starting with PHPlot-5.0.6, you can use an empty string or no argument at all
to reset to the default of no formatting.
    </para>
    <para>
Starting with PHPlot-5.0.4, empty string data labels are ignored when
formatting with 'data' or 'time' formats. You can use this to suppress
some data labels, or control label density, with 'data' and 'time'
formatted labels.
    </para>
    <para>
Through PHPlot-5.0rc3, empty strings would still be formatted.  With 'data'
format, an empty string would result in a zero value, and with 'time'
format an empty string would cause an error. As a result, with older releases,
if you don't want to use data labels when using 'data' or 'time' formats,
you must  turn off X data label display with
<xref linkend="SetXDataLabelPos" />,
even if your data array labels are empty strings.
    </para>
    <para>
Through PHPlot-5.0rc3, when the formatting mode is 'data'
the thousands grouping separator was always a comma,
and a period was used as a decimal point.
Starting with 5.0.4, PHPlot attempts to get the correct values for your
locale.  You can set the separator characters yourself instead with
<xref linkend="SetNumberFormat" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXScaleType">
  <refmeta>
    <refentrytitle>SetXScaleType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXScaleType</refname>
    <refpurpose>Select linear or logarithmic scale</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXScaleType(<parameter>$st</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXScaleType</function> sets the scale type along the X axis 
to be either linear (the default) or logarithmic.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$st</replaceable></term>
        <listitem>
          <para>
A string specifying the scale type: 'linear' or 'log'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
No X value may be less than or equal to 0 with logarithmic X scale.
    </para>
    <para>
Support for logarithmic scales in PHPlot is limited. One problem is that
tick interval is fixed for the entire range of data, which is inappropriate
for logarithmic scales where the data spans more than one magnitude.
    </para>
    <para>
The default X and Y scale types are linear.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTickCrossing">
  <refmeta>
    <refentrytitle>SetXTickCrossing</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTickCrossing</refname>
    <refpurpose>Set crossing length of X tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXTickCrossing(<parameter>$xc</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTickCrossing</function> sets the length by which the X tick
marks cross the X axis or plot border (depending on the tick position
set with <xref linkend="SetXTickPos" />) pointing inwards.
See figure below.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xc</replaceable></term>
        <listitem>
          <para>
Desired X tick crossing length in pixels.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default tick crossing length is 3 pixels.
    </para>
    <para>
The following figure shows the four length measurements used to draw the
tick marks. (In this plot, the tick lengths have been increased from the
defaults.)
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/ticksize.png" format="PNG" />
          </imageobject>
          <textobject>
            <phrase>Tick size controls</phrase>
          </textobject>
        </mediaobject>
      </informalfigure>
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTickIncrement">
  <refmeta>
    <refentrytitle>SetXTickIncrement</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTickIncrement</refname>
    <refpurpose>Set the step between X ticks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXTickIncrement(<parameter>$ti</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTickIncrement</function> sets the interval between X tick
marks.
You can use either this function or <xref linkend="SetNumXTicks" />
(but not both) to control the tick mark spacing.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ti</replaceable></term>
        <listitem>
          <para>
Desired tick interval, in world coordinates.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If neither <function>SetXTickIncrement</function> nor 
<xref linkend="SetNumXTicks" /> is used, the tick mark interval
is calculated as 1/10th of the X data range.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTickLabelPos">
  <refmeta>
    <refentrytitle>SetXTickLabelPos</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTickLabelPos</refname>
    <refpurpose>Position the X tick labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXTickLabelPos(<parameter>$xtlp</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTickLabelPos</function> determines where (and if) the
X tick labels are drawn. The labels can be drawn at the bottom of the plot,
above the plot, in both positions, at the X axis (even if it is in the
middle of the plot), or not drawn at all.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xtlp</replaceable></term>
        <listitem>
          <para>
A string indicating the desired position for the X tick labels:
            <informaltable>
              <tgroup cols="2">
                <?dbhtml table-summary="X tick label position choices"?>
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotdown</entry>
                    <entry>Tick labels below the plot</entry>
                  </row>
                  <row>
                    <entry>plotup</entry>
                    <entry>Tick labels above the plot</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>Tick labels both below and above the plot</entry>
                  </row>
                  <row>
                    <entry>xaxis</entry>
                    <entry>Tick labels at X axis (even if the axis is in
                      the middle of the plot)</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No tick labels</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default position for the X tick labels is below the plot. However,
PHPlot will disable X tick labels by default if X data labels are
positioned with <xref linkend="SetXDataLabelPos"/>.
If neither SetXTickLabelPos nor SetXDataLabelPos are used, PHPlot will
enable just data labels if they are non-empty, and otherwise it will enable
just tick labels, and position them below the plot.
    </para>
    <para>
This applies only to tick labels.
For data labels, see <xref linkend="SetXDataLabelPos" />.
You probably want the tick marks to be in the same positions as the tick
labels.  To position the tick marks, see <xref linkend="SetXTickPos" />.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, the default position for X tick labels was below the
plot ('plotdown').
This would result in overlaid data and tick labels by default.
In addition, positioning the X data labels with
<xref linkend="SetXDataLabelPos"/> with a position other than 'none'
resulted in disabling the X tick labels, and vice-versa.
If both tick and data labels were positioned, the later setting overrode
the earlier, which was turned off.
Starting with PHPlot-5.1.0, PHPlot handles tick and data label positions
as described in the notes above.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTickLength">
  <refmeta>
    <refentrytitle>SetXTickLength</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTickLength</refname>
    <refpurpose>Set outer length of X tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXTickLength(<parameter>$xln</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTickLength</function> sets the length of the X tick marks
pointing outwards from the plot. For example, for tick marks on an X axis
at the bottom of the plot, this is the length from the X axis down.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xln</replaceable></term>
        <listitem>
          <para>
Desired X tick length in pixels.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default tick length is 5 pixels.
    </para>
    <para>
See figure under <xref linkend="SetXTickCrossing" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTickPos">
  <refmeta>
    <refentrytitle>SetXTickPos</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTickPos</refname>
    <refpurpose>Position the X axis tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXTickPos(<parameter>$tp</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTickPos</function> determines where (and if) the
X tick marks are drawn. The tick marks can be drawn at the bottom of the plot,
above the plot, in both positions, at the X axis (even if it is in the
middle of the plot), or not drawn at all.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xtp</replaceable></term>
        <listitem>
          <para>
A string indicating the desired position for the X tick marks:
            <informaltable>
              <tgroup cols="2">
                <?dbhtml table-summary="X tick position choices"?>
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotdown</entry>
                    <entry>Tick marks below the plot</entry>
                  </row>
                  <row>
                    <entry>plotup</entry>
                    <entry>Tick marks above the plot</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>Tick marks both below and above the plot</entry>
                  </row>
                  <row>
                    <entry>xaxis</entry>
                    <entry>Tick marks at X axis (even if the axis is in
                      the middle of the plot)</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No tick marks</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default position for the X tick marks is below the plot.
    </para>
    <para>
This applies only to tick marks.
You may want the tick labels to be in the same positions as the tick
marks.  To position the tick labels, see <xref linkend="SetXTickLabelPos" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTimeFormat">
  <refmeta>
    <refentrytitle>SetXTimeFormat</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTimeFormat</refname>
    <refpurpose>Set date/time formatting string for X labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXTimeFormat(<parameter>$xtf</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTimeFormat</function> sets the formatting string for X tick
and data labels when 'time' formatting mode for X labels is in effect.
Use <xref linkend="SetXLabelType" /> to select the formatting mode for labels.
The formatting string is used with the PHP <function>strftime</function>
to format labels as date/time strings.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xtf</replaceable></term>
        <listitem>
          <para>
Formatting string for X labels, used with <function>strftime()</function>.
For example, if the label value is 1104534000 (which is the
<literal>time_t</literal> representation of 6:00 PM on the last day of 2004),
'%Y-%m-%d.%H:%M:%S' results in '2004-12-31.18:00:00',
and '%d %b %Y' results in '31 Dec 2004'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This applies to both X tick labels and X data labels. To use date/time
formatting, the label values must be Unix time_t values (number of seconds
since Unix epoch).
    </para>
    <para>
Unlike <xref linkend="SetPrecisionX" />, SetXTimeFormat does not
automatically enable the correct label formatting mode. You
must call <literal>SetXLabelType('time')</literal> to use date/time
formatting of labels.
    </para>
    <para>
The default time format is '%H:%M:%S', showing hours, minutes, and seconds
(and ignoring any date information).
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-5.0.6, the time format can be set with
<xref linkend="SetXLabelType" /> instead.
    </para>
    <para>
The default time format was undefined prior to PHPlot-5.0rc3.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTitle">
  <refmeta>
    <refentrytitle>SetXTitle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTitle</refname>
    <refpurpose>Sets the X axis title, and optionally its position</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetXTitle(<parameter>$xtitle</parameter>, <optional><parameter>$xpos</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTitle</function> sets the text to be displayed as the X axis
title. Optionally, it also sets the position of the title and the axis
itself: below the graph (the usual place), above the graph, both, or
neither.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>

      <varlistentry>
        <term><replaceable>$xtitle</replaceable></term>
        <listitem>
          <para>
The text string to use for the X axis title.
The string can contain multiple lines, separated by newlines (in PHP: "\n").
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$xpos</replaceable></term>
        <listitem>
          <para>
Optional position for the X axis and title. Use one of the following
strings for the position:
            <informaltable>
              <tgroup cols="2">
                <?dbhtml table-summary="X axis position choices"?>
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotdown</entry>
                    <entry>X axis below the plot</entry>
                  </row>
                  <row>
                    <entry>plotup</entry>
                    <entry>X axis above the plot</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>One X axis above, and one below</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No X axis, no X axis title</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
The default is 'plotdown'.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>
</refentry>

<refentry id="SetYAxisPosition">
  <refmeta>
    <refentrytitle>SetYAxisPosition</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYAxisPosition</refname>
    <refpurpose>Move the Y axis</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYAxisPosition(<parameter>$pos</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYAxisPosition</function> sets the position of the Y axis,
which is normally at the left edge of the plot.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$pos</replaceable></term>
        <listitem>
          <para>
The X position in world coordinates for the Y axis.
(World coordinates are the coordinate space of your data points.)
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The given position is truncated (towards 0) to an integer value.
    </para>
    <para>
Unless this function is used to move it, the Y axis is always drawn
at the left of the graph.
    </para>

  </refsect1>
</refentry>

<refentry id="SetYDataLabelAngle">
  <refmeta>
    <refentrytitle>SetYDataLabelAngle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYDataLabelAngle</refname>
    <refpurpose>Set the text angle for Y data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYDataLabelAngle(<parameter>$ydla</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYDataLabelAngle</function> sets the text angle for Y data labels.
These are the labels that can be used with bar charts and stacked bar charts.
See <xref linkend="SetYDataLabelPos"/>.
If using TrueType fonts, any angle can be used.
If using built-in GD fonts, only 0 degree and 90 degree text can be used.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ydla</replaceable></term>
        <listitem>
          <para>
Desired angle for label text, in degrees.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, Y data labels are drawn at 0 degrees.
(This is different from X data labels, which default to the angle set
for X tick labels.)
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.1.0. Through PHPlot-5.0.7,
Y data labels were always drawn at 0 degrees.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYDataLabelPos">
  <refmeta>
    <refentrytitle>SetYDataLabelPos</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYDataLabelPos</refname>
    <refpurpose>Position and control Y data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYDataLabelPos(<parameter>$ydlp</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYDataLabelPos</function> determines if and where Y data labels
are drawn. Currently, Y data labels are only implemented for 'bars'
and 'stackedbars' plot types.
For bar charts, the Y data label shows the Y value above each bar.
For stacked bar charts, there are two types of data labels.
Bar total labels indicate the total Y value for a bar stack, and are drawn
above the bar.
Bar segment labels indicate the incremental value of each segment
within the bar, and are drawn inside the segment below the top.
Y data labels are shown in <xref linkend="example-bars4" />
and <xref linkend="example-stackedbars3" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ydlp</replaceable></term>
        <listitem>
          <para>
A string indicating the desired position for the Y data labels:
            <informaltable>
              <tgroup cols="2">
                <?dbhtml table-summary="Y data label position choices"?>
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotin</entry>
                    <entry>Data labels above each bar. For stacked bar charts,
                        this means only the bar total labels and not the
                        bar segment labels.
                    </entry>
                  </row>
                  <row>
                    <entry>plotstack</entry>
                    <entry>Data labels above each bar and below the top of
                      each segment. This is valid only for stacked bar charts,
                      and turns on both bar total labels and bar segment labels.
                    </entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No data labels</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
These labels are only available for plot type 'bars' and 'stackedbars'.
The default is not to draw Y data labels.
Y data labels work best when the values are short enough to fit.
    </para>
    <para>
The bar segment labels, if enabled, are drawn inside the bars and may not
be very visible if dark colors are used for the bar fill.
Bar segment labels will be omitted for segments which are too short.
    </para>
    <para>
Y data labels will be drawn below the bars for negative values. This only
applies to bar charts. Stacked bar charts are not allowed to have negative
values.
    </para>
    <para>
The Y data label text angle is set with <xref linkend="SetYDataLabelAngle"/>.
The Y data label text format can be controlled with
<xref linkend="SetYDataLabelType"/> or <xref linkend="SetYLabelType"/>.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
The Y data label feature for stacked bar graphs was added after PHPlot-5.1.0.
    </para>
    <para>
The Y data label feature for bar graphs was added to PHPlot-5.0rc3.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYDataLabelType">
  <refmeta>
    <refentrytitle>SetYDataLabelType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYDataLabelType</refname>
    <refpurpose>Set formatting type for Y data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYDataLabelType(<parameter>$type</parameter>, <optional><parameter>...</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYDataLabelType</function> sets the formatting type for Y data
labels.
(Y data labels are only available with bar charts and stacked bar charts.)
By default, data labels are formatted the same as tick labels.
If <xref linkend="SetYLabelType"/> is not used, then there is no special
formatting for either label type, so the labels are output as-is.
Available format types are 'data', 'time', 'printf', and 'custom'.
    </para>
    <para>
'data' formatting formats the labels as floating point numbers,
with digits grouped into thousands (3 digit groups),
and with user-defined precision
Grouping separator characters can be set with <xref linkend="SetNumberFormat" />.
The precision (number of digits after the decimal point) can be set
as an additional argument to SetYDataLabelType.
A prefix and suffix string can also be specified.
    </para>
    <para>
'time' formatting formats the labels as date/time values, with the
format string specified as an additional argument to SetYDataLabelType.
    </para>
    <para>
'printf' formatting formats the labels using the standard
<function>sprintf</function> function, with the format string specified
as an additional argument to SetYDataLabelType.
    </para>
    <para>
'custom' formatting formats the labels using a caller-provided function,
with an optional pass-through argument. This provides the maximum
flexibility in formatting labels.
    </para>

  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
There is one required argument, $type. Other arguments depend on the value
of the $type argument.
      <variablelist>
        <varlistentry>
          <term><replaceable>$type</replaceable></term>
          <listitem>
            <para>
A string indicating the desired formatting mode: 'data', 'time', 'printf',
or 'custom'. Or, an empty string meaning revert to no formatting.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'data', there are three optional arguments:
      <variablelist>
        <varlistentry>
          <term><replaceable>$precision</replaceable></term>
          <listitem>
            <para>
The formatting precision, or number of decimal places (optional).
If omitted, the default is 1.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$prefix</replaceable></term>
          <listitem>
            <para>
A prefix string to be placed before the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$suffix</replaceable></term>
          <listitem>
            <para>
A suffix string to be placed after the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'time', there is one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format</replaceable></term>
          <listitem>
            <para>
Formatting string, used with <function>strftime()</function>.
For example, '%Y-%m-%d' results in formatting a <literal>time_t</literal>
value as a year, month, and day numbers.
If omitted, the default is '%H:%M:%S' (hours, minutes, and seconds).
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'printf', there is one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format</replaceable></term>
          <listitem>
            <para>
Formatting string, used with <function>sprintf()</function>.
If omitted, the default value of '%e' uses scientific notation with default
field sizes.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'custom', there is one required argument and one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$callback</replaceable></term>
          <listitem>
            <para>
A callback function to format the label. This is either the name of a
function (as a string), or a two-element array with an object instance and
method name. (Refer to the PHP documentation for more information on the
callback type.) The callback will be called with two arguments: the value
of the label to be formatted, and the pass-through argument (see next).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$callback_arg</replaceable></term>
          <listitem>
            <para>
A pass-through argument for the callback function.
If omitted, NULL is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default formatting mode is to do no special formatting of the labels.
Strings will be output as-is, and numbers will be output using PHP's
default formatting.
If you need to change label formatting back to the default,
or to override a format type you set for tick labels and have no
formatting for data labels,
use SetYDataLabelType without arguments, or with an empty string argument.
    </para>
    <para>
When using a custom label formatting function, do not assume the labels are
formatted in any particular order, or only once each.
    </para>
  </refsect1>
  <refsect1>
    <title>Examples</title>
    <para>
See <xref linkend="SetXLabelType" />.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.1.0.
Through PHPlot-5.0.7, data labels and tick labels always used the same
formatting, as set with <xref linkend="SetYLabelType"/>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYLabelAngle">
  <refmeta>
    <refentrytitle>SetYLabelAngle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYLabelAngle</refname>
    <refpurpose>Set the text angle for Y tick labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYLabelAngle(<parameter>$yla</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYLabelAngle</function> sets the text angle for Y tick labels.
If using TrueType fonts, any angle can be used.
If using built-in GD fonts, only 0 degree and 90 degree text can be used.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$yla</replaceable></term>
        <listitem>
          <para>
Desired angle for label text, in degrees.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default text angle for Y labels is 0 degrees, for horizontal text.
    </para>
    <para>
This does not apply to Y data labels on bar and stacked bar charts.
For those, see <xref linkend="SetYDataLabelAngle"/>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYLabelType">
  <refmeta>
    <refentrytitle>SetYLabelType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYLabelType</refname>
    <refpurpose>Set formatting type for Y tick labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYLabelType(<parameter>$type</parameter>, <optional><parameter>...</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYLabelType</function> sets the formatting type for Y tick labels,
and the default formatting type for Y data labels.
(If <xref linkend="SetYDataLabelType"/> is never called,
<function>SetYLabelType</function> effectively sets the formatting type
for both Y tick labels and Y data labels.)
By default, there is no special formatting, so the labels are output as-is.
Available format types are 'data', 'time', 'printf', and 'custom'.
    </para>
    <para>
'data' formatting formats the labels as floating point numbers,
with digits grouped into thousands (3 digit groups),
and with user-defined precision
Grouping separator characters can be set with <xref linkend="SetNumberFormat" />.
The precision (number of digits after the decimal point) can be set with
<xref linkend="SetPrecisionY" />, or as an additional argument to SetYLabelType.
A prefix and suffix string can also be specified.
    </para>
    <para>
'time' formatting formats the labels as date/time values,
using a format specifier set by <xref linkend="SetYTimeFormat" />
or using an additional argument to SetYLabelType.
    </para>
    <para>
'printf' formatting formats the labels using the standard
<function>sprintf</function> function, with the format string specified
as an additional argument to SetYLabelType.
    </para>
    <para>
'custom' formatting formats the labels using a caller-provided function,
with an optional pass-through argument. This provides the maximum
flexibility in formatting labels.
    </para>

  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
There is one required argument, $type. Other arguments depend on the value
of the $type argument.
      <variablelist>
        <varlistentry>
          <term><replaceable>$type</replaceable></term>
          <listitem>
            <para>
A string indicating the desired formatting mode: 'data', 'time', 'printf',
or 'custom'. Or, an empty string meaning revert to no formatting.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'data', there are three optional arguments:
      <variablelist>
        <varlistentry>
          <term><replaceable>$precision</replaceable></term>
          <listitem>
            <para>
The formatting precision, or number of decimal places (optional).
If omitted, the value set with <xref linkend="SetPrecisionY" /> is used,
or if that was never called then the default is 1.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$prefix</replaceable></term>
          <listitem>
            <para>
A prefix string to be placed before the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$suffix</replaceable></term>
          <listitem>
            <para>
A suffix string to be placed after the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'time', there is one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format</replaceable></term>
          <listitem>
            <para>
Formatting string, used with <function>strftime()</function>.
For example, '%Y-%m-%d' results in formatting a <literal>time_t</literal>
value as a year, month, and day numbers.
If omitted, the value set with <xref linkend="SetYTimeFormat" /> is used,
or if that was never called then the default is '%H:%M:%S' (hours, minutes,
and seconds).
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'printf', there is one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format</replaceable></term>
          <listitem>
            <para>
Formatting string, used with <function>sprintf()</function>.
If omitted, the default value of '%e' uses scientific notation with default
field sizes.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'custom', there is one required argument and one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$callback</replaceable></term>
          <listitem>
            <para>
A callback function to format the label. This is either the name of a
function (as a string), or a two-element array with an object instance and
method name. (Refer to the PHP documentation for more information on the
callback type.) The callback will be called with two arguments: the value
of the label to be formatted, and the pass-through argument (see next).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$callback_arg</replaceable></term>
          <listitem>
            <para>
A pass-through argument for the callback function.
If omitted, NULL is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default formatting mode is to do no special formatting of the labels.
Strings will be output as-is, and numbers will be output using PHP's
default formatting.
If you need to change label formatting back to the default,
use SetYLabelType without arguments, or with an empty string argument.
    </para>
    <para>
A side effect of <xref linkend="SetPrecisionY" /> is to call this function
SetYLabelType and set the format type mode to 'data'.
Note that <xref linkend="SetYTimeFormat" /> does not have a corresponding
side effect on the format type.
    </para>
    <para>
When using a custom label formatting function, do not assume the labels are
formatted in any particular order, or only once each.
    </para>
  </refsect1>
  <refsect1>
    <title>Examples</title>
    <para>
See <xref linkend="SetXLabelType" />.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, this function set the format type for both Y tick
labels and Y data labels.
Starting with PHPlot-5.1.0, a new function <xref linkend="SetYDataLabelType"/>
was added to allow separate control of tick and data labels.
<function>SetYLabelType</function> now sets the format type for Y tick labels,
and the default format type for Y data labels.
    </para>
    <para>
New label format types 'printf' and 'custom' were added at PHPlot-5.0.6, 
as well as all arguments after the first. In PHPlot-5.0.5 and earlier, you
must use SetYTimeFormat and SetPrecisionY to set the formatting parameters.
Starting with PHPlot-5.0.6, you have the choice of using those, or
providing additional arguments to SetYLabelType.
Also added was the ability to add a prefix and suffix to 'data' formatted
labels. In PHPlot-5.0.5 and earlier, there was an undocumented class variable 
<parameter>data_units_text</parameter> that was applied as a suffix to 'data'
mode labels, for both X and Y. This continues to work, but is deprecated.
    </para>
    <para>
Starting with PHPlot-5.0.6, you can use an empty string or no argument at all
to reset to the default of no formatting.
    </para>
    <para>
Through PHPlot-5.0rc3, when the formatting mode is 'data'
the thousands grouping separator was always a comma,
and a period was used as a decimal point.
Starting with 5.0.4, PHPlot attempts to get the correct values for your
locale.  You can set the separator characters yourself instead with
<xref linkend="SetNumberFormat" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYScaleType">
  <refmeta>
    <refentrytitle>SetYScaleType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYScaleType</refname>
    <refpurpose>Select linear or logarithmic scale</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYScaleType(<parameter>$st</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYScaleType</function> sets the scale type along the Y axis 
to be either linear (the default) or logarithmic.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$st</replaceable></term>
        <listitem>
          <para>
A string specifying the scale type: 'linear' or 'log'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
No Y value may be less than or equal to 0 with logarithmic Y scale.
    </para>
    <para>
Support for logarithmic scales in PHPlot is limited. One problem is that
tick interval is fixed for the entire range of data, which is inappropriate
for logarithmic scales where the data spans more than one magnitude.
    </para>
    <para>
The default X and Y scale types are linear.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTickCrossing">
  <refmeta>
    <refentrytitle>SetYTickCrossing</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTickCrossing</refname>
    <refpurpose>Set crossing length of Y tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYTickCrossing(<parameter>$yc</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTickCrossing</function> sets the length by which the Y tick
marks cross the Y axis or plot border (depending on the tick position
set with <xref linkend="SetYTickPos" />) pointing inwards.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$yc</replaceable></term>
        <listitem>
          <para>
Desired X tick crossing length in pixels.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default tick crossing length is 3 pixels.
    </para>
    <para>
See figure under <xref linkend="SetXTickCrossing" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTickIncrement">
  <refmeta>
    <refentrytitle>SetYTickIncrement</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTickIncrement</refname>
    <refpurpose>Set the step between Y ticks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYTickIncrement(<parameter>$ti</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTickIncrement</function> sets the interval between Y tick
marks.
You can use either this function or <xref linkend="SetNumYTicks" />
(but not both) to control the tick mark spacing.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ti</replaceable></term>
        <listitem>
          <para>
Desired tick interval, in world coordinates.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If neither <function>SetYTickIncrement</function> nor 
<xref linkend="SetNumYTicks" /> is used, the tick mark interval
is calculated as 1/10th of the Y data range.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTickLabelPos">
  <refmeta>
    <refentrytitle>SetYTickLabelPos</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTickLabelPos</refname>
    <refpurpose>Position the Y tick labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYTickLabelPos(<parameter>$ytlp</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTickLabelPos</function> determines where (and if) the
Y tick labels are drawn. The labels can be drawn on the left side of the plot,
on the right side of the plot, in both positions, at the Y axis (even if it is
in the middle of the plot), or not drawn at all.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ytlp</replaceable></term>
        <listitem>
          <para>
A string indicating the desired position for the Y tick labels:
            <informaltable>
              <tgroup cols="2">
                <?dbhtml table-summary="Y tick label position choices"?>
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotleft</entry>
                    <entry>Tick labels on the left side of the plot</entry>
                  </row>
                  <row>
                    <entry>plotright</entry>
                    <entry>Tick labels on the right side of the plot</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>Tick labels on both left and right sides of the
                       plot</entry>
                  </row>
                  <row>
                    <entry>yaxis</entry>
                    <entry>Tick labels at Y axis (even if the axis is in
                      the middle of the plot)</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No tick labels</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default position for the Y tick labels is on the left side of the plot.
    </para>
    <para>
This applies only to tick labels.
You may want the tick marks to be in the same positions as the tick
labels.  To position the tick marks, see <xref linkend="SetYTickPos" />.
    </para>
    <para>
Unlike the X axis, which is by default drawn at Y=0, the Y axis is by
default drawn at the left side of the plot, not at X=0.
It can be moved to a different position with <xref linkend="SetYAxisPosition" />.
If it isn't moved, 'yaxis' and 'plotleft' positions are the same.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTickLength">
  <refmeta>
    <refentrytitle>SetYTickLength</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTickLength</refname>
    <refpurpose>Set outer length of Y tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYTickLength(<parameter>$yln</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTickLength</function> sets the length of the Y tick marks
pointing outwards from the plot. For example, for tick marks on a Y axis
on the left side of the plot, this is the length from the axis to the left.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$yln</replaceable></term>
        <listitem>
          <para>
Desired Y tick length in pixels.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default tick length is 5 pixels.
    </para>
    <para>
See figure under <xref linkend="SetXTickCrossing" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTickPos">
  <refmeta>
    <refentrytitle>SetYTickPos</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTickPos</refname>
    <refpurpose>Position the Y axis tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYTickPos(<parameter>$tp</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTickPos</function> determines where (and if) the
Y tick marks are drawn. The tick marks can be drawn on the left side of the
plot, on the right side the plot, in both positions, at the Y axis (even if
it is in the middle of the plot), or not drawn at all.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$tp</replaceable></term>
        <listitem>
          <para>
A string indicating the desired position for the Y tick marks:
            <informaltable>
              <tgroup cols="2">
                <?dbhtml table-summary="Y tick position choices"?>
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotleft</entry>
                    <entry>Tick marks on the left side of the plot</entry>
                  </row>
                  <row>
                    <entry>plotright</entry>
                    <entry>Tick marks on the right side of the plot</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>Tick marks on both left and right sides of the
                       plot</entry>
                  </row>
                  <row>
                    <entry>yaxis</entry>
                    <entry>Tick marks at Y axis (even if the axis is in
                      the middle of the plot)</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No tick marks</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default position for the Y tick marks is on the left side of the plot.
    </para>
    <para>
This applies only to tick marks.
You may want the tick labels to be in the same positions as the tick
marks.  To position the tick labels, see <xref linkend="SetYTickLabelPos" />.
    </para>
    <para>
Unlike the X axis, which is by default drawn at Y=0, the Y axis is by
default drawn at the left side of the plot, not at X=0.
It can be moved to a different position with <xref linkend="SetYAxisPosition" />.
If it isn't moved, 'yaxis' and 'plotleft' positions are the same.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTimeFormat">
  <refmeta>
    <refentrytitle>SetYTimeFormat</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTimeFormat</refname>
    <refpurpose>Set date/time formatting string for Y labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYTimeFormat(<parameter>$ytf</parameter>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTimeFormat</function> sets the formatting string for Y tick
and data labels when 'time' formatting mode for Y labels is in effect.
(Y data labels are only available with bar charts and stacked bar charts.)
Use <xref linkend="SetYLabelType" /> to select the formatting mode for labels.
The formatting string is used with the PHP <function>strftime</function>
to format labels as date/time strings.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ytf</replaceable></term>
        <listitem>
          <para>
Formatting string for Y labels, used with <function>strftime()</function>.
For example, if the label value is 1104534000 (which is the
<literal>time_t</literal> representation of 6:00 PM on the last day of 2004),
'%Y-%m-%d.%H:%M:%S' results in '2004-12-31.18:00:00',
and '%d %b %Y' results in '31 Dec 2004'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This applies to Y tick labels, and to Y data labels on bar charts and
stacked bar charts.
To use date/time formatting, the label values must be Unix time_t
values (number of seconds since Unix epoch).
    </para>
    <para>
Unlike <xref linkend="SetPrecisionY" />, SetYTimeFormat does not
automatically enable the correct label formatting mode. You
must call <literal>SetYLabelType('time')</literal> to use date/time
formatting of labels.
    </para>
    <para>
The default time format is '%H:%M:%S', showing hours, minutes, and seconds
(and ignoring any date information).
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-5.0.6, the time format can be set with
<xref linkend="SetYLabelType" /> instead.
    </para>
    <para>
The default time format was undefined prior to PHPlot-5.0rc3.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTitle">
  <refmeta>
    <refentrytitle>SetYTitle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTitle</refname>
    <refpurpose>Sets the Y axis title, and optionally its position</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>
$plot-&gt;SetYTitle(<parameter>$ytitle</parameter>, <optional><parameter>$ypos</parameter></optional>)
    </synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTitle</function> sets the text to be displayed as the Y axis
title. Optionally, it also sets the position of the title and the axis
itself: on the left side of the graph (the usual place), on the right side,
both, or neither.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ytitle</replaceable></term>
        <listitem>
          <para>
The text string to use for the Y axis title.
The string can contain multiple lines, separated by newlines (in PHP: "\n").
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$ypos</replaceable></term>
        <listitem>
          <para>
Optional position for the Y axis and title. Use one of the following
strings for the position:
            <informaltable>
              <tgroup cols="2">
                <?dbhtml table-summary="Y axis position choices"?>
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotleft</entry>
                    <entry>Y axis on the left side of the plot</entry>
                  </row>
                  <row>
                    <entry>plotright</entry>
                    <entry>Y axis on the right side of the plot</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>One Y axis on the left, and one on the right</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No Y axis, no Y axis title</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
The default is 'plotleft'.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>
</refentry>

</reference>
