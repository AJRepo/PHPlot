<!-- $Id$
     Reference section for PHPlot Reference Manual

  Note: Part I is <part>, Part II is a <reference>, so force the label.
-->
<reference label="II" id="reference">
<title>PHPlot Function Reference</title>

<partintro id="refintro">
<abstract><title></title>
  <para>
This part of the PHPlot Reference Manual
contains the reference information for the PHPlot functions.
Note that all the functions (except the class constructor) are implemented
as methods of the class PHPlot, and are therefore called through an object
which is an instance of the class. In this text, <literal>$plot</literal> is
used to represent an instance of the PHPlot class.
  </para>
</abstract>
</partintro>

<refentry id="DrawGraph">
  <refmeta>
    <refentrytitle>DrawGraph</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>DrawGraph</refname>
    <refpurpose>Draw the current graph onto the image</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;DrawGraph()</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>DrawGraph</function> actually draws the current graph onto the
image. That is, until DrawGraph is used, nothing happens except the
recording of settings and data.
DrawGraph also outputs the image with <xref linkend="PrintImage" />,
unless <xref linkend="SetPrintImage" /> was used.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
None
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
After using <function>DrawGraph</function> and automatic or subsequent
output of the image, the PHPlot object should not be reused.
    </para>
  </refsect1>

</refentry>

<refentry id="DrawMessage">
  <refmeta>
    <refentrytitle>DrawMessage</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>DrawMessage</refname>
    <refpurpose>Draw a text message on the image, discarding the plot</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;DrawMessage(<parameter>$text</parameter>, <optional><parameter>$options</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>DrawMessage</function> draws a text message on the image,
effectively replacing the plot with a message. It can be used instead of
<xref linkend="DrawGraph"/> to handle an application-level error condition,
for example.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$text</replaceable></term>
        <listitem>
          <para>
The text message to display. This can include newlines, which will result
in line breaks.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$options</replaceable></term>
        <listitem>
          <para>
Optional associative array of settings to control the appearance of the
message image.  If missing or empty, the defaults result in small black
text on a white background, with word wrapping.  If provided, the options
array may contain the following keys and values:
            <informaltable>
              <tgroup cols="3">
                <?dbhtml table-summary="DrawMessage options"?>
                <colspec colname="c1" colwidth="30*" />
                <colspec colname="c2" colwidth="30*" />
                <colspec colname="c3" colwidth="40*" />
                <thead>
                  <row>
                    <entry>Option name (array key)</entry>
                    <entry>Default value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>draw_background</entry>
                    <entry>False</entry>
                    <entry>If true, draw the image background</entry>
                  </row>
                  <row>
                    <entry>draw_border</entry>
                    <entry>False</entry>
                    <entry>If true, draw the image border</entry>
                  </row>
                  <row>
                    <entry>force_print</entry>
                    <entry>True</entry>
                    <entry>If true, ignore SetPrintImage(False) and always
                         output</entry>
                  </row>
                  <row>
                    <entry>reset_font</entry>
                    <entry>True</entry>
                    <entry>If true, reset fonts to standard sizes and type</entry>
                  </row>
                  <row>
                    <entry>text_color</entry>
                    <entry>''</entry>
                    <entry>If not empty, color to use for the text</entry>
                  </row>
                  <row>
                    <entry>text_wrap</entry>
                    <entry>True</entry>
                    <entry>If true, word-wrap the text</entry>
                  </row>
                  <row>
                    <entry>wrap_width</entry>
                    <entry>75</entry>
                    <entry>Width in characters for word-wrapping the text</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default option values are chosen to be appropriate for error messages,
and are designed to be 'fail-safe'. (For example, resetting fonts to use
the built-in GD fonts ensures that there will be no error with TrueType
font files while displaying an error message.)
    </para>

    <para>
If the <literal>draw_background</literal> option is <literal>False</literal>
or defaulted, the image will have a white background.
If <literal>draw_background</literal> is <literal>True</literal>,
then the image will have a background as specified by prior calls to
<xref linkend="SetBackgroundColor"/> or <xref linkend="SetBgImage"/>.
If neither of those has been called before <function>DrawMessage</function>,
then the background will be white regardless of the
<literal>draw_background</literal> option value.
Note that if an input file was given to the PHPlot constructor to set a
background, that will not be used with a message image, regardless of the
options.
    </para>

    <para>
If the <literal>draw_border</literal> option is <literal>False</literal>
or defaulted, no border will be drawn.
If <literal>draw_border</literal> is <literal>True</literal>,
then the the image will have a border as specified by prior calls to
<xref linkend="SetImageBorderType"/>, <xref linkend="SetImageBorderWidth"/>,
and <xref linkend="SetImageBorderColor"/>.
Note that if <function>SetImageBorderType</function> was not used to enable
a border before <function>DrawMessage</function>, then there will be no border,
regardless of the <literal>draw_border</literal> option value.
    </para>

    <para>
The message text will be drawn using the PHPlot <literal>generic</literal>
font settings.
But if the <literal>reset_font</literal> option is <literal>True</literal>
or defaulted, all fonts will be reset to defaults first,
resulting in the use of GD font #2 (a small monospaced font).
If <literal>reset_font</literal> is <literal>False</literal>,
the <literal>generic</literal> font settings will be used without reset.
Use <xref linkend="SetFont"/>, <xref linkend="SetFontGD"/>, or
<xref linkend="SetFontTTF"/> in this case to select the font.
For example, to use a TrueType font for your message, call
<literal>$plot-&gt;SetFontTTF('generic', $font_name, $font_size)</literal>,
then set the <literal>reset_font</literal> option to <literal>False</literal>
when calling <function>DrawMessage()</function>.
    </para>

    <para>
If the <literal>text_color</literal> option is empty or defaulted,
the text will be black. To use a different color for the message text,
set <literal>text_color</literal> to any valid PHPlot color specification,
such as a color name or "#rrggbb" form
(see <xref linkend="conc-colors-forms"/>).
    </para>

    <para>
If the <literal>force_print</literal> option is <literal>True</literal> or
defaulted, the message image will be output after creating it - ignoring
any setting made with <xref linkend="SetPrintImage"/>.
If <literal>force_print</literal> is <literal>False</literal>,
and <function>SetPrintImage(False)</function> was previously called,
the message image will created but not output.
This would be appropriate when using <xref linkend="PrintImage"/> or
<xref linkend="EncodeImage"/> to output the image.
Note that if <function>SetPrintImage(False)</function> was not called,
the image will be output regardless of the <literal>force_print</literal>
option value.
    </para>

    <para>
The text may contain newlines, which will produce separate lines of text
in the message image.
The text will be word-wrapped (unless the <literal>text_wrap</literal>
option is set to <literal>False</literal>).
Each line of text will be left aligned, and the bounding box
of the text will be centered in the image. PHPlot makes no attempt to make
sure the text will fit, but the upper left corner will always be visible.
    </para>

    <para>
After using <function>DrawMessage</function> and automatic or subsequent
output of the image, the PHPlot object should not be reused.
    </para>

    <para>
See <xref linkend="ex-drawmessage"/> for an example of this function.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.7.0.
    </para>
  </refsect1>

</refentry>

<refentry id="EncodeImage">
  <refmeta>
    <refentrytitle>EncodeImage</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>EncodeImage</refname>
    <refpurpose>Returns the plot image data</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;EncodeImage(<optional><parameter>$encoding</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>EncodeImage</function> returns the plot image as a string, using
one of three encodings. This function can be used when special processing
of the plot image data is necessary, rather than the default behavior of
sending the image via standard output (usually to a browser), or writing it
to a file. In particular, <function>EncodeImage</function> can be used to
embed a PHPlot image inside an HTML file without requiring a separate script.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$encoding</replaceable></term>
        <listitem>
          <para>
Optional string indicating the encoding to use for the return value. If
supplied, it must be one of the following values:
            <informaltable>
              <tgroup cols="2">
                <?dbhtml table-summary="Available encoding types"?>
                <colspec colname="c1" colwidth="20*" />
                <colspec colname="c2" colwidth="80*" />
                <thead>
                  <row>
                    <entry>Encoding</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>raw</entry>
                    <entry>
                       No encoding - the raw data representing the image
                       is returned.
                    </entry>
                  </row>
                  <row>
                    <entry>base64</entry>
                    <entry>
                       Encodes the image data using base64 (RFC2045).
                    </entry>
                  </row>
                  <row>
                    <entry>dataurl</entry>
                    <entry>
                       Encodes the image data for a 'data:' URL scheme.
                       This is the default. See notes below.
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Return Value</title>
    <para>
Returns the image data, using the indicated encoding.
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default value for <parameter>$encoding</parameter> is
<literal>dataurl</literal>.
    </para>
    <para>
<literal>raw</literal> encoding returns the image data. If the image file
format was set to the default PNG, the return result would be a valid PNG
file if it was written to a file.
    </para>
    <para>
<literal>base64</literal> encoding starts with the same data as
<literal>raw</literal>, and encodes it as ASCII characters using the PHP
function <function>base64_encode</function> and returns the result.
Note that the result is not broken into lines, as required by some applications.
Use the PHP function <function>chunk_split</function> if this is needed.
    </para>
    <para>
<literal>dataurl</literal> encoding returns the image data suitable for use as
the value of the 'src' attribute in an HTML 'img' tag using the data URL
scheme.  This embeds the image into the HTML, and so it does not require
an external image file.  The data URL scheme is defined by
<ulink url="http://www.faqs.org/rfcs/rfc2397.html">RFC 2397</ulink>.
      <warning>
        <para>
RFC 2397 makes it clear that the scheme is intended for embedding small images,
and that there may be length limitations on the encoded data. However, there
are other applications (for example LibreOffice) that use the data URL scheme
for large images. While it has been found to work with large images in the
major web browsers, testing in your own environment is recommended.
        </para>
      </warning>
    </para>
    <para>
When using <function>EncodeImage</function> to get the plot image, rather
than letting PHPlot output the image to standard output or a file, you must
call <xref linkend="SetPrintImage"/><literal>(False)</literal> to prevent
<xref linkend="DrawGraph"/> from sending the image data to standard output.
You should also call <xref linkend="SetFailureImage"/><literal>(False)</literal>
to prevent PHPlot from producing an unexpected image on standard output in
case of a fatal error.
    </para>
    <para>
An example of using the <literal>dataurl</literal> encoding is:
<programlisting><![CDATA[$plot = new PHPlot(800, 600);
$plot->SetPrintImage(False);  // Do not output the image
... // Plot settings, data, etc.
$plot->DrawGraph();  // Make the plot but do not output it
echo "<img src=\"" . $plot->EncodeImage() . "\">\n";
]]></programlisting>
    </para>
    <para>
A more complete example can be found in <xref linkend="ex-encodeimage"/>.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.5.0.
    </para>
  </refsect1>
</refentry>

<refentry id="EndStream">
  <refmeta>
    <refentrytitle>EndStream</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>EndStream</refname>
    <refpurpose>End a Motion-JPEG (or other type) plot stream</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;EndStream()</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>EndStream</function> is used to end a plot stream, started
with <xref linkend="StartStream"/> and containing frames produced by
<xref linkend="PrintImageFrame"/>.
This function simply outputs the ending MIME boundary for the stream.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
None
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The three functions <xref linkend="StartStream"/>,
<xref linkend="PrintImageFrame"/>, and <function>EndStream</function>
are used together to produce streaming plots.
Scripts producing streaming plots must use a web server.
The PHP CLI will not work, because streaming plots require HTTP headers.
    </para>
    <para>
For more on streaming plots, see <xref linkend="adv-streaming"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>Example</title>
    <para>
See <xref linkend="PrintImageFrame"/> for a partial example, and
<xref linkend="adv-streaming-example"/> for the complete example.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.8.0.
Prior releases are not able to produce streaming plots.
    </para>
  </refsect1>
</refentry>

<refentry id="GetCallback">
  <refmeta>
    <refentrytitle>GetCallback</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>GetCallback</refname>
    <refpurpose>Returns the current callback function registered for the given reason</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;GetCallback(<parameter>$reason</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>GetCallback</function> returns the current callback function
registered for the given reason.
That is, it returns the function argument value used when a callback
function was registered with <xref linkend="SetCallback"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$reason</replaceable></term>
        <listitem>
          <para>
A PHPlot-defined name for the callback.
See <xref linkend="callbacks-names" />.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Return Value</title>
    <para>
Returns the function name as a string, or a 2-element array
for object instance and method calls.
Returns False if there is no callback registered for this reason,
or if the given reason is not valid.
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Since no valid function name (or array of object instance and method)
evaluates to false when directly tested, it is not necessary to check
using the identical-to (===) operator.
    </para>
    <para>
Refer to <xref linkend="callbacks"/> for more information on callbacks.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function and the callbacks implementation were added in PHPlot-5.0.4
as an experimental feature. Callbacks were first documented in this manual
as of PHPlot-5.0.5 and are no longer considered experimental.
    </para>
  </refsect1>
</refentry>

<refentry id="GetDeviceXY">
  <refmeta>
    <refentrytitle>GetDeviceXY</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>GetDeviceXY</refname>
    <refpurpose>Translate world coordinates into device coordinates</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>list($x, $y) = $plot-&gt;GetDeviceXY(<parameter>$x_world</parameter>, <parameter>$y_world</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>GetDeviceXY</function> translates values in
<link linkend="def-worldcoor">world coordinates</link> into
values in <link linkend="def-devcoor">device coordinates</link>.
This is useful if you want to annotate a plot with text or graphics
positioned relative to specific data values. Given the coordinates of a
point in the coordinate space of your data values, this function returns
the pixel coordinates of that point in the image.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$x_world</replaceable></term>
        <listitem>
          <para>
The X coordinate to translate from world coordinates.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$y_world</replaceable></term>
        <listitem>
          <para>
The Y coordinate to translate from world coordinates.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Return Value</title>
    <para>
Returns an array of two values ($x, $y) in device coordinates which
correspond to the world coordinate parameters.
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This function only works after scaling factors have been established, which
happens in <xref linkend="DrawGraph"/>. So it can only be used in two cases:
      <itemizedlist>
        <listitem>
          <para>
From a drawing callback (see <xref linkend="callbacks"/>) - that is, a
callback whose name starts with 'draw'.
          </para>
        </listitem>
        <listitem>
          <para>
If <xref linkend="SetPrintImage"/>(False) is used to disable automatic
output of the image file, then <function>GetDeviceXY()</function> can be
used after <xref linkend="DrawGraph"/> returns.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
<function>GetDeviceXY()</function> will fail with an error message if it
is called before scaling is set up.
    </para>
    <para>
If the world coordinates represent a point that is not visible on the plot,
the returned device coordinates will be outside the plot area, or even
outside the image area.
    </para>
    <para>
To see how this can be used in callbacks,
see <xref linkend="callbacks-drawing"/>.
    </para>
    <para>
Because there are no valid world coordinates for pie charts,
<function>GetDeviceXY()</function> does not work with pie charts.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-5.6.0, this function will fail with pie charts, because
they do not have valid world coordinates. Through PHPlot-5.5.0, this
function returned somewhat meaningless values when used with pie charts.
    </para>
    <para>
This function was added in PHPlot-5.1.0.
    </para>
  </refsect1>
</refentry>

<refentry id="GetLegendSize">
  <refmeta>
    <refentrytitle>GetLegendSize</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>GetLegendSize</refname>
    <refpurpose>Return the amount of space required for the legend box</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>list($width, $height) = $plot-&gt;GetLegendSize()</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>GetLegendSize</function> returns the size (in pixels) required
for the legend box. This might be used to adjust the plot margins based on
the legend size, for example. After calling <function>GetLegendSize</function>,
you can use <xref linkend="SetPlotAreaWorld"/> or
<xref linkend="SetMarginsPixels"/> to leave room for the legend.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
None
    </para>
  </refsect1>

  <refsect1>
    <title>Return Value</title>
    <para>
Returns an array of two values ($width, $height). These are the width and
height required for the box containing the legend.
Returns FALSE if no legend has been defined.
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This function will return valid numbers after the legend has been set up
(including using <xref linkend="SetLegend"/> to set all the text lines,
and optional calls to set the font, linespacing, and style).
The results from this function do not depend on data values, plot type, or
other plot elements.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-6.0.0, the function returns FALSE if no legend has
been defined yet. (In previous versions, the result was undefined if there
was no legend defined.)
    </para>
    <para>
This function was added in PHPlot-5.4.0.
    </para>
  </refsect1>
</refentry>

<refentry id="PHPlot">
  <refmeta>
    <refentrytitle>PHPlot</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>PHPlot</refname>
    <refpurpose>Construct a new PHPlot Class Object</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot = new PHPlot(<optional><parameter>$width</parameter></optional>, <optional><parameter>$height</parameter></optional>, <optional><parameter>$output_file</parameter></optional>, <optional><parameter>$input_file</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
This is the class constructor for PHPlot. It creates a new plot object and
initializes all internal settings to default values.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$width</replaceable></term>
        <listitem>
          <para>
Optional width of the plot image, in pixels. Default is 600.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$height</replaceable></term>
        <listitem>
          <para>
Optional height of the plot image, in pixels. Default is 400.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$output_file</replaceable></term>
        <listitem>
          <para>
Optional name of a file where the image output will be written.
This is the same as using <xref linkend="SetOutputFile" />.
Default is no output file, meaning the image is written to standard output
(that is, sent back to the browser).
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$input_file</replaceable></term>
        <listitem>
          <para>
Optional name of a file to use as a starting image. This becomes the
background for the plot.  If an input_file is given, any width and height
given to the constructor are ignored, and the size of the image in the
named input_file are the plot image size.  Default is no input file,
meaning a blank image will be created at the given or default width and
height.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Return Value</title>
    <para>
Returns an object, an instance of the PHPlot class.
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The output_file will be ignored unless <xref linkend="SetIsInline" />(True) is
called.
    </para>
    <para>
If no input_file is supplied, the PHPlot constructor creates
a <link linkend="def-palette">palette</link> plot image,
and the <xref linkend="PHPlot-truecolor"/> constructor creates
a <link linkend="def-truecolor">truecolor</link> plot image.
If an input_file is supplied, the two constructors are equivalent, and the
type of the input file (truecolor or palette) determines the type of the
plot image.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Earlier versions of this manual said that the created object should always
be returned as a reference, like this:
      <programlisting><![CDATA[$plot =& new PHPlot(...);  // Do not use this
]]></programlisting>
This was because PHPlot included a function to deallocate memory used by
the object at script shutdown, but that would only work if a reference
assignment was used. This quasi-destructor was removed at PHPlot-5.0.4
because it interfered with memory deallocation until the script ended.
So the reference assignment should not be used.
In addition, reference assignment of a newly created object instance
is deprecated starting with PHP5, and removed in PHP7.
    </para>
  </refsect1>
</refentry>

<refentry id="PHPlot-truecolor">
  <refmeta>
    <refentrytitle>PHPlot_truecolor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>PHPlot_truecolor</refname>
    <refpurpose>Construct a new PHPlot Truecolor Class Object</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot = new PHPlot_truecolor(<optional><parameter>$width</parameter></optional>, <optional><parameter>$height</parameter></optional>, <optional><parameter>$output_file</parameter></optional>, <optional><parameter>$input_file</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
This is the constructor for the PHPlot_truecolor class, which is an
extended class that inherits from the PHPlot class. Like the PHPlot class,
it creates a new plot object and initializes all internal settings to
default values, but the resulting image will be a
<link linkend="def-truecolor">truecolor</link> image, rather than a
<link linkend="def-palette">palette</link> image.
(See the notes below regarding an exception to this rule.)
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$width</replaceable></term>
        <listitem>
          <para>
Optional width of the plot image, in pixels. Default is 600.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$height</replaceable></term>
        <listitem>
          <para>
Optional height of the plot image, in pixels. Default is 400.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$output_file</replaceable></term>
        <listitem>
          <para>
Optional name of a file where the image output will be written.
This is the same as using <xref linkend="SetOutputFile" />.
Default is no output file, meaning the image is written to standard output
(that is, sent back to the browser).
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$input_file</replaceable></term>
        <listitem>
          <para>
Optional name of a file to use as a starting image. This becomes the
background for the plot.  If an input_file is given, any width and height
given to the constructor are ignored, and the size of the image in the
named input_file are the plot image size.  Default is no input file,
meaning a blank image will be created at the given or default width and
height.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Return Value</title>
    <para>
Returns an object, an instance of the PHPlot_truecolor class, which
inherits all the functions (methods) of the PHPlot class.
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Refer to <xref linkend="PHPlot"/> for the base class constructor. Refer to
<xref linkend="adv-truecolor"/> for more information on truecolor images.
    </para>
    <para>
The output_file will be ignored unless <xref linkend="SetIsInline" />(True) is
called.
    </para>
    <para>
If no input_file is supplied, the PHPlot_truecolor constructor creates
a <link linkend="def-truecolor">truecolor</link> plot image,
and the <xref linkend="PHPlot"/> constructor creates
a <link linkend="def-palette">palette</link> plot image.
If an input_file is supplied, the two constructors are equivalent, and the
type of the input file (truecolor or palette) determines the type of the
plot image.
    </para>
    <para>
The type of the plot image (truecolor or palette) might not be the same as
the type of output file or stream which is generated by PHPlot. For
example, a truecolor image is converted to palette if the output
format (as set with <xref linkend="SetFileFormat"/>) is GIF, which supports
only palette images. A palette image is converted to truecolor if the
output format is JPEG, which supports only truecolor images.
More information can be found in <xref linkend="adv-truecolor-fileformats"/>.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
The PHPlot_truecolor class and its constructor were added in PHPlot-5.1.1.
For that release only, there was a greater dependency between which
constructor was used and which features were available, but this was
removed in the next release.
    </para>
  </refsect1>
</refentry>

<refentry id="PrintImage">
  <refmeta>
    <refentrytitle>PrintImage</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>PrintImage</refname>
    <refpurpose>Output the generated graph image and clean up the
internal storage space.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;PrintImage()</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>PrintImage</function> outputs the generated graph image and
cleans up the internal storage space used.
Output goes to the browser by default, or to the output file set by
<xref linkend="SetOutputFile" />.
    </para>
    <para>
Using PrintImage is not normally needed,
since <xref linkend="DrawGraph" /> calls PrintImage unless it was
told not to using <xref linkend="SetPrintImage" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
None
    </para>
  </refsect1>
</refentry>

<refentry id="PrintImageFrame">
  <refmeta>
    <refentrytitle>PrintImageFrame</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>PrintImageFrame</refname>
    <refpurpose>Output the generated plot as one frame in a plot stream</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;PrintImageFrame()</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>PrintImageFrame</function> is used to output (that is, send to
the browser) a single plot in a plot stream.
This function is similar to <xref linkend="PrintImage"/>, except that the
image is preceded by MIME headers that indicate it is part of a stream.
Also, after producing the plot, <function>PrintImageFrame()</function> changes
the PHPlot object so that a new plot can be drawn using the same object.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
None
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The three functions <xref linkend="StartStream"/>,
<function>PrintImageFrame</function>, and <xref linkend="EndStream"/>
are used together to produce streaming plots.
Scripts producing streaming plots must use a web server.
The PHP CLI will not work, because streaming plots require HTTP headers.
    </para>
    <para>
<function>PrintImageFrame</function> resets internal flags in the PHPlot
object that will result in the next plot starting with a blank background,
just like the initial plot in the series. It does not change any of the
plot settings.
    </para>
    <para>
For more on streaming plots, see <xref linkend="adv-streaming"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>Example</title>
    <para>
This is a partial example showing how the 3 functions are used to produce
streaming plots. See <xref linkend="adv-streaming-example"/> for the
complete example.
      <programlisting><![CDATA[$plot = new PHPlot(640, 480);
...
$plot->SetPrintImage(False);
$plot->StartStream();
$timestamp = microtime(TRUE);
for ($frame = 0; $frame < $n_frames; $frame++) {
    array_shift($data);
    $data[] = next_row();
    $plot->SetDataValues($data);
    $plot->DrawGraph();
    $plot->PrintImageFrame();
    time_sleep_until($timestamp += $frame_time);
}
$plot->EndStream();]]></programlisting>
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.8.0.
Prior releases are not able to produce streaming plots.
    </para>
  </refsect1>
</refentry>

<refentry id="RemoveCallback">
  <refmeta>
    <refentrytitle>RemoveCallback</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>RemoveCallback</refname>
    <refpurpose>Unregisters any callback registered for the given reason</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;RemoveCallback(<parameter>$reason</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>RemoveCallback</function> unregisters any callback registered
for the given reason.
It undoes the effect of <xref linkend="SetCallback"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$reason</replaceable></term>
        <listitem>
          <para>
A PHPlot-defined name for the callback.
See <xref linkend="callbacks-names" />.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Return Value</title>
    <para>
Returns True if the given reason is valid (whether or not
there was actually a callback registered for it).
Returns False if reason is not a valid callback reason.
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Refer to <xref linkend="callbacks"/> for more information on callbacks.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function and the callbacks implementation were added in PHPlot-5.0.4
as an experimental feature. Callbacks were first documented in this manual
as of PHPlot-5.0.5 and are no longer considered experimental.
    </para>
  </refsect1>
</refentry>

<refentry id="SetBackgroundColor">
  <refmeta>
    <refentrytitle>SetBackgroundColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetBackgroundColor</refname>
    <refpurpose>Sets the overall background color.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetBackgroundColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetBackgroundColor</function> sets the overall background
color. This is the color of the background of the whole image.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>


  <refsect1>
    <title>Notes</title>
    <para>
The default background color is white.
Background image overrides background color;
background color is ignored if a background image was set with
<xref linkend="SetBgImage" />.
    </para>
    <para>
The background color shows through in the plot area too, unless the plot
area background is changed with <xref linkend="SetPlotBgColor"/>
or <xref linkend="SetPlotAreaBgImage"/>.
    </para>
    <para>
The background color is used as the legend background, unless
<xref linkend="SetLegendBgColor"/> is used to change it.
    </para>
  </refsect1>
</refentry>

<refentry id="SetBgImage">
  <refmeta>
    <refentrytitle>SetBgImage</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetBgImage</refname>
    <refpurpose>Set a graphic file to be used in the graph background</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetBgImage(<parameter>$input_file</parameter>, <optional><parameter>$mode</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetBgImage</function> sets an image file to be used as the graph
background. The image can be scaled or tiled to fit.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$input_file</replaceable></term>
        <listitem>
          <para>
Path to the file to be used. The file can be any type allowed by GD, which
usually includes JPEG, GIF, and PNG.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$mode</replaceable></term>
        <listitem>
          <para>
Optional display mode for the background image: one of the strings
'centeredtile', 'tile', or 'scale'. The default is 'centeredtile'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If a background image has been set, background color (set with
<xref linkend="SetBackgroundColor" />) is ignored.
    </para>
    <para>
Scale mode scales the supplied background image file to fit the image area
of the entire graph.  Tile and centeredtile modes repeat the supplied
background image file as needed to fit the image area of the graph.  The
difference is that centeredtile offsets the start position within the
background image by half its size, which works better for some images.
    </para>
    <para>
SetBgImage sets a background for the entire image area, while
<xref linkend="SetPlotAreaBgImage" /> sets a background for
the plot area (generally, the area between the axes).
If both are used, the plot area background overlays that portion
of the overall background.
    </para>
    <para>
If <varname>$input_file</varname> is <literal>NULL</literal>, no background
image will be used.
    </para>
    <para>
If you are going to use a JPEG file for the image background, you should be
using a truecolor PHPlot image.  Truecolor images do not have a
limited-size color map like palette images (which PHPlot uses by default).
If you use  palette image with a JPEG background, the background will
likely overflow your image's color map and leave no free color slots for PHPlot
to use for plot elements.  The same is true if using a 24-bit color
(non-mapped) PNG file for a background if it has many colors.
For more on truecolor PHPlot images, see <xref linkend="adv-truecolor"/>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetBrowserCache">
  <refmeta>
    <refentrytitle>SetBrowserCache</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetBrowserCache</refname>
    <refpurpose>Control browser-side image caching</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetBrowserCache(<parameter>$browser_cache</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetBrowserCache</function> controls whether to allow the browser
to cache the image generated by PHPlot.
By default, PHPlot sends out HTTP headers to tell the browser not to cache
the generated image, since it is assumed that the image is generated from
dynamic data and a cached copy would not be accurate. You can use this
function to allow the browser to cache the image.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$browser_cache</replaceable></term>
        <listitem>
          <para>
True to allow the browser to cache the image; False to not allow the
browser to cache the image.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
</refentry>

<refentry id="SetCallback">
  <refmeta>
    <refentrytitle>SetCallback</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetCallback</refname>
    <refpurpose>Registers a callback function</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetCallback(<parameter>$reason</parameter>, <parameter>$function</parameter>, <optional><parameter>$arg</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetCallback</function> registers a callback function. That is, it
arranges for the caller-provided function to be called at a specific point
or points inside PHPlot's internal processing.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$reason</replaceable></term>
        <listitem>
          <para>
A PHPlot-defined name for the callback.
See <xref linkend="callbacks-names" />.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$function</replaceable></term>
        <listitem>
          <para>
The function to be called. This can be either the name of a function as a
string, or a two-element array with an object class instance and method name.
See <xref linkend="callbacks-api"/> for more information.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$arg</replaceable></term>
        <listitem>
          <para>
An optional opaque argument passed-through to the callback function when
PHPlot triggers the callback. If not supplied, the callback function will
get a NULL argument.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Return Value</title>
    <para>
Returns True if the callback has been registered.
Returns False on error. The only error condition is if the given callback
reason is not valid. Note that the function name is not validated until
the callback is triggered.
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If a callback is already registered for the given reason, the new callback
replaces the old one.
    </para>
    <para>
Refer to <xref linkend="callbacks"/> for more information on callbacks.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function and the callbacks implementation were added in PHPlot-5.0.4
as an experimental feature. Callbacks were first documented in this manual
as of PHPlot-5.0.5 and are no longer considered experimental.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDataBorderColors">
  <refmeta>
    <refentrytitle>SetDataBorderColors</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDataBorderColors</refname>
    <refpurpose>Set the data border colors</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDataBorderColors(<parameter>$border</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDataBorderColors</function> sets the colors used for data borders
on supported plot types.
For plot types <link linkend="plottype-bars">bars</link> and
<link linkend="plottype-stackedbars">stackedbars</link>,
these are the borders around the individual bars or bar segments in the plot.
For plot types
<link linkend="plottype-area">area</link>,
<link linkend="plottype-squaredarea">squaredarea</link>,
<link linkend="plottype-stackedarea">stackedarea</link>, and
<link linkend="plottype-stackedsquaredarea">stackedsquaredarea</link>,
these are outlines of the filled areas.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$border</replaceable></term>
        <listitem>
          <para>
An array of color values, one for the border of each data set.
Or, a single color value (not an array) to use for all data sets.
For other possibilities, see Notes.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$border</parameter>, it
must use zero-based sequential integer indexes.
    </para>
    <para>
If this function is never called, a default color map is used which sets all
data borders to black.
    </para>
    <para>
Data borders can be used with plot types <literal>bars</literal> and
<literal>stackedbars</literal>.
With these plot types, by default,
unshaded plots (<xref linkend="SetShading"/><literal>(0)</literal>)
have data borders, and shaded plots have a 3D-look and no data borders.
If you want unshaded plots with no data borders, use
<xref linkend="SetDrawDataBorders"/><literal>(FALSE)</literal> to disable
the borders.  You can enable data borders on shaded plots with
<xref linkend="SetDrawDataBorders"/><literal>(TRUE)</literal>.
    </para>
    <para>
Data borders can also be used with plot types
<literal>area</literal>,
<literal>squaredarea</literal>,
<literal>stackedarea</literal>, and
<literal>stackedsquaredarea</literal>.
With these plot types, by default, data borders are not drawn.
You can enable data borders for these plot types with
<xref linkend="SetDrawDataBorders"/><literal>(TRUE)</literal>.
    </para>
    <para>
The data border colors can also be used to outline the color boxes in a
legend. See <xref linkend="SetLegendColorboxBorders"/> for this option.
    </para>
    <para>
If <parameter>$border</parameter> is not an array, but a single color
value, then that color will be used for all data sets.
However, the array(r,g,b) notation is not allowed in
this case (because it looks like an array of 3 separate color values).
You can get around this restriction if you want to specify a single color 
as an R, G, B array by wrapping the array in another array, for example:
<literal>array(array(102, 0, 192))</literal>.
    </para>
    <para>
Two special uses of the <parameter>$border</parameter> argument
are available.
If the argument is an empty string, or boolean False, the color map is reset
to the defaults. This can be used to restore the default color map.
If the argument is NULL or missing from the function call, the color map is
reset to the defaults, but only if it has not already been set.
This is used internal to PHPlot for one-time initialization.
    </para>
    <para>
A data colors callback, as described in
<xref linkend="adv-datacolor-callback" />,
also controls selection of the color for data borders (if used).
Note this does not apply to plot types that do not use the data colors
callback.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-6.2.0, data borders are available with
<literal>area</literal> and <literal>stackedarea</literal> plot types,
and with the new
<literal>squaredarea</literal> and <literal>stackedsquaredarea</literal>
plot types.
    </para>
    <para>
Before PHPlot-6.0.0, unshaded bar and stackedbar plots always had data borders, 
and shaded bar and stackedbar plots never had data borders.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDataColors">
  <refmeta>
    <refentrytitle>SetDataColors</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDataColors</refname>
    <refpurpose>Set the colors for plotting data sets</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDataColors(<parameter>$data_colors</parameter>, <optional><parameter>$border</parameter></optional>, <optional><parameter>$default_alpha</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDataColors</function> sets the colors used for plotting the
data.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$data_colors</replaceable></term>
        <listitem>
          <para>
An array of color values, one for each data set.
Or, a single color value (not an array) to use for all data sets.
For other possibilities, see Notes.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$border</replaceable></term>
        <listitem>
          <para>
Argument provided for backward compatibility.
Use <xref linkend="SetDataBorderColors" /> instead.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$default_alpha</replaceable></term>
        <listitem>
          <para>
A default alpha value to apply to all data colors which do not have an alpha
value. This is generally useful only with Truecolor images.
A value of zero means opaque, and 127 means fully transparent.
See <xref linkend="adv-truecolor"/> for more information.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$data_colors</parameter>, it
must use zero-based sequential integer indexes.
    </para>
    <para>
Usually the <parameter>$data_colors</parameter> argument is an array of colors,
one for each data set to be plotted. For example:
      <programlisting><![CDATA[$plot->SetDataColors(array('red', 'green', 'blue'));
$plot->SetDataType('data-data');
$plot->SetDataValues(array( array('', 1, 4, 10, 5),
                            array('', 2, 6, 20, 3)));
]]></programlisting>
This will plot a red line from (1,4) to (2,6), a green line from (1,10) to
(2,20), and a blue line from (1,5) to (2,3).
    </para>
    <para>
If <parameter>$data_colors</parameter> is not an array, but a single color
value, then that color will be used for all data sets.
However, the array(r,g,b) notation is not allowed in
this case (because it looks like an array of 3 separate color values).
You can get around this restriction if you want to specify a single color 
as an R, G, B array by wrapping the array in another array, for example:
<literal>array(array(102, 0, 192))</literal>.
    </para>
    <para>
Two special uses of the <parameter>$data_colors</parameter> argument
are available.
If the argument is an empty string, or boolean False, the color map is reset
to the defaults. This can be used to restore the default color map.
If the argument is NULL or missing from the function call, the color map is
reset to the defaults, but only if it has not already been set.
This is used internal to PHPlot for one-time initialization.
    </para>
    <para>
If SetDataColors is never called, a default color map is used which
contains 16 colors starting with SkyBlue, green, orange, and blue.
For the full list, see <xref linkend="conc-colors-datacolors"/>.
By default, all colors are opaque (alpha=0).
    </para>
    <para><?dbfo keep-together="always"?>
You can keep the default color map but set all colors in it to use a
transparency (alpha) value like this:
<programlisting><![CDATA[$plot->SetDataColors(NULL, NULL, 60);
]]></programlisting>
This applies alpha=60 (meaning 60/127 transparency) to all the default
data colors.
    </para>
    <para>
You can control how the data colors array is used with a data colors callback.
See <xref linkend="adv-datacolor-callback" /> for more information.
    </para>

    <para>
Some plot types which only support a single data set still use multiple
data colors, but in a way that is specific to that plot type.  This is
described for each applicable plot type in <xref linkend="conc-plottypes"/>.
    </para>

  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
The optional <parameter>$default_alpha</parameter> argument was added in
PHPlot-5.1.1 when truecolor images were implemented.
    </para>
    <para>
Through PHPlot-5.0.7, the default color map contained these 8 colors:
SkyBlue, green, orange, blue, orange, red, violet, and azure1.
These were used if SetDataColors was never called.
Unfortunately, orange is used twice, and azure1 is so close to the white
background that it is invisible. Also, through PHPlot-5.0.7, if
SetDataColors was called with an empty string argument, the color map was
set to these 4 colors: blue red green orange.
Starting with PHPlot-5.1.0, a new default color map with 16 colors was
defined. Given an empty string (or False), SetDataColors now restores the
default color map.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDataLabelColor">
  <refmeta>
    <refentrytitle>SetDataLabelColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDataLabelColor</refname>
    <refpurpose>Set the color for data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDataLabelColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDataLabelColor</function> sets the color which is used for data
labels. This includes X axis data labels (for vertical plots) or Y axis
data labels (for horizontal plots). It also includes Data Value Labels, which
show the values of data points or bars within the plot area, unless
overridden by <xref linkend="SetDataValueLabelColor"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If <function>SetDataLabelColor</function> is not used, data labels are
drawn using the general text color set with <xref linkend="SetTextColor"/>.
If neither <function>SetDataLabelColor</function> nor
<function>SetTextColor</function> is used, the default color is black.
    </para>
    <para>
See also <xref linkend="conc-labels"/> for information about different
label types.
    </para>
    <para>
PHPlot has a deprecated function called <function>SetLabelColor</function>.
Do not use this function. It does not set the color used for labels.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.7.0. In earlier releases, the data
label colors could only be set using <xref linkend="SetTextColor"/>, which
also changed the color of other elements.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDataType">
  <refmeta>
    <refentrytitle>SetDataType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDataType</refname>
    <refpurpose>Indicate the format of the data array</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDataType(<parameter>$dt</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDataType</function> tells PHPlot how to interpret the data
array set with <xref linkend="SetDataValues" />.
More information on data types can be found in <xref linkend="conc-datatypes" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$dt</replaceable></term>
        <listitem>
          <para>
The data array format type, which must be one of the following values:
            <informaltable>
              <tgroup cols="2">
                <?dbhtml table-summary="Available data types"?>
                <colspec colname="c1" colwidth="20*" />
                <colspec colname="c2" colwidth="80*" />
                <thead>
                  <row>
                    <entry>Data Type</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>text-data</entry>
                    <entry>
Plot with implied X: <literal>(Label, Y1, [Y2, ...])</literal>
                    </entry>
                  </row>
                  <row>
                    <entry>data-data</entry>
                    <entry>
Plot with explicit X: <literal>(Label, X, Y1, [Y2, ...])</literal>
                    </entry>
                  </row>
                  <row>
                    <entry>data-data-error</entry>
                    <entry>
Error plot: <literal>(Label, X, Y1, Y1err+, Y1err-, [Y2, ...])</literal>
                    </entry>
                  </row>
                  <row>
                    <entry>text-data-single</entry>
                    <entry>
Simple pie chart data: <literal>(Label, Value)</literal>
                    </entry>
                  </row>
                  <row>
                    <entry>text-data-yx</entry>
                    <entry>
Horizontal plot with implied Y: <literal>(Label, X1, [X2, ...])</literal>
                    </entry>
                  </row>
                  <row>
                    <entry>data-data-yx</entry>
                    <entry>
Horizontal plot with explicit Y: <literal>(Label, Y, X1, [X2, ...])</literal>
                    </entry>
                  </row>
                  <row>
                    <entry>data-data-yx-error</entry>
                    <entry>
Horizontal error plot: <literal>(Label, Y, X1, X1err+, X1err-, [X2, ...])</literal>
                    </entry>
                  </row>
                  <row>
                    <entry>data-data-xyz</entry>
                    <entry>
Plot with X, Y, Z data: <literal>(Label, X, Y1, Z1, [Y2, Z2, ...])</literal>
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
Note: The descriptions above show one row of the data array.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default data type is <literal>text-data</literal>.
    </para>
    <para><?dbfo keep-together="always"?>
An example of a <literal>text-data</literal> data array is:
      <programlisting><![CDATA[$data = array(  array('Jan', 100, 150, 200),
                array('Feb', 110, 140, 210),
                array('Mar', 120, 145, 200),
                array('Apr', 110, 160, 220) );
]]></programlisting>
This defines the data for 3 data sets with 4 points on each, and a month name
as label for each point.
This is also a valid data array for data type <literal>text-data-yx</literal>.
    </para>

    <para><?dbfo keep-together="always"?>
An example of a <literal>data-data</literal> data array is:
      <programlisting><![CDATA[$data = array(  array('', 2, 15),
                array('', 4, 14),
                array('', 6, 10),
                array('', 8, 20) );
]]></programlisting>
Here the labels are empty strings, next are the X values, then a single
set of Y values (1 data set, 1 plot line).
This is also a valid data array for data type <literal>data-data-yx</literal>,
with each row containing a Y value, followed by a single X value.
    </para>

    <para><?dbfo keep-together="always"?>
An example of a <literal>data-data-error</literal> data array is:
      <programlisting><![CDATA[$data = array(  array('1999', 1, 23.5, 5, 3),
                array('2000', 2, 20.1, 4, 4),
                array('2001', 3, 19.1, 3, 4),
                array('2002', 4, 16.8, 4, 3) );
]]></programlisting>
Here the labels are years, next are the X values 1-4, then a single
set of Y values with error ranges between 3 and 5 for each point.
    </para>

    <para><?dbfo keep-together="always"?>
An example of a <literal>text-data-single</literal> data array,
used only for pie charts, is:
      <programlisting><![CDATA[$data = array(  array('', 10),
                array('', 40),
                array('', 50) );
]]></programlisting>
Here the labels are empty,
and 3 segments with relative weights of 10, 40, and 50 are defined.
    </para>

    <para>
Data type alias <literal>data-data-error-yx</literal> can be used in place
of <literal>data-data-yx-error</literal>. There are other data type aliases,
such as <literal>text-linear</literal>, which exist for compatibility with very
old versions of PHPlot, but they are not documented.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
Data type <literal>data-data-yx-error</literal> was added in PHPlot-6.1.0
for horizontal error plots.
Data type <literal>data-data-xyz</literal> was added in PHPlot-5.5.0 for
the <link linkend="plottype-bubbles">bubbles</link> plot type.
Data type <literal>data-data-yx</literal> for horizontal plots was added
in PHPlot-5.1.3.
Data type <literal>text-data-yx</literal> for horizontal bar charts was added
in PHPlot-5.1.2.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDataValueLabelColor">
  <refmeta>
    <refentrytitle>SetDataValueLabelColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDataValueLabelColor</refname>
    <refpurpose>Set the color for data value labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDataValueLabelColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDataValueLabelColor</function> sets the color which is used for
data value labels. These are the labels which show the values of data points
or bars, within the plot area. (Do not confuse these with axis data labels,
which are displayed along the X or Y axis lines.)
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If <function>SetDataValueLabelColor</function> is not used, data value labels
default to using the color set for all data labels with
<xref linkend="SetDataLabelColor"/>.
If that function is not used, both types of data labels default to using the
general text color set with <xref linkend="SetTextColor"/>.
If none of <function>SetDataValueLabelColor</function>,
<function>SetDataLabelColor</function>, or <function>SetTextColor</function>
is used, the default color for all data labels is black.
    </para>
    <para>
See also <xref linkend="conc-labels"/> for information about different
label types.
    </para>
    <para>
PHPlot has a deprecated function called <function>SetLabelColor</function>.
Do not use this function. It does not set the color used for labels.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.7.0, and the defaults were changed as
described above. Through PHPlot-5.6.0, the data value labels were drawn using
the title color, as set with <xref linkend="SetTitleColor"/>.
Since data value labels are not titles, this was incorrect, and they should
have been using the general text color like other data labels. There were
two parts to the fix in PHPlot-5.7.0: data value label color now defaults to
the general text color rather than the title color, and new functions
<function>SetDataValueLabelColor</function> and
<xref linkend="SetDataLabelColor"/> were added to allow separate control of
label colors.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDataValues">
  <refmeta>
    <refentrytitle>SetDataValues</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDataValues</refname>
    <refpurpose>Set the data array for plotting</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDataValues(<parameter>$dv</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDataValues</function> sets the data array which contains the
data values to be plotted. Use of this function is required.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$dv</replaceable></term>
        <listitem>
          <para>
The data array, containing values according to the data type format
set by <xref linkend="SetDataType" />.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The data array <parameter>$dv</parameter> must use zero-based sequential
integer indexes.  Each entry in the data
array is also an array, representing one 'record'. The record arrays need
not use zero based sequential integer indexes; the entries are processed in
the same order in which they were defined, regardless of the index values.
    </para>
    <para>
For more on data arrays and data types, see <xref linkend="conc-datatypes"/>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDefaultDashedStyle">
  <refmeta>
    <refentrytitle>SetDefaultDashedStyle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDefaultDashedStyle</refname>
    <refpurpose>Sets the on/off pattern for dashed lines.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDefaultDashedStyle(<parameter>$style</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDefaultDashedStyle</function> sets the line style for dashed
lines. That is, it customizes the look of dashed lines by specifying the
dash and gap lengths.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$style</replaceable></term>
        <listitem>
          <para>
A string specifying the number of alternating colored and transparent dots,
in order. For example, '4-3' means 4 colored, 3 transparent;
'2-3-1-2' means 2 colored, 3 transparent, 1 colored, 2 transparent.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default dashed style is '2-4', meaning 2 pixels drawn, followed by a
gap of 4 pixels.
    </para>
    <para>
All dashed lines on a plot must use the same dashed style.
Dashed lines are used for the grid (unless disabled with
<xref linkend="SetDrawDashedGrid" />), and for any data sets with
line style set to dashed with <xref linkend="SetLineStyles" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDefaultTTFont">
  <refmeta>
    <refentrytitle>SetDefaultTTFont</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDefaultTTFont</refname>
    <refpurpose>Set the default TrueType font</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDefaultTTFont(<optional><parameter>$font</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDefaultTTFont</function> sets the default TrueType font,
resets all text elements to use that font, and makes TrueType fonts the
default font type.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$font</replaceable></term>
        <listitem>
          <para>
Name of the TrueType font file to use as default. Specify either a
filename in the default TrueType font directory (or one that can be
found by GD using its own rules), or the full pathname to a font file.
If this parameter is omitted or NULL, the default TrueType font is cleared.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This function selects TrueType fonts as the default font type as if
<xref linkend="SetUseTTF" />(True) was called.
    </para>
    <para>
The supplied font name is first checked as given. If that does not work,
it is checked prefixed with the default TrueType font directory as set
with <xref linkend="SetTTFPath" />.
If that does not work either, a fatal error results.
See <xref linkend="conc-text-fonts"/> for more information.
    </para>
    <para>
This function resets all elements to use the named font and default sizes,
so it undoes all prior
<xref linkend="SetFont" />, <xref linkend="SetFontGD" />,
and <xref linkend="SetFontTTF" /> calls.
    </para>
    <para>
Change the font used by individual text elements with
<xref linkend="SetFont" />, <xref linkend="SetFontGD" />,
and <xref linkend="SetFontTTF" /> after using SetDefaultTTFont.
    </para>
    <para>
Using <literal>SetDefaultTTFont(NULL)</literal> or
<literal>SetDefaultTTFont()</literal> will erase the default font, then
set TrueType fonts as the default font type and reset all fonts. This will
immediately result in PHPlot using its default algorithm to locate a usable
TrueType font. On systems where PHPlot is unable to locate a TrueType font
without help, <literal>SetDefaultTTFont([NULL])</literal> will fail, although
using <xref linkend="SetTTFPath"/> first may help.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
Starting in PHPlot-6.0.0, the argument can be omitted and defaults to NULL,
which clears the default font. In previous versions, the argument was required.
    </para>
    <para>
Starting with PHPlot-5.1.3, TrueType fonts are validated using GD.
This allows GD to apply its own rules to try to locate a font file. On at
least some platforms, this allows fonts to be specified by filename only,
without having to set the PHPlot default font directory.
(Through PHPlot-5.1.2, the existence of the font file was checked, which
did not allow GD to try to find the font using its own rules.)
    </para>
    <para>
Through PHPlot-5.0.5, setting a default TrueType font with this function
also forced all text on the graph to use TrueType text.
Starting with PHPlot-5.0.6, it just sets the default font type.
Set <xref linkend="SetUseTTF" /> for more information on this change.
    </para>
    <para>
This behavior of this function was changed significantly at PHPlot-5.0rc3.
    </para>
  </refsect1>

</refentry>

<refentry id="SetDrawBrokenLines">
  <refmeta>
    <refentrytitle>SetDrawBrokenLines</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawBrokenLines</refname>
    <refpurpose>Sets whether lines should be broken at missing data</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDrawBrokenLines(<parameter>$bl</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawBrokenLines</function> determines how to plot lines with
missing data points. By default, PHPlot will
act as if the point does not exist, connecting the points before and after
the missing datum in the usual way. Use SetDrawBrokenLines to leave a gap
between the points before and after missing data instead.
    </para>
    <para>
This only applies to 'lines', 'linepoints', and 'squared' plot types.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$bl</replaceable></term>
        <listitem>
          <para>
True to break the lines at missing data points. False to connect the
lines around missing data.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default is to ignore missing data and connect lines around missing points.
    </para>
    <para>
A missing data point is indicated by an empty string in the corresponding
position for the dependent variable value in the data array.
This is the Y value for vertical plots, or X value for horizontal plots.
See <xref linkend="conc-datatypes-missing"/> for more information.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDrawDashedGrid">
  <refmeta>
    <refentrytitle>SetDrawDashedGrid</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawDashedGrid</refname>
    <refpurpose>Use solid or dashed lines for the grid</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDrawDashedGrid(<parameter>$ddg</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawDashedGrid</function> determines whether the grid
will be drawn with solid or dashed lines. The default is to used
dashed lines.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ddg</replaceable></term>
        <listitem>
          <para>
True to use dashed lines, False to use solid lines.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
</refentry>

<refentry id="SetDrawDataBorders">
  <refmeta>
    <refentrytitle>SetDrawDataBorders</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawDataBorders</refname>
    <refpurpose>Enable or disable drawing of data borders</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDrawDataBorders(<parameter>$draw</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawDataBorders</function> enables or disables drawing of the
data borders on supported plot types.
For plot types <link linkend="plottype-bars">bars</link> and
<link linkend="plottype-stackedbars">stackedbars</link>,
these are the borders around the individual bars or bar segments in the plot.
For plot types
<link linkend="plottype-area">area</link>,
<link linkend="plottype-squaredarea">squaredarea</link>,
<link linkend="plottype-stackedarea">stackedarea</link>, and
<link linkend="plottype-stackedsquaredarea">stackedsquaredarea</link>,
these are outlines of the filled areas.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$draw</replaceable></term>
        <listitem>
          <para>
True to draw the data borders, False to not draw them.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, data borders are drawn for unshaded
<literal>bars</literal> and <literal>stackedbars</literal> plots,
and not drawn if shading is on.
(By default, shading is on for these plot types.
See <xref linkend="SetShading"/>.)
    </para>
    <para>
By default, data borders are not drawn for
<literal>area</literal>,
<literal>squaredarea</literal>,
<literal>stackedarea</literal>, or
<literal>stackedsquaredarea</literal> plot types.
    </para>
    <para>
Use <xref linkend="SetDataBorderColors"/> to set the border colors.
    </para>
    <para>
For pie charts, see <xref linkend="SetDrawPieBorders"/>.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-6.2.0, data borders are available with
<literal>area</literal> and <literal>stackedarea</literal> plot types,
and with the new
<literal>squaredarea</literal> and <literal>stackedsquaredarea</literal>
plot types.
    </para>
    <para>
This function was added in PHPlot-6.0.0. In prior versions, borders were
always drawn for unshaded bar and stacked bar plots, and never drawn for
shaded plots.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDrawLegendBorder">
  <refmeta>
    <refentrytitle>SetDrawLegendBorder</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawLegendBorder</refname>
    <refpurpose>Enable or disable drawing of the legend outline border</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDrawLegendBorder(<parameter>$draw</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawLegendBorder</function> enables or disables drawing of the
the legend outline border.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$draw</replaceable></term>
        <listitem>
          <para>
True to draw legend outline border, False to not draw it.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="conc-legend"/> for more on the plot legend.
    </para>
    <para>
By default, the legend outline border is drawn.
    </para>
    <para>
Use <xref linkend="SetLegendBorderColor"/> or <xref linkend="SetGridColor"/> to
set the legend outline border color.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.2.1 to provide a way to omit the legend
outline border. In prior versions, the legend outline border was always drawn.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDrawPieBorders">
  <refmeta>
    <refentrytitle>SetDrawPieBorders</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawPieBorders</refname>
    <refpurpose>Enable or disable drawing of pie chart segment borders</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDrawPieBorders(<parameter>$draw</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawPieBorders</function> enables or disables drawing of the
the segment borders on pie charts. These are the lines that outline each
pie segment.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$draw</replaceable></term>
        <listitem>
          <para>
True to draw pie chart segment borders, False to not draw them.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, the pie chart segment borders are drawn for unshaded pie charts,
and not drawn for shaded pie charts. (By default, pie charts are shaded.
See <xref linkend="SetShading"/>.)
    </para>
    <para>
Use <xref linkend="SetPieBorderColor"/> or <xref linkend="SetGridColor"/> to
set the border color.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.0.0. In prior versions, borders were
always drawn for unshaded pie charts, and never drawn for shaded pie charts.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDrawPlotAreaBackground">
  <refmeta>
    <refentrytitle>SetDrawPlotAreaBackground</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawPlotAreaBackground</refname>
    <refpurpose>Enables drawing of a plot area background color</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDrawPlotAreaBackground(<parameter>$dpab</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawPlotAreaBackground</function> enables or disables drawing
of a solid fill color behind the plot area (the area inside the axes,
typically). By default, no plot area background color is used, which
results in the overall image background color applying to the plot area.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$dpab</replaceable></term>
        <listitem>
          <para>
If True, draw the plot area background color. If False, ignore the plot
area background color.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The actual color which will be drawn in the plot area background
is set with <xref linkend="SetPlotBgColor" />.
    </para>
    <para>
Plot area background color is ignored if a plot area background image was
set with <xref linkend="SetPlotAreaBgImage" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDrawXAxis">
  <refmeta>
    <refentrytitle>SetDrawXAxis</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawXAxis</refname>
    <refpurpose>Enable or disable drawing of the X axis line</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDrawXAxis(<parameter>$draw</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawXAxis</function> enables or disables drawing of the X axis
line. Disabling the X axis line should be necessary only in special
applications.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$draw</replaceable></term>
        <listitem>
          <para>
True to draw the X axis line, False to not draw the X axis line.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, the X axis line is drawn.
    </para>
    <para>
Disabling the X axis line does not disable associated plot elements, nor
change the plot margin calculation.  To produce a completely 'bare' plot,
you must turn off the grid, tick marks, tick labels, and data labels.  You
also need to turn off the plot area border, which defaults to left and
right sides.  Lastly, you might want to reduce the margins, since the
default minimum margin is 15 pixels on each side of the plot area, even if
there are no axis lines, labels, or titles.  Here is an example:
<programlisting><![CDATA[// 'Bare' plot partial code example
$plot->SetXTickPos('none');          // Turn off X tick marks
$plot->SetXTickLabelPos('none');     // Turn off X tick labels
$plot->SetXDataLabelPos('none');     // Turn off X data labels
$plot->SetYTickPos('none');          // Turn off Y tick marks
$plot->SetYTickLabelPos('none');     // Turn off Y tick labels
$plot->SetPlotBorderType('none');    // Turn off plot area border
$plot->SetDrawXGrid(False);          // Turn off X grid lines
$plot->SetDrawYGrid(False);          // Turn off Y grid lines
$plot->SetDrawXAxis(False);          // Don't draw X axis line
$plot->SetDrawYAxis(False);          // Don't draw Y axis line
$plot->SetMarginsPixels(2, 2, 2, 2); // Reduce plot margins to 2 pixels
]]></programlisting>
    </para>
    <para>
See <xref linkend="ex-truecolor-histogram"/> for an example of a plot
where axis lines are not desired. (The configuration data as shown
in the example draws a full plot area border, so the axis lines would be
covered anyway. But if the border is turned off, the axis lines would be
visible unless they are suppressed as shown.)
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.3.0.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDrawXDataLabelLines">
  <refmeta>
    <refentrytitle>SetDrawXDataLabelLines</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawXDataLabelLines</refname>
    <refpurpose>Draw data label lines for vertical plots</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDrawXDataLabelLines(<parameter>$dxdl</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawXDataLabelLines</function> enables drawing of data label lines
for plot types that support them.
Data label lines are vertical lines drawn from the data points to the edge
or edges of the plot with the axis data labels.  In the usual case, with
the X axis data labels at the bottom of the plot, the data label lines
would be drawn from the data points to the bottom of the plot area.
Depending on the data label locations set with
<xref linkend="SetXDataLabelPos"/>, the lines would be drawn up, down, or in
both directions from the data points to the top or bottom of the plot area.
    </para>
    <para>
To use data label lines, you generally want to turn off X ticks, X tick labels,
and the X grid lines.
Your data array needs to provide data labels, which will be drawn by
default at the bottom of the plot area.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$dxdl</replaceable></term>
        <listitem>
          <para>
True to draw the data label lines, False to not draw the lines.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
X data label lines only work with these plot types: lines, points, linepoints,
and bubbles. Data label lines can only be drawn if X axis data labels are on.
    </para>
    <para>
If a graph contains multiple data sets, data label lines drawn down will start
at the maximum Y value for each X value. Data label lines drawn up will
start at the minimum Y value for each X value.
    </para>
    <para>
By default, data label lines are not drawn.
    </para>
    <para>
For an example of X data label lines, see <xref linkend="ex-linepoints2"/>.
    </para>
    <para>
This function is for vertical plot types. For the horizontal plot types,
see <xref linkend="SetDrawYDataLabelLines"/>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDrawXGrid">
  <refmeta>
    <refentrytitle>SetDrawXGrid</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawXGrid</refname>
    <refpurpose>Whether or not to draw the X grid lines</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDrawXGrid(<optional><parameter>$dxg</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawXGrid</function> enables or disables the drawing of the X
grid lines. (The X grid lines are the vertical lines which intersect the
X axis and are parallel to the Y axis.)
The default is to not draw the X grid for vertical plots,
and to draw the X grid for horizontal plots.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$dxg</replaceable></term>
        <listitem>
          <para>
True to draw the X grid lines, False to not draw the X grid lines.
If this parameter is omitted or NULL, the default behavior is restored.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Grid lines are drawn at tick mark positions.
    </para>
    <para>
<xref linkend="SetLightGridColor" /> sets the color of the grid lines.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
The ability to specify NULL or omit the parameter to restore the default
behavior was added in PHPlot-6.0.0.
    </para>
  </refsect1>

</refentry>

<refentry id="SetDrawYAxis">
  <refmeta>
    <refentrytitle>SetDrawYAxis</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawYAxis</refname>
    <refpurpose>Enable or disable drawing of the Y axis line</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDrawYAxis(<parameter>$draw</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawYAxis</function> enables or disables drawing of the Y axis
line. Disabling the Y axis line should be necessary only in special
applications.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$draw</replaceable></term>
        <listitem>
          <para>
True to draw the Y axis line, False to not draw the Y axis line.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, the Y axis line is drawn.
    </para>
    <para>
Disabling the Y axis line does not disable associated plot elements, nor
change the plot margin calculation.  To produce a completely 'bare' plot,
you must turn off the grid, tick marks, tick labels, and data labels.  You
also need to turn off the plot area border, which defaults to left and
right sides.  Lastly, you might want to reduce the margins, since the
default minimum margin is 15 pixels on each side of the plot area, even if
there are no axis lines, labels, or titles.
See <xref linkend="SetDrawXAxis"/> for sample code.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.3.0.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDrawYDataLabelLines">
  <refmeta>
    <refentrytitle>SetDrawYDataLabelLines</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawYDataLabelLines</refname>
    <refpurpose>Draw data label lines for horizontal plots</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDrawYDataLabelLines(<parameter>$dydl</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawYDataLabelLines</function> enables drawing of data label lines
for horizontal plot types that support them.
Data label lines are horizontal lines drawn from the data points to the
edge or edges of the plot with the axis data labels.  In the usual case,
with the Y axis data labels on the left side of the plot, the data label
lines would be drawn from the data points to the left side of the plot area.
Depending on the data label locations set with
<xref linkend="SetYDataLabelPos"/>, the lines would be drawn left, right, or in
both directions from the data points to the sides of the plot area.
    </para>
    <para>
To use data label lines, you generally want to turn off Y ticks, Y tick labels,
and the Y grid lines.
Your data array needs to provide data labels, which will be drawn by
default on the left side of the plot area.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$dydl</replaceable></term>
        <listitem>
          <para>
True to draw the data label lines, False to not draw the lines.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Y data label lines only work with these plot types: lines, points, and
linepoints, and only when using a data type that indicates a horizontal plot.
Data label lines can only be drawn if Y axis data labels are on.
    </para>
    <para>
If a graph contains multiple data sets, data label lines drawn from the left
edge will end at the maximum X value for each Y value.  Data label lines drawn
from the right edge will end at the minimum Y value for each X value.
(Remember that the X and Y axes are in the same position for vertical and
horizontal plots, but the roles of X and Y are reversed for horizontal plots.)
    </para>
    <para>
By default, data label lines are not drawn.
    </para>
    <para>
For an example of Y data label lines, see <xref linkend="ex-horizlinepts"/>.
    </para>
    <para>
This function is for horizontal plot types. For the usual vertical plot
types, see <xref linkend="SetDrawXDataLabelLines"/>.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.0.0. In earlier releases, there was no
support for data label lines in any horizontal plot type.
    </para>
  </refsect1>
</refentry>

<refentry id="SetDrawYGrid">
  <refmeta>
    <refentrytitle>SetDrawYGrid</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetDrawYGrid</refname>
    <refpurpose>Whether or not to draw the Y grid lines</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetDrawYGrid(<optional><parameter>$dyg</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetDrawYGrid</function> enables or disables the drawing of the Y
grid lines. (The Y grid lines are the horizontal lines which intersect the
Y axis and are parallel to the X axis.)
The default is to draw the Y grid for vertical plots,
and not draw the Y grid for horizontal plots.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$dyg</replaceable></term>
        <listitem>
          <para>
True to draw the Y grid lines, False to not draw the Y grid lines.
If this parameter is omitted or NULL, the default behavior is restored.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Grid lines are drawn at tick mark positions.
    </para>
    <para>
<xref linkend="SetLightGridColor" /> sets the color of the grid lines.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
The ability to specify NULL or omit the parameter to restore the default
behavior was added in PHPlot-6.0.0.
    </para>
  </refsect1>

</refentry>

<refentry id="SetErrorBarColors">
  <refmeta>
    <refentrytitle>SetErrorBarColors</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetErrorBarColors</refname>
    <refpurpose>Sets the colors used for data error bars</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetErrorBarColors(<parameter>$error_bar_colors</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetErrorBarColors</function> sets the colors used for each
data set's error bars, in the same way <xref linkend="SetDataColors" />
sets the colors used for the data plot itself.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$error_bar_colors</replaceable></term>
        <listitem>
          <para>
An array of color values, one for each data set's error bars.
Or, a single color value (not an array) to use for all data set error bars.
For other possibilities, see Notes.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$error_bar_colors</parameter>, it
must use zero-based sequential integer indexes.
    </para>
    <para>
If <parameter>$error_bar_colors</parameter> is not an array, but a single color
value, then that color will be used for all data sets' error bars.
However, the array(r,g,b) notation is not allowed in
this case (because it looks like an array of 3 separate color values).
You can get around this restriction if you want to specify a single color 
as an R, G, B array by wrapping the array in another array, for example:
<literal>array(array(102, 0, 192))</literal>.
    </para>
    <para>
Two special uses of the <parameter>$error_bar_colors</parameter> argument
are available.
If the argument is an empty string, or boolean False, the color map is reset
to the defaults. This can be used to restore the default color map.
If the argument is NULL or missing from the function call, the color map is
reset to the defaults, but only if it has not already been set.
This is used internal to PHPlot for one-time initialization.
    </para>
    <para>
If SetErrorBarColors is never called, the default color map is the same as
for <xref linkend="SetDataColors"/>. It contains 16 colors, starting with
SkyBlue, green, orange, and blue.
For the full list, see <xref linkend="conc-colors-datacolors"/>.
    </para>
    <para>
If you change the data colors with <xref linkend="SetDataColors" />,
you probably want to change the error bar colors to the same array.
    </para>
    <para>
A data colors callback, as described in
<xref linkend="adv-datacolor-callback" />,
also controls selection of the color for error bars.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, the default color map contained these 8 colors:
SkyBlue, green, orange, blue, orange, red, violet, and azure1.
These were used if SetErrorBarColors was never called.
Also, through PHPlot-5.0.7, if SetErrorBarColors was called with an empty
string argument, the color map was set to just contain 'black'.
Starting with PHPlot-5.1.0, a new default color map with 16 colors was
defined. Given an empty string (or False), SetErrorBarColors now restores the
default color map.
    </para>
  </refsect1>
</refentry>

<refentry id="SetErrorBarLineWidth">
  <refmeta>
    <refentrytitle>SetErrorBarLineWidth</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetErrorBarLineWidth</refname>
    <refpurpose>Set the line width used for error bars</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetErrorBarLineWidth(<parameter>$seblw</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetErrorBarLineWidth</function> sets the line width used for
error bars. This width is used to draw the vertical lines indicating the
error range in the positive and negative direction, and also the tees
(if enabled) and the top and bottom.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$seblw</replaceable></term>
        <listitem>
          <para>
Desired width in pixels of the lines used to draw error bars.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default is to use 1 pixel wide lines.
    </para>
    <para>
This is only used with error plots (data types
<link linkend="data-data-error">data-data-error</link> and
<link linkend="data-data-yx-error">data-data-yx-error</link>).
    </para>
    <para>
All lines in a plot use the same error bar width.
    </para>
  </refsect1>
</refentry>

<refentry id="SetErrorBarShape">
  <refmeta>
    <refentrytitle>SetErrorBarShape</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetErrorBarShape</refname>
    <refpurpose>Select line or tee-style error bars</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetErrorBarShape(<parameter>$ebs</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetErrorBarShape</function> selects the shape used for error
indicators. Two shapes are available: 'tee' puts a short horizontal line at
the top and bottom of each error bar, and 'line' does not.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ebs</replaceable></term>
        <listitem>
          <para>
Error bar shape: either 'tee' or 'line'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default error bar shape is 'tee'.
    </para>
    <para>
This is only used with error plots (data types
<link linkend="data-data-error">data-data-error</link> and
<link linkend="data-data-yx-error">data-data-yx-error</link>).
    </para>
    <para>
All lines in a plot use the same error bar shape.
    </para>
  </refsect1>
</refentry>

<refentry id="SetErrorBarSize">
  <refmeta>
    <refentrytitle>SetErrorBarSize</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetErrorBarSize</refname>
    <refpurpose>Set the size of the error bar tee.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetErrorBarSize(<parameter>$ebs</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetErrorBarSize</function> sets the length of the 'tee' drawn at
the top and bottom of error bars, if the error bar shape is set to 'tee'
with <xref linkend="SetErrorBarShape" /> (or defaulted to 'tee').
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ebs</replaceable></term>
        <listitem>
          <para>
Error bar tee length in pixels.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default size is 5 pixels.
    </para>
    <para>
This is only used with error plots (data types
<link linkend="data-data-error">data-data-error</link> and
<link linkend="data-data-yx-error">data-data-yx-error</link>),
and with error bar shape 'tee'.
    </para>
    <para>
All lines in a plot use the same error bar size.
    </para>
  </refsect1>
</refentry>

<refentry id="SetFailureImage">
  <refmeta>
    <refentrytitle>SetFailureImage</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetFailureImage</refname>
    <refpurpose>Enable or disable error image production on failure</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetFailureImage(<parameter>$error_image</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetFailureImage</function> can be used to disable the error image
normally produced by PHPlot if a fatal error occurs.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$error_image</replaceable></term>
        <listitem>
          <para>
True to enable the error image, False to disable the error image.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="conc-errors"/> for an overview of error handling in PHPlot.
The error image is enabled by default.
    </para>
    <para>
If failure occurs when error images are disabled, PHPlot will still trigger
a user-level error condition, which will normally log the error to the
server log and terminate the script. However, there will be no feedback to
the user that the error occurred.
    </para>
    <para>
<function>SetFailureImage(False)</function> should be called right after
creating the PHPlot object if using <xref linkend="EncodeImage"/> to return
the image as a string (rather than output the image).
This will make sure that no unexpected error image is produced by a script
that would not normally produce an image at all.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.5.0.
    </para>
  </refsect1>
</refentry>

<refentry id="SetFileFormat">
  <refmeta>
    <refentrytitle>SetFileFormat</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetFileFormat</refname>
    <refpurpose>Select the graphic image format generated by PHPlot</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetFileFormat(<parameter>$format</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetFileFormat</function> selects a graphic image format from the
available image formats. Depending on how PHP and/or GD were built on your
system, available formats include JPEG, PNG, GIF, and WBMP.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$format</replaceable></term>
        <listitem>
          <para>
What graphic image format to use: 'jpg', 'png', 'gif', or 'wbmp'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default file format is 'png'.
    </para>
    <para>
Depending on how GD was built, not all of these formats will be available.
You can use <literal>phpinfo()</literal> to see what formats are supported
by your PHP/GD installation.
    </para>
    <para>
JPEG is generally a bad choice for this type of image, as the lossy
compression reduces the quality of lines and text.
    </para>
  </refsect1>
</refentry>

<refentry id="SetFont">
  <refmeta>
    <refentrytitle>SetFont</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetFont</refname>
    <refpurpose>Select which font to use for a plot element</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetFont(<parameter>$elem</parameter>, <parameter>$font</parameter>, <optional><parameter>$size</parameter></optional>, <optional><parameter>$line_spacing</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetFont</function> selects the font and size to use for one plot
element (for example, the title). This functions works differently depending
on whether or not you are using TrueType fonts. If using TrueType fonts,
call either <xref linkend="SetDefaultTTFont" /> or <xref linkend="SetUseTTF" />
before calling SetFont.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>

      <varlistentry>
        <term><replaceable>$elem</replaceable></term>
        <listitem>
          <para>
The name of the element to change the font for. Use one of the following
strings: 'title', 'legend', 'generic', 'x_label', 'y_label', 'x_title',
or 'y_title'.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$font</replaceable></term>
        <listitem>
          <para>
Selects the font to use.  For TrueType fonts,
this is either the full pathname of a TrueType font filename,
or the filename (without path) if the font file is either located in the
default TrueType font directory set with <xref linkend="SetTTFPath" />
or can be found by GD using its default search rules.
An empty string or NULL can be specified to use the default TrueType font.
          </para>
          <para>
For built-in GD fonts, this is a number between 1 and 5 which selects one
of the built-in GD fonts.  Font 1 is the smallest, and font 5 is the
largest.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$size</replaceable></term>
        <listitem>
          <para>
The font size in points for TrueType fonts. Ignored for built-in GD fonts.
If not specified, a default value of 12 is used.
See note below.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$line_spacing</replaceable></term>
        <listitem>
          <para>
Optional line spacing adjustment for this text element.
This is interpreted differently for GD and TrueType text.
See <xref linkend="SetLineSpacing"/> for details.
If not specified, the value set by <xref linkend="SetLineSpacing"/> is used.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See also <xref linkend="conc-text"/>.
    </para>
    <para>
The <literal>generic</literal> font is used for pie chart segment labels,
message image text (see <xref linkend="DrawMessage"/>), error image text,
and can be used from callbacks (see <xref linkend="callbacks-drawing"/>).
However, changing this font has no effect on error image text, because the
PHPlot error handler resets the font to the default before displaying the error.
    </para>
    <para>
When using built-in GD fonts, the default fonts are shown in the following
table, where font 1 is the smallest font and font 5 is the biggest font.
      <informaltable>
       <?dbfo table-width="40%"?> <!-- Table width hint for PDF only -->
        <tgroup cols="2">
          <?dbhtml table-summary="Default built-in fonts"?>
          <colspec colname="c1" colwidth="40*" />
          <colspec colname="c2" colwidth="60*" />
          <thead>
            <row>
              <entry>Element</entry>
              <entry>Default Built-in Font</entry>
            </row>
          </thead>
          <tbody>
            <row> <entry>generic</entry> <entry>2</entry> </row>
            <row> <entry>legend</entry>  <entry>2</entry> </row>
            <row> <entry>title</entry>   <entry>5</entry> </row>
            <row> <entry>x_label</entry> <entry>1</entry> </row>
            <row> <entry>y_label</entry> <entry>1</entry> </row>
            <row> <entry>x_title</entry> <entry>3</entry> </row>
            <row> <entry>y_title</entry> <entry>3</entry> </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>
    <para>
When using TrueType fonts, the default font sizes are shown in the following
table. Use <xref linkend="SetDefaultTTFont" /> to set the default TrueType font.
      <informaltable>
       <?dbfo table-width="40%"?> <!-- Table width hint for PDF only -->
        <tgroup cols="2">
          <?dbhtml table-summary="Default TrueType font sizes"?>
          <colspec colname="c1" colwidth="40*" />
          <colspec colname="c2" colwidth="60*" />
          <thead>
            <row>
              <entry>Element</entry>
              <entry>Default TrueType Font Size (points)</entry>
            </row>
          </thead>
          <tbody>
            <row> <entry>generic</entry> <entry>8</entry> </row>
            <row> <entry>legend</entry>  <entry>8</entry> </row>
            <row> <entry>title</entry>   <entry>14</entry> </row>
            <row> <entry>x_label</entry> <entry>6</entry> </row>
            <row> <entry>y_label</entry> <entry>6</entry> </row>
            <row> <entry>x_title</entry> <entry>10</entry> </row>
            <row> <entry>y_title</entry> <entry>10</entry> </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>

    <para>
Simultaneous use of GD and TrueType font text is allowed in the same plot.
To mix font types, use 
<xref linkend="SetFontGD"/> and <xref linkend="SetFontTTF"/> to
specify the font and font type of an element, instead of using SetFont.
    </para>

    <para>
SetFont implicitly uses the default font type.
When a PHPlot object instance is created, the default font type is GD.
Using <xref linkend="SetUseTTF"/>(True), or selecting a default font with
<xref linkend="SetDefaultTTFont"/>, sets the default font type to TrueType.
Using <xref linkend="SetUseTTF"/>(False) sets the default font type back
to GD. Either of these three operations will also reset all current text
elements to the defaults indicated above, negating any prior SetFont,
SetFontGD, or SetFontTTF calls. Note that <xref linkend="SetTTFPath"/>,
which selects the directory where TrueType fonts can be found, does not
affect the default font type nor does it change any existing font
selections.
    </para>

    <para>
Although PHP documents the TrueType font sizes as being given in points
(where there are about 72 points per inch), it doesn't know the output
device resolution, so it just assumes a fixed resolution of 72 pixels per
inch.  As a result, the TrueType font size argument actually measures the
approximate font height in pixels. For example, if you use $size=18,
the text will be about 18 pixels high in the user's browser. The actual
size seen by the user will depend on the resolution of the user's display.
On a 72 pixels per inch display, the text size will be 18 points, but at
96 pixels per inch it would only be 13.5 points.
    </para>

  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-5.1.3, TrueType fonts are validated by trying to
use the font with a non-drawing operation, rather than by seeing if the
font file exists.
See <xref linkend="conc-text-fonts"/> for more information.
    </para>
    <para>
Simultaneous use of GD and TrueType font text was added at PHPlot-5.0.6.
Through PHPlot-5.0.5, all text in a plot used GD fonts, or all text used
TrueType fonts.
    </para>
    <para>
The line_spacing parameter was added at PHPlot-5.0.6 to allow finer
control over the line spacing for different elements. Through PHPlot-5.0.5,
the same line spacing was used for all text elements.
    </para>

    <para>
The described behavior for finding TrueType font files (first using the
name as given, then looking in the SetTTFPath font directory) was
implemented in PHPlot-5.0rc3.
    </para>
  </refsect1>

</refentry>

<refentry id="SetFontGD">
  <refmeta>
    <refentrytitle>SetFontGD</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetFontGD</refname>
    <refpurpose>Select a GD font to use for a plot element</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetFontGD(<parameter>$elem</parameter>, <parameter>$font</parameter>, <optional><parameter>$line_spacing</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetFontGD</function> selects a GD font to use for one plot
element (for example, the title).
This function supplements <xref linkend="SetFont"/>, which selects a GD or TTF
font depending on the currently selected font type. SetFontGD always selects
a GD font, even if TrueType fonts are in use.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>

      <varlistentry>
        <term><replaceable>$elem</replaceable></term>
        <listitem>
          <para>
The name of the element to change the font for. Use one of the following
strings: 'title', 'legend', 'generic', 'x_label', 'y_label', 'x_title',
or 'y_title'.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$font</replaceable></term>
        <listitem>
          <para>
Selects the GD font to use.  This is a number between 1 and 5 which selects
one of the built-in GD fonts.
Font 1 is the smallest, and font 5 is the largest.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$line_spacing</replaceable></term>
        <listitem>
          <para>
Optional line spacing adjustment for this text element.
For GD fonts, this is the number of pixels between lines.
If not specified, the value set by <xref linkend="SetLineSpacing"/> is used.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="conc-text"/>,
<xref linkend="SetFont"/> for more information about fonts, and
<xref linkend="SetLineSpacing"/> for more information about line spacing.
    </para>

    <para>
The <literal>generic</literal> font is used for pie chart segment labels,
message image text (see <xref linkend="DrawMessage"/>), error image text,
and can be used from callbacks (see <xref linkend="callbacks-drawing"/>).
However, changing this font has no effect on error image text, because the
PHPlot error handler resets the font to the default before displaying the error.
    </para>

    <para>
Use <xref linkend="SetUseTTF"/>
(or <xref linkend="SetDefaultTTFont"/>, which calls it) to set the default
font type.
Use <xref linkend="SetFont" /> to specify the font to use for an element
using the default font type.
Use SetFontGD and <xref linkend="SetFontTTF"/> to
specify the font of an element using the specific type of font.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added at PHPlot-5.0.6, along with <xref linkend="SetFontTTF"/>,
to allow mixing GD and TrueType fonts in the same graph.
    </para>
  </refsect1>
</refentry>

<refentry id="SetFontTTF">
  <refmeta>
    <refentrytitle>SetFontTTF</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetFontTTF</refname>
    <refpurpose>Select a TrueType font to use for a plot element</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetFontTTF(<parameter>$elem</parameter>, <parameter>$font</parameter>, <optional><parameter>$size</parameter></optional>, <optional><parameter>$line_spacing</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetFontTTF</function> selects a TrueType font and size to use for one
plot element (for example, the title).
This function supplements <xref linkend="SetFont"/>, which selects a GD or TTF
font depending on the currently selected font type. SetFontTTF always selects
a TrueType font, even if TrueType fonts are not the default font type.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>

      <varlistentry>
        <term><replaceable>$elem</replaceable></term>
        <listitem>
          <para>
The name of the element to change the font for. Use one of the following
strings: 'title', 'legend', 'generic', 'x_label', 'y_label', 'x_title',
or 'y_title'.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$font</replaceable></term>
        <listitem>
          <para>
Selects the TrueType font to use.
This is either the full pathname of a TrueType font filename,
or the filename (without path) if the font file is either located in the
default TrueType font directory set with <xref linkend="SetTTFPath" />
or can be found by GD using its default search rules.
See <xref linkend="conc-text-fonts"/> for more information.
An empty string or NULL can be specified to use the default TrueType font.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$size</replaceable></term>
        <listitem>
          <para>
The TrueType font size in points.
If not specified, a default value of 12 is used.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$line_spacing</replaceable></term>
        <listitem>
          <para>
Optional line spacing adjustment for this text element.
For TrueType text, this is an adjustment factor for the built-in font
spacing.
See <xref linkend="SetLineSpacing"/> for details.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="conc-text"/>,
<xref linkend="SetFont"/> for more information about fonts, and
<xref linkend="SetLineSpacing"/> for more information about line spacing.
    </para>

    <para>
The <literal>generic</literal> font is used for pie chart segment labels,
message image text (see <xref linkend="DrawMessage"/>), error image text,
and can be used from callbacks (see <xref linkend="callbacks-drawing"/>).
However, changing this font has no effect on error image text, because the
PHPlot error handler resets the font to the default before displaying the error.
    </para>

    <para>
Use <xref linkend="SetUseTTF"/>
(or <xref linkend="SetDefaultTTFont"/>, which calls it) to set the default
font type.
Use <xref linkend="SetFont" /> to specify the font to use for an element
using the default font type.
Use <xref linkend="SetFontGD"/> and SetFontTTF to
specify the font of an element using the specific type of font.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-5.1.3, TrueType fonts are validated by trying to
use the font with a non-drawing operation, rather than by seeing if the
font file exists.
See <xref linkend="conc-text-fonts"/> for more information.
    </para>
    <para>
This function was added at PHPlot-5.0.6, along with <xref linkend="SetFontGD"/>,
to allow mixing GD and TrueType fonts in the same graph.
    </para>
  </refsect1>
</refentry>

<refentry id="SetGridColor">
  <refmeta>
    <refentrytitle>SetGridColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetGridColor</refname>
    <refpurpose>Set the color used for the axis lines and borders</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetGridColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetGridColor</function> sets the color used for the X and Y
axis lines and the plot area border.
It also sets the default color for pie chart data labels, pie chart segment
borders, and the legend border.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default color is black.
    </para>
    <para>
This doesn't actually set the color used by the grid; for that see
<xref linkend="SetLightGridColor" />. We have no idea why this is so.
    </para>
    <para>
The color used for pie chart segment borders is set with
<xref linkend="SetPieBorderColor"/> (starting with PHPlot-6.0.0), with
<function>SetGridColor</function> providing a default color.
    </para>
    <para>
The color used for pie chart data labels is set with
<xref linkend="SetPieLabelColor"/> (starting with PHPlot-5.7.0), with
<function>SetGridColor</function> providing a default color.
    </para>
    <para>
The color used for the legend border is set with
<xref linkend="SetLegendBorderColor"/> (starting with PHPlot-6.2.1), with
<function>SetGridColor</function> providing a default color.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Although <function>SetGridColor</function> itself has not changed, the
additional functions listed above have been added to set the color for
certain plot elements, and these override any color set with
<function>SetGridColor</function> for those elements. See the reference for
those functions for the history of these changes.
    </para>
  </refsect1>
</refentry>

<refentry id="SetImageBorderColor">
  <refmeta>
    <refentrytitle>SetImageBorderColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetImageBorderColor</refname>
    <refpurpose>Set image border color, if enabled</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetImageBorderColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetImageBorderColor</function> sets the color to use for a
border around the entire image.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The image border is only drawn if <xref linkend="SetImageBorderType" /> is
called with a type other than 'none'. By default there is no border.
If the border is enabled but no color is set, the default color is
gray (194,194,194).
    </para>
    <para>
Either the specified color, a darker shade of that color, or both are used
to draw the image border. See <xref linkend="SetImageBorderType" /> for
details.
    </para>
    <para>
The border width can be set with <xref linkend="SetImageBorderWidth" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetImageBorderType">
  <refmeta>
    <refentrytitle>SetImageBorderType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetImageBorderType</refname>
    <refpurpose>Draw a border around the image</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetImageBorderType(<parameter>$sibt</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetImageBorderType</function> controls the drawing of a border
around the entire image. By default, no border is drawn.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$sibt</replaceable></term>
        <listitem>
          <para>
A string indicating the desired border type: 'raised', 'plain', 'solid', or
'none'.
Use 'none' to revert to the default of no border.
Use 'solid' for a border drawn with the specified color.
Use 'plain' for a border drawn with a darker shade of the specified color.
Use 'raised' for a border that appears to raise the image, by drawing the
top and left sides with the specified color and the bottom and right sides
with a darker shade of the specified color.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The base color for the image border is set with
<xref linkend="SetImageBorderColor" />.
Either that color, a darker shade of that color, or both are used to draw
the border, as described above.
    </para>
    <para>
The image border width can be set with <xref linkend="SetImageBorderWidth" />.
The default width is 1 pixel for types 'plain' and 'solid', and 2 pixels
for 'raised'.
    </para>
    <para>
It can be useful to have a border drawn around images when embedded in an
HTML page. An alternative to this function is to use the BORDER attribute
in the IMG tag when embedding the image.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.1.1, the choices were 'none', 'plain' for a 1 pixel wide
border using the darker shade, or 'raised' for a 2 pixel wide border
using the specified color for the top and left sides and a darker shade
for the bottom and right. There was no way to control the border width.
Starting with PHPlot-5.1.2, a new choice 'solid' was added to use the
exact color specified with <xref linkend="SetImageBorderColor" /> rather
than using the darker shade like 'plain' uses (which may have been a bug).
A new function <xref linkend="SetImageBorderWidth" /> was added to control
the border width.
    </para>
    <para>
Use of 'none' to turn the border off was added in PHPlot-5.1.0.
    </para>
  </refsect1>
</refentry>

<refentry id="SetImageBorderWidth">
  <refmeta>
    <refentrytitle>SetImageBorderWidth</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetImageBorderWidth</refname>
    <refpurpose>Set the width for the image border</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetImageBorderWidth(<parameter>$width</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetImageBorderWidth</function> sets the width of an image border,
if enabled by <xref linkend="SetImageBorderType" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$width</replaceable></term>
        <listitem>
          <para>
The desired border width, in pixels.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Use <xref linkend="SetImageBorderType" /> to enable the border.
Use <xref linkend="SetImageBorderColor" /> to set the border color.
    </para>
    <para>
By default, the image border width is 1 pixel for a 'solid' or 'plain'
border type, and 2 pixels for a 'raised' border type.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.1.2.
    </para>
  </refsect1>
</refentry>

<refentry id="SetIsInline">
  <refmeta>
    <refentrytitle>SetIsInline</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetIsInline</refname>
    <refpurpose>Set the output image to be inline - without HTTP headers</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetIsInline(<parameter>$is_inline</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetIsInline</function> determines if HTTP headers are sent along
with the output image or not. By default, HTTP headers are sent,
identifying the image type for browsers. If PHPlot output is not being
directed to a browser, or in other special-purpose applications, you can
turn off the HTTP content type header using this function.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$is_inline</replaceable></term>
        <listitem>
          <para>
True to suppress HTTP content type headers, False to include the headers.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default is to include the headers. However, the PHP CLI (command line
interface) never outputs headers, so using this function is not necessary
if you are using the PHP CLI to create image files by redirecting standard
output to a file.
    </para>
    <para>
You must call SetIsInline(True) if you are sending PHPlot output to a file
with <xref linkend="SetOutputFile" />, or by supplying a filename argument to
the <xref linkend="PHPlot" /> constructor.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLabelScalePosition">
  <refmeta>
    <refentrytitle>SetLabelScalePosition</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLabelScalePosition</refname>
    <refpurpose>Position pie-chart labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLabelScalePosition(<parameter>$blp</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLabelScalePosition</function> adjusts the position of the pie
chart data labels which identify the pie segments.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$blp</replaceable></term>
        <listitem>
          <para>
Position factor for the pie chart labels. This is a floating point number.
The default value is 0.5, which places the labels just outside the pie
circumference. See notes below.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This affects pie charts only.
    </para>
    <para>
Values greater than or equal to 0.5 place the labels outside the pie. The
default value 0.5 places the labels outside and close to the pie circumference.
Larger values move the labels away from the pie. A value of 1.0 would place the labels about twice as far from the pie center as the pie radius.
    </para>
    <para>
Values less than 0.5 place the labels inside the pie circumference, with
smaller values moving the labels in towards the center. To place the labels
just inside the pie circumference, use 0.49 (for example). Using 0 (or
<literal>False</literal>) results in no labels at all.
    </para>
    <para>
A more detailed definition of the label scale position parameter is that it
is a scale factor applied to the diameter of the pie (at the angle where the
label will be drawn), which determines the text basepoint for the label.
However, PHPlot adjusts the result when it is close to the pie circumference.
    </para>
    <para>
Note that PHPlot sizes the pie chart so the labels fit inside the plot area,
if possible.
This means the label scale position will affect the pie size, if greater
than or equal to 0.5.
    </para>
    <para>
To control the pie chart label contents, see <xref linkend="SetPieLabelType"/>.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-5.6.0, the label scale position argument was interpreted
as above, with values greater than or equal to 0.5 meaning outside the pie,
values less than 0.5 meaning inside, and 0 meaning no labels.
Through PHPlot-5.5.0, the label scale position was used with less
precision, and included an additional 1.2 scale factor to try to move the
labels further out in the hope that they would be clear of the pie.
    </para>
    <para>
Accepting 0 or <literal>False</literal> as a valid argument value to disable
the labels was added in PHPlot-5.6.0.
Before that, the labels were always plotted.
    </para>
    <para>
The ability to control pie label contents, and the automatic sizing
of the pie to leave room for labels, were added in PHPlot-5.6.0. Through
PHPlot-5.5.0, pie chart labels always displayed segment percentages, and the
pie size was calculated without regard to the labels.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegend">
  <refmeta>
    <refentrytitle>SetLegend</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegend</refname>
    <refpurpose>Add text to a legend box</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLegend(<parameter>$leg</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegend</function> sets the text to be displayed in the legend.
A legend is often needed when a plot contains more than one data set,
to identify the purpose of the different data sets being plotted.
The legend text consists of multiple lines, with each line identifying one
data set on the plot.
PHPlot adds an identifying color box or shape marker next to each line in the
legend.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$leg</replaceable></term>
        <listitem>
          <para>
An array with each element containing the text for one line of the legend.
Or, if not an array, the one line to be appended to the legend. See notes.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="conc-legend"/> for more on the plot legend.
    </para>
    <para>
By default, no legend is displayed.
    </para>
    <para>
The legend usually needs to contain one line of text for each data set plotted
on the graph, in the same order as the data array.
You can supply all the legend lines in a single call to SetLegend as an
array, or you can build up the legend one line at a time with multiple
calls to SetLegend, supplying one line per call (in the same order as
the data sets in the data array).
    </para>
    <para>
By default, legend text lines are displayed in order from top to bottom in
the legend. (See <xref linkend="SetLegendReverse"/> to reverse the order.)
Each line also has a color box or shape maker with the corresponding color from
the data colors array.
The colors used in the legend color boxes or shape markers are independent of
any custom data color callback
(see <xref linkend="adv-datacolor-callback"/>).
    </para>
    <para>
To cancel a legend (perhaps as part of drawing multiple plots on an image),
pass an empty array or NULL as <varname>$leg</varname>.
    </para>
    <para>
To control the legend position on the plot,
use <xref linkend="SetLegendPixels"/>, <xref linkend="SetLegendWorld"/>,
or the more general <xref linkend="SetLegendPosition"/>.
You can control the text and color box or shape marker alignment within the
legend using <xref linkend="SetLegendStyle"/>.
    </para>
    <para>
Use <xref linkend="SetLegendUseShapes"/> to select color boxes or shape
markers in the legend.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Accepting NULL as a valid argument value was added in PHPlot-5.3.1.
Through PHPlot-5.3.0, passing NULL would cause an error.
    </para>
  </refsect1>
</refentry>


<refentry id="SetLegendBorderColor">
  <refmeta>
    <refentrytitle>SetLegendBorderColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegendBorderColor</refname>
    <refpurpose>Set the legend outline border color</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLegendBorderColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegendBorderColor</function> sets the color that is used to
draw the rectangular outline border around the legend.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="conc-legend"/> for more on the plot legend.
    </para>
    <para>
If <function>SetLegendBorderColor</function> is not used, the legend outline
border will be drawn using the color set with <xref linkend="SetGridColor"/>.
If neither <function>SetLegendBorderColor</function> nor
<function>SetGridColor</function> is used, the default color is black.
    </para>
    <para>
Use <xref linkend="SetDrawLegendBorder"/><literal>(FALSE)</literal> if you
do not want the legend to have an outline border.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.2.1. In earlier releases, the legend
outline border always used the color set with <xref linkend="SetGridColor"/>,
which also sets the color of other elements.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegendBgColor">
  <refmeta>
    <refentrytitle>SetLegendBgColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegendBgColor</refname>
    <refpurpose>Set legend background color</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLegendBgColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegendBgColor</function> sets the background color used in the
legend.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="conc-legend"/> for more on the plot legend.
    </para>
    <para>
If <function>SetLegendBgColor</function> is not used, the legend background
color will be the same as the image background color.
The image background color is set with <xref linkend="SetBackgroundColor"/>,
and defaults to white.
    </para>
    <para>
If you position the legend outside the plot area, this function is useful to
make it stand out more, by using a color that differs from image background
color. Similarly, if your legend is positioned inside the plot area, but you
have not changed the plot area background, you can use this function to make
the legend stand out with a different background color.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.0.0. In earlier releases, the legend
background was always drawn using the image background color.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegendColorboxBorders">
  <refmeta>
    <refentrytitle>SetLegendColorboxBorders</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegendColorboxBorders</refname>
    <refpurpose>Control the borders around color boxes in the legend</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLegendColorboxBorders(<optional><parameter>$cbbmode</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegendColorboxBorders</function> controls the appearance of the
borders around the color boxes in the legend. The borders can be off, on
using the Text color, or on using the set of Data Border colors.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$cbbmode</replaceable></term>
        <listitem>
          <para>
Optional string indicating the color mode for the legend color boxes.
If supplied, it must be one of the following values:
            <informaltable>
             <?dbfo table-width="40%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="SetLegendColorboxBorders parameter values"?>
                <colspec colname="c1" colwidth="40*" />
                <colspec colname="c2" colwidth="60*" />
                <thead>
                  <row>
                    <entry>Mode</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>none</entry>
                    <entry>No color box borders are drawn</entry>
                  </row>
                  <row>
                    <entry>textcolor</entry>
                    <entry>Use the Textcolor for all legend color boxes</entry>
                  </row>
                  <row>
                    <entry>databordercolor</entry>
                    <entry>Use successive entries from the Data Border
                        Colors array for each legend color box</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
If omitted, <literal>textcolor</literal> is used.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, the color boxes are drawn using the text color set with
<xref linkend="SetTextColor"/>, which defaults to black.
    </para>
    <para>
If the color box border mode is <literal>databordercolor</literal>,
then the colors set with <xref linkend="SetDataBorderColors"/> are used.
(These are the same colors used as borders for the bars in a bar chart.)
The top line (or bottom line, if <xref linkend="SetLegendReverse"/>(True) is
used) in the legend will have a color box using the first data color
(see <xref linkend="SetDataColors"/>) and a border using the first data border
color, etc.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.0.0. In earlier releases, the legend
color boxes always had a border using the text color.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegendPixels">
  <refmeta>
    <refentrytitle>SetLegendPixels</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegendPixels</refname>
    <refpurpose>Position the legend on the image (device coordinates)</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLegendPixels(<optional><parameter>$x</parameter>, <parameter>$y</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegendPixels</function> lets you position the legend on the
image, using device coordinates, rather than letting PHPlot position it for you.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$x</replaceable></term>
        <term><replaceable>$y</replaceable></term>
        <listitem>
          <para>
Absolute device coordinates of the upper left corner of the legend box.
The units are pixels and the origin is in the upper left corner of the image.
If the values are omitted or NULL, the default behavior is restored.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="conc-legend"/> for more on the plot legend.
    </para>
    <para>
The default behavior is for PHPlot to position the legend in the
upper right corner of the plot area.
    </para>
    <para>
See <xref linkend="SetLegendPosition"/> for more flexible legend
positioning options.
<literal>SetLegendPixels($x, $y)</literal> is equivalent to
<literal>SetLegendPosition(0, 0, 'image', 0, 0, $x, $y)</literal>.
This places the top left corner of the legend at the top left corner of the
image, offset by ($x, $y) pixels.
    </para>
    <para>
See also <xref linkend="SetLegendWorld" />.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.3.0, the arguments were required.
To restore the default behavior, it was necessary to use
<literal>SetLegendPixels(NULL, NULL)</literal>.
Starting with PHPlot-5.3.1, the arguments may be omitted to restore the
default behavior.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegendPosition">
  <refmeta>
    <refentrytitle>SetLegendPosition</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegendPosition</refname>
    <refpurpose>Position the legend</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
<!-- This is a verbatim environment, too long for 1 PDF line -->
    <synopsis>$plot-&gt;SetLegendPosition(<parameter>$x</parameter>, <parameter>$y</parameter>, <parameter>$relative_to</parameter>, <parameter>$x_base</parameter>, <parameter>$y_base</parameter>,
       <optional><parameter>$x_offset</parameter></optional>, <optional><parameter>$y_offset</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegendPosition</function> lets you position the legend on the
image, using <link linkend="def-relativecoor">relative coordinates</link>,
world coordinates, or device (pixel) coordinates.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$x</replaceable></term>
        <term><replaceable>$y</replaceable></term>
        <listitem>
          <para>
Relative coordinates of a point on the legend box to use as a reference.
The coordinates are relative to the size of the legend box, with the upper
left corner as (0.0, 0.0) and the lower right corner as (1.0, 1.0).
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$relative_to</replaceable></term>
        <listitem>
          <para>
A string indicating how the next two parameters ($x_base, $y_base) are
interpreted. Accepted values are: image, plot, world, or title. See the
description of the next parameters for details.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$x_base</replaceable></term>
        <term><replaceable>$y_base</replaceable></term>
        <listitem>
          <para>
Reference point for positioning the legend. The interpretation depends on
the previous parameter $relative_to as follows.
            <informaltable>
              <?dbfo table-width="100%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="Legend position relative to choices"?>
                <colspec colname="c1" colwidth="18*" />
                <colspec colname="c2" colwidth="82*" />
                <thead>
                  <row>
                    <entry>$relative_to</entry>
                    <entry>$x_base, $y_base</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>image</entry>
                    <entry>
Relative coordinates of a point on the image.
The point on the legend box indicated by ($x, $y) is placed at this point.
These coordinates are relative to the size of the image, with (0.0, 0.0)
being the upper left corner, and (1.0, 1.0) being the lower right corner.
                    </entry>
                  </row>
                  <row>
                    <entry>plot</entry>
                    <entry>
Relative coordinates of a point on the plot area. (The plot area is
generally the area enclosed by the X and Y axis lines.)
The point on the legend box indicated by ($x, $y) is placed at this point.
These coordinates are relative to the size of the plot area, with (0.0, 0.0)
being the upper left corner, and (1.0, 1.0) being the lower right corner.
                    </entry>
                  </row>
                  <row>
                    <entry>title</entry>
                    <entry>
Relative coordinates of a point in the main plot title.
The point on the legend box indicated by ($x, $y) is placed at this point.
These coordinates are relative to a bounding box which encloses the main
plot title, with (0.0, 0.0) being the upper left corner of the title,
and (1.0, 1.0) being the lower right corner.
                    </entry>
                  </row>
                  <row>
                    <entry>world</entry>
                    <entry>
World coordinates
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$x_offset</replaceable></term>
        <term><replaceable>$y_offset</replaceable></term>
        <listitem>
          <para>
Optional arguments specifying an additional offset for the legend, in device
(pixel) coordinates. After the legend position has been calculated using
the preceding arguments, this offset is added to the position. It can be
used to move the legend a little bit away from the edge of the image or
plot, for example. If not specified, no offset is applied.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="conc-legend"/> for more on the plot legend.
    </para>
    <para>
For examples of using <function>SetLegendPosition</function>, see
<xref linkend="ex-legendpos"/>.
    </para>
    <para>
By default, PHPlot will position the legend in the upper right corner of
the plot area, with a small offset. This is equivalent to:
<programlisting><![CDATA[$plot->SetLegendPosition(1, 0, 'plot', 1, 0, -5, 5);
]]></programlisting>
The default behavior can be restored by using NULL for the $x and $y arguments
(or the $x_offset and $y_offset arguments)
in <function>SetLegendPosition</function>.
That is, using NULL for any of those arguments undoes any previous call to
SetLegendPosition, SetLegendPixels, and SetLegendWorld.
    </para>
    <para>
See <xref linkend="SetLegendPixels"/> and <xref linkend="SetLegendWorld"/>
for simpler forms of legend positioning.
    </para>
    <para>
<literal>SetLegendWorld($x, $y)</literal> is equivalent to
<literal>SetLegendPosition(0, 0, 'world', $x, $y)</literal>.
    </para>
    <para>
<literal>SetLegendPixels($x, $y)</literal> is equivalent to
<literal>SetLegendPosition(0, 0, 'image', 0, 0, $x, $y)</literal>.
    </para>
    <para>
The value of each of X and Y used in relative coordinates are usually in the
range (0.0 &lt;= x, y &lt;= 1.0), but this is not required by PHPlot.
For the legend box reference point ($x, $y) or when using 'title' or
'plot' mode ($base_x, $base_y), a value outside this range may be used to
refer to a point outside the object. For example, using (-1, -1) for ($x, $y)
indicates a point above and to the left of the upper left corner of the
legend box at a distance equal to the width and height of the legend box.
Relative coordinates outside this range for 'image' mode ($base_x, $base_y)
will be outside the image and not visible.
    </para>
    <para>
Positioning relative to 'world' will not work with pie charts, because they
have no valid world coordinates.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.4.0, and
<xref linkend="SetLegendPixels"/> and <xref linkend="SetLegendWorld"/>
were changed to be simple wrappers that call
<function>SetLegendPosition</function>.
No other legend positioning methods were available in earlier releases.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegendReverse">
  <refmeta>
    <refentrytitle>SetLegendReverse</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegendReverse</refname>
    <refpurpose>Control the order of text lines in the legend</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLegendReverse(<parameter>$reverse</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegendReverse</function> is used to change the order of entries
in the legend.
A legend is drawn if <xref linkend="SetLegend" /> is used.
The legend consists of a series of text strings and color boxes or shape
markers.
The contents of the legend helps identify the different data sets in the
plot (for example, the separate plot lines).
The legend line identifying the first data set is normally drawn at the top
of the legend, with the rest of the lines in order below it.
<function>SetLegendReverse</function> can be used to reverse that order, so
the line for the first data set is drawn at the bottom of the legend.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$reverse</replaceable></term>
        <listitem>
          <para>
True to reverse the order of legend entries (bottom up), False to keep the
default order (top down).
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The main use of this function is to set the legend line order for
<link linkend="plottype-stackedarea">stackedarea</link>,
<link linkend="plottype-stackedbars">stackedbars</link>, and
<link linkend="plottype-stackedsquaredarea">stackedsquaredarea</link> plots.
In these plot types, the first data set (bar segment or area section) is
plotted along the the bottom of the plot, with subsequent data sets in
order above it. By default, a legend for these plot types will correctly
identify the data sets by color, but the entries in the legend will be in
the opposite order compared to the data sets and colors on the plot.
Use <literal>$plot->SetLegendReverse(True)</literal> with these plot types
to keep the legend entries and plotted data sets in the same order.
    </para>
    <para>
See <xref linkend="ex-stackedbars2"/> for an example showing the legend
ordering reversal, compared to <xref linkend="ex-stackedbars1"/>.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added to PHPlot-5.5.0.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegendStyle">
  <refmeta>
    <refentrytitle>SetLegendStyle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegendStyle</refname>
    <refpurpose>Control the appearance of the legend</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLegendStyle(<parameter>$text_align</parameter>, <optional><parameter>$colorbox_align</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegendStyle</function> controls the appearance of the legend,
which is drawn if <xref linkend="SetLegend" /> is used.  The legend
contains of a series of text strings and either color boxes or shape markers,
identifying the plot lines.  SetLegendStyle sets the alignment of
the text strings and color boxes or shapes markers.  First the color boxes or
shapes markers are aligned within the legend box, left or right, and then the
text strings are aligned within the remaining space, left or right.
SetLegendStyle can also turn off the color boxes or shape markers.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$text_align</replaceable></term>
        <listitem>
          <para>
A string indicating the alignment of the text strings: 'left' or 'right'.
If 'left', the text strings are left-aligned between the legend box edge
and the color boxes or shape markers.
If 'right', the text strings are right-aligned between the legend box edge
and the color boxes or shape markers.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$colorbox_align</replaceable></term>
        <listitem>
          <para>
Optional string indicating the alignment of the color boxes or shape markers:
'left', 'right', or 'none'.
If 'left', they are drawn along the left side of the legend box.
If 'right', they are drawn along the right side of the legend box.
If 'none', no color boxes or shape markers are drawn.
If this parameter is omitted, the same alignment as $text_align is used.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="conc-legend"/> for more on the plot legend.
    </para>
    <para>
By default, the color boxes or shape markers are lined up along the right side
of the legend box, and the text strings are right-aligned just left of the
color boxes or shape markers.
The following figure shows the four possible alignment choices.
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/legendstyle.png" scale="58" format="PNG" />
          </imageobject>
          <textobject>
            <phrase>Four possible text/color box alignment choices</phrase>
          </textobject>
        </mediaobject>
      </informalfigure>
    </para>
    <para>
Using 'none' for $colorbox_align results in a legend with only text lines.
This is not recommended for multi-line or multi-dataset plots, unless you
have provided some other way to indicate which legend text line goes with
which plot, or if you are using the legend for some purpose other than
identifying the plot lines.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
In PHPlot-6.0, the term 'point shapes' was replaced with 'shape markers',
since PHPlot can now produce markers for line plots as well. (There was no
change to the behavior of <function>SetLegendStyle</function> - only the
description changed.)
    </para>
    <para>
The option to use point shapes instead of color boxes in the legend
was added in PHPlot-5.4.0.  See <xref linkend="SetLegendUseShapes"/>.
In earlier releases, the <literal>$colorbox_align</literal> parameter to
<function>SetLegendStyle</function> only applied to color boxes.
    </para>
    <para>
Through PHPlot-5.3.1, there was an optional third parameter
<literal>$style</literal>, which was intended for possible future use
but was never used. It was removed at PHPlot-5.4.0.
    </para>
    <para>
This function was added to PHPlot-5.0.4.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegendTextColor">
  <refmeta>
    <refentrytitle>SetLegendTextColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegendTextColor</refname>
    <refpurpose>Set legend text color</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLegendTextColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegendTextColor</function> sets the color used for lines of text
in the legend.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If <function>SetLegendTextColor</function> is not used, text in the legend
will be drawn using the general text color as set with
<xref linkend="SetTextColor"/>.
The default for the general text color is black.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.0.0. In earlier releases, the text
in the legend was always drawn using the general text color.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegendUseShapes">
  <refmeta>
    <refentrytitle>SetLegendUseShapes</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegendUseShapes</refname>
    <refpurpose>Use color boxes or shape markers in the legend</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLegendUseShapes(<parameter>$use_shapes</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegendUseShapes</function> sets the legend to use either color
boxes or shapes marker to show which legend line goes with which data set.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$use_shapes</replaceable></term>
        <listitem>
          <para>
A boolean value: true to use shape markers, false to use color boxes.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, the legend is drawn with color boxes.
    </para>
    <para>
Use of <literal>SetLegendUseShapes(True)</literal> instructs PHPlot to use
an alternate marker in the legend. The marker depends on the
<link linkend="conc-plottypes">plot type</link> used in the plot.
      <itemizedlist>
        <listitem>
          <para>
For <link linkend="plottype-points">points</link> and
<link linkend="plottype-linepoints">linepoints</link> plots,
the alternate marker is the point shape used to identify the data set in
the plot.
          </para>
        </listitem>

        <listitem>
          <para>
For <link linkend="plottype-lines">lines</link> and
<link linkend="plottype-squared">squared</link> plots,
the alternate marker is a short horizontal line segment matching the
corresponding data set line in the plot.
          </para>
        </listitem>

        <listitem>
          <para>
For all other plot types, no alternate marker is defined, and
<function>SetLegendUseShapes</function> is ignored.
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
When shape markers are enabled using
<function>SetLegendUseShapes(True)</function>,
PHPlot will first draw a solid box with the same color as the plot area
background (if plot area background color is enabled with
<xref linkend="SetPlotBgColor"/> and
<xref linkend="SetDrawPlotAreaBackground"/>).
Then it will draw the shape marker, overlaying the background box.
    </para>

    <para>
Point shape markers will have the same color and size as the
point shape used in the plot for the corresponding data set.
Note that PHPlot will not adjust the legend box size or line spacing based on
the point shape sizes set with <xref linkend="SetPointSizes"/>.
If the point shapes are too big, they will overflow their allocated space
and overlap.  You can control the legend text line height to account for large
point shapes by adjusting the line spacing parameter (using
<xref linkend="SetLineSpacing"/>, <xref linkend="SetFont"/>,
or related font control functions.
    </para>

    <para>
Line segment markers will have the same color, line width, and style as the
lines used in the corresponding data set.
The area reserved in the legend for color boxes or shape markers is
automatically made 4 times wider when line segment markers are used,
in order to improve visibility.
    </para>

    <para>
For examples of legends with color boxes and shape markers,
see <xref linkend="ex-legendshape"/>.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
PHPlot-6.0.0 added a third type of shape marker for legends: line segments,
and <function>SetLegendUseShapes</function> now applies to more plot types.
Before PHPlot-6.0.0, only color boxes and point shape markers
were available, and <function>SetLegendUseShapes</function>
was ignored with plot types other than <literal>points</literal> and
<literal>linepoints</literal>.
    </para>
    <para>
This function was added to PHPlot-5.4.0.
Before that, only color boxes were available in legends.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLegendWorld">
  <refmeta>
    <refentrytitle>SetLegendWorld</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLegendWorld</refname>
    <refpurpose>Position the legend on the image (world coordinates)</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLegendWorld(<parameter>$x</parameter>, <parameter>$y</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLegendWorld</function> lets you position the legend on the
image, using world coordinates, rather than letting PHPlot position it for you.
(World coordinates are the coordinate space of your data points.)
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$x</replaceable></term>
        <term><replaceable>$y</replaceable></term>
        <listitem>
          <para>
World coordinates of the upper left corner of the legend box.
The units and origin are the same as the data you are plotting.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="conc-legend"/> for more on the plot legend.
    </para>
    <para>
The default behavior is for PHPlot to position the legend in the
upper right corner of the plot area.
    </para>
    <para>
See <xref linkend="SetLegendPosition"/> for more flexible legend
positioning options.
<literal>SetLegendWorld($x, $y)</literal> is equivalent to
<literal>SetLegendPosition(0, 0, 'world', $x, $y)</literal>.
This places the top left corner of the legend at world coordinates $x, $y
with no pixel offset.
    </para>
    <para>
See also <xref linkend="SetLegendPixels" />.
    </para>
    <para>
This function will not work with pie charts, because they have no valid
world coordinates.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function did actually work with pie charts through PHPlot-5.5.0,
although we are not sure what it did, since pie charts do not have valid
world coordinates.
    </para>
    <para>
Through PHPlot-5.0rc3, it was required that the
data array, axis types, and any other setting which affects the scale of
the data be set up before this function is used.
Starting at PHPlot-5.0.4 this is no longer required, as the coordinates
you supply are not scaled until the plot is drawn.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLightGridColor">
  <refmeta>
    <refentrytitle>SetLightGridColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLightGridColor</refname>
    <refpurpose>Set the color for grid lines and data label lines</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLightGridColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLightGridColor</function> sets the color used for the X and Y
grid lines.
This color is also used for X data label lines, if enabled with
<xref linkend="SetDrawXDataLabelLines"/>,
and for Y data label lines, if enabled with
<xref linkend="SetDrawYDataLabelLines"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default color is gray.
    </para>
    <para>
This function, not <xref linkend="SetGridColor" />, sets the color for the
grid lines.
    </para>
  </refsect1>
</refentry>

<refentry id="SetLineSpacing">
  <refmeta>
    <refentrytitle>SetLineSpacing</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLineSpacing</refname>
    <refpurpose>Set spacing between lines of multi-line text elements</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLineSpacing(<parameter>$spc</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLineSpacing</function> sets the default spacing between lines
of a multi-line text element. Multiple lines can be specified in titles,
for example, by placing a newline between lines (for example: "Line 1\nLine
2"). Line spacing also affects the legend.
You can override the default line spacing for individual text elements
(such as the X title) using <xref linkend="SetFont"/>,
<xref linkend="SetFontGD"/>, and <xref linkend="SetFontTTF"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$spc</replaceable></term>
        <listitem>
          <para>
Desired default line spacing factor.
For the built-in GD fonts, this is the number of pixels between lines.
For TrueType fonts, this is an adjustment factor for the font's built-in
line spacing (see notes).
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default line spacing value is 4. For GD fonts, this is the number of
pixels between text lines, and is independent of the font size.
    </para>
    <para>
TrueType fonts have a built-in line spacing amount, which is the distance
between the baseline of one text line and the top of the next text line.
With TrueType text, PHPlot uses the line spacing value (set with SetLineSpacing
or one of the SetFont functions) as an adjustment factor for this built-in
line spacing. A value of 4 produces the built-in line spacing, lower values
reduce the spacing and larger values increase the spacing. A value of 0 for
line spacing would result in the baseline of one line nearly touching the
top of the next line.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
The interpretation of the line spacing as an adjustment factor for TrueType
text, rather than a value in pixels, began with PHPlot-5.0.6. This is also
when the line spacing could be adjusted for each text element.
    </para>
    <para>
At PHPlot-5.0.5, line spacing was the number of pixels between lines of text,
for both GD or TrueType fonts.
Before PHPlot-5.0.5, line spacing did not affect TrueType font text at all,
except in the legend.
    </para>
    <para>
Before PHPlot-5.0.5, the line spacing had to be set before setting titles,
because the title height was calculated when setting the title. This
restriction was removed in PHPlot-5.0.5, so line spacing and titles can be
set in either order.
    </para>

  </refsect1>
</refentry>

<refentry id="SetLineStyles">
  <refmeta>
    <refentrytitle>SetLineStyles</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLineStyles</refname>
    <refpurpose>Set the line style (solid or dashed) for each data set</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLineStyles(<parameter>$ls</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLineStyles</function> selects the line style for each plotted
data set.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ls</replaceable></term>
        <listitem>
          <para>
An array of strings, each either 'solid', for solid lines; 'dashed', for
dashed lines, or 'none', to suppress the lines (see notes).
Or, a single value of 'solid' or 'dashed' to apply to all data sets.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$ls</parameter>, it
must use zero-based sequential integer indexes.
    </para>
    <para>
The line style for dashed lines can be set with
<xref linkend="SetDefaultDashedStyle" />.
    </para>
    <para>
By default, the line styles are 'solid', 'solid', and 'dashed'.
(As with all style arrays, PHPlot duplicates the array as needed for the
number of data sets to be plotted.)
This means the 3rd and 6th data sets will plot as dashed lines unless you
use SetLineStyles to change it.
    </para>
    <para>
A line style can be set to 'none' to suppress the line for that data set.
This is only useful with 'linepoints' plot types, and results in a 'points'
plot type for that data set: markers only, but no lines.
(This is available with PHPlot-5.0rc3 and higher.)
    </para>
  </refsect1>
</refentry>

<refentry id="SetLineWidths">
  <refmeta>
    <refentrytitle>SetLineWidths</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetLineWidths</refname>
    <refpurpose>Set line width (thickness) for each data set</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetLineWidths(<parameter>$lw</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetLineWidths</function> sets the desired line width to be used
when plotting each data set.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$lw</replaceable></term>
        <listitem>
          <para>
An array of line widths in pixels, one for each data set to be plotted.
Or, a single value to be used for all data sets.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$lw</parameter>, it
must use zero-based sequential integer indexes.
    </para>
    <para>
The plot types that support using different line widths for the data sets
being plotted are:
<link linkend="plottype-lines">lines</link>,
<link linkend="plottype-linepoints">linepoints</link>,
<link linkend="plottype-squared">squared</link>, and
<link linkend="plottype-thinbarline">thinbarline</link>.
In addition, you can use <function>SetLineWidths</function> with some
other plot types which support only a single data set but use multiple
line widths in a plot-specific way:
<link linkend="plottype-boxes">boxes</link>,
<link linkend="plottype-candlesticks">candlesticks</link>,
<link linkend="plottype-candlesticks2">candlesticks2</link>, and
<link linkend="plottype-ohlc">ohlc</link>.
Line widths do not apply to all other plot types.
    </para>
    <para>
By default, all data set plot lines are 1 pixel wide.
    </para>
  </refsect1>
</refentry>

<refentry id="SetMarginsPixels">
  <refmeta>
    <refentrytitle>SetMarginsPixels</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetMarginsPixels</refname>
    <refpurpose>Set margins around the plot area</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetMarginsPixels(<optional><parameter>$lm</parameter></optional>, <optional><parameter>$rm</parameter></optional>, <optional><parameter>$tm</parameter></optional>, <optional><parameter>$bm</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetMarginsPixels</function> sets the size of the margins around
the plot area.  By default, the margin sizes are automatically calculated
based on the space needed.  Use SetMarginsPixels to override these
automatic calculations and set specific margin sizes.  The four margins are
specified independently and in pixels.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$lm</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the left margin, in pixels.
If omitted or NULL, the value is automatically calculated.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$rm</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the right margin, in pixels.
If omitted or NULL, the value is automatically calculated.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$tm</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the top margin, in pixels.
If omitted or NULL, the value is automatically calculated.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$bm</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the bottom margin, in pixels.
If omitted or NULL, the value is automatically calculated.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The plot area is equal to the image area minus the margins. By default, the
margins are automatically calculated based on
the space needed for items <emphasis>outside</emphasis> the plot area. The
plot area is then whatever space remains. Calculation for most plot types
takes into account the main title, axis titles, tick or data labels, and tick
marks (but not the legend, if drawn). For pie charts, only the main title
size is used when calculating the needed margins.
Use SetMarginsPixels to override these automatic calculations and
control the margins.
    </para>
    <para>
The upper left corner of the plot area is at device coordinates
(Left_Margin, Top_Margin).
The lower right corner of the plot area is at device coordinates
(Image_Width - Right_Margin, Image_Height - Bottom_Margin).
    </para>
    <para>
SetMarginsPixels and <xref linkend="SetPlotAreaPixels"/> perform the same
function with different semantics. It makes no sense to use both - only the
last one called will have an effect.
    </para>
    <para>
Trailing defaulted arguments can be omitted, but non-trailing defaulted
arguments must be specified as NULL. For example, to set the right margin
to 100 pixels, and let PHPlot calculate the other three margins, use:
      <programlisting><![CDATA[$plot->SetMarginsPixels(NULL, 100);
]]></programlisting>
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.6, SetMarginsPixels required all 4 arguments be
specified and not be NULL. Starting with PHPlot-5.0.7, each margin can
either be specified or automatically calculated.
    </para>
  </refsect1>
</refentry>

<refentry id="SetNumberFormat">
  <refmeta>
    <refentrytitle>SetNumberFormat</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetNumberFormat</refname>
    <refpurpose>Set the separators used when formatting number labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetNumberFormat(<parameter>$decimal_point</parameter>, <parameter>$thousands_sep</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetNumberFormat</function> sets the separator characters used when
formatting number labels. Labels are formatted as numbers when the 'data'
format type is selected with
<xref linkend="SetXLabelType" /> or <xref linkend="SetYLabelType" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$decimal_point</replaceable></term>
        <listitem>
          <para>
The character used as a decimal point, to separate the integer part of the
label from the fraction part.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$thousands_sep</replaceable></term>
        <listitem>
          <para>
The character used as a thousands grouping separator (placed between every
group of 3 digits left of the decimal point).
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
These separators are only used for labels when 'data' mode formatting is
selected with
<xref linkend="SetXLabelType" /> or <xref linkend="SetYLabelType" />.
    </para>
    <para>
If <function>SetNumberFormat</function> is not used, PHPlot attempts to get
the proper separator characters from your system locale. If this works and
your locale is set correctly, you will probably not need to use this function.
If locale information is not available, the default for decimal_point is
a period, and the default for thousands_sep is a comma.
    </para>
    <para>
If your system locale is set to "C" or "POSIX", you might find that there
are no thousands separators in your formatted labels. This is the correct
behavior for those locales. If you cannot select a more specific locale,
use <function>SetNumberFormat</function> to set the correct separators.
    </para>
    <para>
To set the number of decimal places, use
<xref linkend="SetPrecisionX" /> and <xref linkend="SetPrecisionY" />.
    </para>
    <para>
If you are trying to force a specific locale with setlocale(), it will not
work, because PHPlot uses setlocale(LC_ALL, '') to import locale
information from the system, and this overrides a forced locale from your
script. On non-Windows platforms, you can force a locale using environment
variables, but this does not work on Windows. To address this,
PHPlot has (see the History section below) a special member variable
<parameter>locale_override</parameter> that prevents PHPlot from importing
locale settings from the system. For example, if the following code is used,
numeric formatting will use the fr_CA locale settings, regardless of
the system locale.
      <programlisting><![CDATA[setlocale(LC_ALL, 'fr_CA');  # On Windows use: 'French_Canada'
$plot = new PHPlot(800, 600);
$plot->locale_override = True;
]]></programlisting>
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
The <parameter>locale_override</parameter> hook was added in PHPlot-5.1.0.
Before that, there was no way to force a specific locale on Windows, and on
other platforms a locale could be forced only by using environment variables.
The hook was added primarily for testing on Windows, but could be needed in
other situations too.
    </para>
    <para>
This function was added to PHPlot-5.0.4. Versions up to and including 5.0rc3
always used a period for decimal point, and comma for thousands separator.
    </para>
  </refsect1>
</refentry>

<refentry id="SetNumXTicks">
  <refmeta>
    <refentrytitle>SetNumXTicks</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetNumXTicks</refname>
    <refpurpose>Set the number of X tick intervals</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetNumXTicks(<optional><parameter>$nt</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetNumXTicks</function> sets the number of tick intervals along
the X axis.
You can use either this function or <xref linkend="SetXTickIncrement" />
(but not both) to control the tick mark spacing.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$nt</replaceable></term>
        <listitem>
          <para>
Integer number of tick intervals.
If the value is omitted or an empty string, the default behavior is restored.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
<function>SetNumXTicks</function> sets the number of intervals into
which PHPlot divides the X data range.  If there are N intervals, there might
be as many as N+1 tick marks (accounting for one at each end).
Or, there might be N or N-1 tick marks, if a tick anchor is set with
<xref linkend="SetXTickAnchor"/>, or if PHPlot is told to omit tick marks from
either end with <xref linkend="SetSkipLeftTick"/>
or <xref linkend="SetSkipRightTick"/>.
    </para>
    <para>
If you use <function>SetNumXTicks</function>, you will get exactly that many
tick intervals, regardless of whether the resulting tick increment is a
whole number. In general, you would only use <function>SetNumXTicks</function>
when also using <xref linkend="SetPlotAreaWorld"/> to specify both ends
of the X plot range. For example:
      <programlisting><![CDATA[$plot->SetPlotAreaWorld(0, NULL, 200);
$plot->SetNumXTicks(10);
]]></programlisting>
You will have an X range from 0 to 200, with 10 intervals of 20 units.
    </para>
    <para>
If neither <function>SetNumXTicks</function> nor 
<xref linkend="SetXTickIncrement" /> is used, the tick interval
is automatically calculated by PHPlot.
See <xref linkend="adv-autorange-tick"/> for details.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Before PHPlot-6.0.0, if neither the number of ticks nor the tick increment
was specified, PHPlot calculated the tick increment as 1/10 of the X data
range.
Starting with PHPlot-6.0.0, a more complex algorithm is used which tries
to produce 'natural' tick increments.
    </para>

    <para>
Starting with PHPlot-6.0.0, if you call both <function>SetNumXTicks</function>
and <function>SetXTickIncrement</function>, the tick increment has priority
and the specified number of ticks is ignored.
Before PHPlot-6.0.0, the behavior was order-dependent: whichever function
was used last had priority.
    </para>

    <para>
Through PHPlot-5.3.0, the argument was required.
To restore the default behavior, it was necessary to use
<literal>SetNumXTicks('')</literal>.
Starting with PHPlot-5.3.1, the argument may be omitted to restore the
default behavior.
    </para>
  </refsect1>
</refentry>

<refentry id="SetNumYTicks">
  <refmeta>
    <refentrytitle>SetNumYTicks</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetNumYTicks</refname>
    <refpurpose>Set the number of Y tick intervals</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetNumYTicks(<optional><parameter>$nt</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetNumYTicks</function> sets the number of tick intervals along
the Y axis.
You can use either this function or <xref linkend="SetYTickIncrement" />
(but not both) to control the tick mark spacing.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$nt</replaceable></term>
        <listitem>
          <para>
Integer number of tick intervals.
If the value is omitted or an empty string, the default behavior is restored.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
<function>SetNumYTicks</function> sets the number of intervals into
which PHPlot divides the Y data range.  If there are N intervals, there might
be as many as N+1 tick marks (accounting for one at each end).
Or, there might be N or N-1 tick marks, if a tick anchor is set with
<xref linkend="SetYTickAnchor"/>, or if PHPlot is told to omit tick marks from
either end with <xref linkend="SetSkipBottomTick"/>
or <xref linkend="SetSkipTopTick"/>.
    </para>
    <para>
If you use <function>SetNumYTicks</function>, you will get exactly that many
tick intervals, regardless of whether the resulting tick increment is a
whole number. In general, you would only use <function>SetNumYTicks</function>
when also using <xref linkend="SetPlotAreaWorld"/> to specify both ends
of the Y plot range. For example:
      <programlisting><![CDATA[$plot->SetPlotAreaWorld(NULL, -10, NULL, 10);
$plot->SetNumXTicks(20);
]]></programlisting>
You will have a Y range from -10 to 10, with 20 intervals of 1 unit each.
    </para>
    <para>
If neither <function>SetNumYTicks</function> nor 
<xref linkend="SetYTickIncrement" /> is used, the tick interval
is automatically calculated by PHPlot.
See <xref linkend="adv-autorange-tick"/> for details.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Before PHPlot-6.0.0, if neither the number of ticks nor the tick increment
was specified, PHPlot calculated the tick increment as 1/10 of the Y data
range.
Starting with PHPlot-6.0.0, a more complex algorithm is used which tries
to produce 'natural' tick increments.
    </para>

    <para>
Starting with PHPlot-6.0.0, if you call both <function>SetNumYTicks</function>
and <function>SetYTickIncrement</function>, the tick increment has priority
and the specified number of ticks is ignored.
Before PHPlot-6.0.0, the behavior was order-dependent: whichever function
was used last had priority.
    </para>

    <para>
Through PHPlot-5.3.0, the argument was required.
To restore the default behavior, it was necessary to use
<literal>SetNumYTicks('')</literal>.
Starting with PHPlot-5.3.1, the argument may be omitted to restore the
default behavior.
    </para>
  </refsect1>
</refentry>

<refentry id="SetOutputFile">
  <refmeta>
    <refentrytitle>SetOutputFile</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetOutputFile</refname>
    <refpurpose>Redirect PHPlot output to a file</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetOutputFile(<parameter>$output_file</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetOutputFile</function> arranges for image output to be sent to
a file instead of to the browser (or standard output). By default, output
is sent to the browser (or standard output, if running from the command
line).
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$output_file</replaceable></term>
        <listitem>
          <para>
Pathname of the file to write the image data into.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The output file will only be produced if <xref linkend="SetIsInline" />(True) is
called.
    </para>
    <para>
By default, there is no output file, and the image is written to the browser
or standard output.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPieAutoSize">
  <refmeta>
    <refentrytitle>SetPieAutoSize</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPieAutoSize</refname>
    <refpurpose>Enable or disable automatic pie chart size calculation</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPieAutoSize(<parameter>$enable</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPieAutoSize</function> controls the automatic pie chart size
calculation. When this is enabled, PHPlot calculates the size of the pie
by taking the label sizes into account.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$enable</replaceable></term>
        <listitem>
          <para>
<literal>True</literal> to enable automatic size calculation,
or <literal>False</literal> to use the maximum area.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, automatic pie chart sizing is enabled.
    </para>
    <para>
If automatic pie chart sizing is disabled, PHPlot will make the pie as
large as possible to fit within the plot area (see
<xref linkend="SetPlotAreaPixels"/>), minus a small 5-pixel margin on each
side. The center of the pie is always at the center of the plot area.
    </para>
    <para>
If automatic pie chart sizing is enabled, PHPlot will leave additional room
within the plot area for the pie chart labels. It will calculate the maximum
width and height of the labels, and use these to increase the margins. Note
that it does not take into account where each label is displayed. For
example, if there is a very wide label displayed only at the top of the pie,
this will still result in a decrease in overall pie width.
    </para>
    <para>
If pie labels are either disabled or positioned inside the pie
(using <xref linkend="SetLabelScalePosition"/>),
then <function>SetPieAutoSize()</function> has no effect.
Whether automatic sizing is on or off, the pie chart will use the maximum
size in this case, since no additional space is needed for labels.
    </para>
    <para>
With automatic pie chart sizing enabled, PHPlot prevents overly long labels
from resulting in a pie chart which is too small.  It does this by limiting
the minimum pie size to one half of the plot width or height, even if this
causes labels to run off the edge.
This behavior can be adjusted - see <xref linkend="adv-tuning-pie"/> for more.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.6.0. In earlier releases, PHPlot never
took label sizes into account when calculating the pie size. Note that the
default <literal>True</literal> is not backward compatible.
However, there were additional changes made to pie chart sizing and label
positioning in PHPlot-5.6.0, such that neither enabling nor disabling
automatic sizing will produce identical results compared to previous releases.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPieBorderColor">
  <refmeta>
    <refentrytitle>SetPieBorderColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPieBorderColor</refname>
    <refpurpose>Set the color for pie chart segment borders</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPieBorderColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPieBorderColor</function> sets the color which is used for
borders drawn around pie chart segments (if enabled).
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If <function>SetPieBorderColor</function> is not used, pie chart segment
borders (if enabled) are drawn using the color set with
<xref linkend="SetGridColor"/>.
If neither <function>SetPieBorderColor</function> nor
<function>SetGridColor</function> is used, the default color is black.
    </para>
    <para>
By default, pie chart segment borders are drawn for unshaded plots, and not
for shaded plots. See <xref linkend="SetDrawPieBorders"/> for more information.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.0.0. In earlier releases, pie chart
segment borders always used the color set with <xref linkend="SetGridColor"/>,
which also sets the color of other elements.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPieDirection">
  <refmeta>
    <refentrytitle>SetPieDirection</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPieDirection</refname>
    <refpurpose>Set the direction for pie chart segments</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPieDirection(<parameter>$which</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPieDirection</function> sets the direction for segments around
a pie chart - clockwise or counter-clockwise.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$which</replaceable></term>
        <listitem>
          <para>
Indicates the direction for pie segments.
Use the string <literal>'clockwise'</literal> or <literal>'CW'</literal>
to get segments in a clockwise direction.
Use the string <literal>'counterclockwise'</literal> or <literal>'CCW'</literal>
to get segments in a counter-clockwise direction.
(The argument value is not case sensitive.)
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default direction is counter-clockwise.
    </para>
    <para>
See also <xref linkend="SetPieStartAngle"/> which is used to set the
starting angle for the first pie segment.
    </para>
  </refsect1>

  <refsect1>
    <title>Example</title>
    <para>
See <xref linkend="ex-pieangle"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.0.0. Before that, pie chart segments
always started at 0 degrees and advanced in a counter-clockwise direction
around the pie.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPieLabelColor">
  <refmeta>
    <refentrytitle>SetPieLabelColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPieLabelColor</refname>
    <refpurpose>Set the color for pie chart data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPieLabelColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPieLabelColor</function> sets the color which is used for data
labels on pie charts.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If <function>SetPieLabelColor</function> is not used, pie chart data labels are
drawn using the text color set with <xref linkend="SetGridColor"/>.
If neither <function>SetPieLabelColor</function> nor
<function>SetGridColor</function> is used, the default color is black.
    </para>
    <para>
See also <xref linkend="conc-labels"/> for information about different
label types.
    </para>
    <para>
PHPlot has a deprecated function called <function>SetLabelColor</function>.
Do not use this function. It does not set the color used for labels.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.7.0. In earlier releases, the pie chart
data labels used the color set with <xref linkend="SetGridColor"/>, which
also sets the color of other elements. Although it would have made more sense
to use <xref linkend="SetDataLabelColor"/> to set the color for pie chart data
labels when that function was introduced, it would have not have been
backward compatible, since the default color comes from a different source.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPieLabelType">
  <refmeta>
    <refentrytitle>SetPieLabelType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPieLabelType</refname>
    <refpurpose>Set type and format for pie chart labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPieLabelType(<parameter>$source</parameter>, <optional><parameter>$type</parameter></optional>, <optional><parameter>...</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPieLabelType</function> sets the type and format of labels which
will be displayed on a <link linkend="plottype-pie">pie chart</link>.
The labels identify the segments of the pie. They can show the segment
percentage, a numeric value, or a text string.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
There is one required argument, $source, following by an optional argument
$type. If $type is present and not empty, additional arguments are required.
      <variablelist>
        <varlistentry>
          <term><replaceable>$source</replaceable></term>
          <listitem>
            <para>
A string or array indicating the source of the label. If a string, it must be
one of the following values (see notes for more details):
              <informaltable>
                <?dbfo table-width="75%"?> <!-- Table width hint for PDF only -->
                <tgroup cols="2">
                  <?dbhtml table-summary="SetPieLabelType source choices"?>
                  <colspec colname="c1" colwidth="14*" />
                  <colspec colname="c2" colwidth="86*" />
                  <thead>
                    <row>
                      <entry>Source</entry>
                      <entry>Description</entry>
                    </row>
                  </thead>
                  <tbody>
                    <row>
                      <entry>index</entry>
                      <entry>Use the ordinal number of the segment (starting at 0)</entry>
                    </row>
                    <row>
                      <entry>label</entry>
                      <entry>Use the label string from the data array</entry>
                    </row>
                    <row>
                      <entry>percent</entry>
                      <entry>Use the segment's percentage of the whole pie</entry>
                    </row>
                    <row>
                      <entry>value</entry>
                      <entry>Use the numeric value of the segment</entry>
                    </row>
                  </tbody>
                </tgroup>
              </informaltable>
An empty string (or NULL) restores the default pie chart label source and
format type.
            </para>
            <para>
An array of strings can be used. Each element in the array must be one of
the string values above. PHPlot will join the multiple sources for the label,
separating each pair with a space. This can be used with custom formatting
types to have pie chart labels with multiple fields (such as percentage and
label, or label and value). See notes below for more.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$type</replaceable></term>
          <listitem>
            <para>
Optional argument indicating how to format the label string. If supplied,
it can be one of the following:
<literal>data</literal>,
<literal>printf</literal>, or
<literal>custom</literal>.
If the argument is missing or an empty string, this indicates that the
default of no formatting should be used.
If the argument is provided and not empty, additional arguments are
required or optional as shown below.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
If the $type argument is <literal>data</literal>,
there are three optional arguments:
      <variablelist>
        <varlistentry>
          <term><replaceable>$precision</replaceable></term>
          <listitem>
            <para>
The formatting precision, or number of decimal places (optional).
If omitted, the default is 1.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$prefix</replaceable></term>
          <listitem>
            <para>
A prefix string to be placed before the formatted label values.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$suffix</replaceable></term>
          <listitem>
            <para>
A suffix string to be placed after the formatted label values.
When $source is <literal>percent</literal>, a percent sign '%' should be
specified as the suffix.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <para>
If the $type argument is <literal>printf</literal>,
there is one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format</replaceable></term>
          <listitem>
            <para>
Formatting string, used with <function>sprintf()</function>.
The formatting string must contain exactly one conversion specification
(%-code) which consumes a single argument.
If omitted, the default value of '%e' uses scientific notation with default
field sizes.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
If the $type argument is <literal>custom</literal>,
there is one required argument and one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$callback</replaceable></term>
          <listitem>
            <para>
A callback function to format the label. This is either the name of a
function (as a string), or a two-element array with an object instance and
method name. (Refer to the PHP documentation for more information on the
callback type.) The callback will be called with two arguments: the value
of the label to be formatted, and the pass-through argument (see next).
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$callback_arg</replaceable></term>
          <listitem>
            <para>
A pass-through argument for the callback function.
If omitted, NULL is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default formatting if this function is not called is to show the
percentage of each segment, formatted with one decimal point and a percent
sign suffix. This is the same as:
<programlisting><![CDATA[$plot->SetPieLabelType('percent', 'data', 1, '', '%');
]]></programlisting>
The default formatting can be restored by passing an empty string or NULL
as the $source argument.
(Note: The default precision can be changed; see History below.)
    </para>

    <para>
The formatting arguments starting with $type work exactly the same way as when
formatting X tick labels (for example) using <xref linkend="SetXLabelType"/>.
See there for formatting examples. Date/time formatted labels would also work
here, but are not documented for pie chart labels because they are unlikely to
be useful.
    </para>

    <para>
If $source is <literal>index</literal>, the label source is an integer
starting with 0 for the first pie segment, 1 for the second pie segment, etc.
(By default, segments are drawn counter-clockwise from 0 degrees, but this
can be changed.)
This can be useful with <literal>custom</literal> type formatting, by
providing a formatting function to get the label text from an external
array (for example).
    </para>

    <para>
If $source is <literal>label</literal>, the label source is taken from the
data array as set with <xref linkend="SetDataValues"/>.
This can only be used with data type
<link linkend="text-data-single">text-data-single</link>,
because that is the only data type where each data array row (and its
label, in the first array position) corresponds to a single pie segment.
    </para>

    <para>
If $source is <literal>percent</literal>, the label source is the
percentage of the pie represented by the segment being labeled.
This normally needs to used with $type = <literal>data</literal>,
<literal>printf</literal>, or <literal>custom</literal> formatting, in
order to get a fixed number of decimal places and a percent sign suffix.
Note that the following is probably not useful:
<programlisting><![CDATA[$plot->SetPieLabelType('percent'); // Do not use
]]></programlisting>
The resulting labels would display segment percentages, but as unformatted
floating point numbers with no suffix. For example, instead of "48.5%", the
label might display: "48.4865312". This is usually not the desired result.
    </para>

    <para>
If $source is <literal>value</literal>, the label source is the numeric
value of the pie segment.  Depending on the data type used, this is a value
or sum of values from the data array.
    </para>

    <para>
If $source is an array, the result is a string containing multiple
space-separated fields. This is most likely to be useful with custom formatting.
A custom label formatting function can split up the fields using
<function>explode(' ', $str)</function>.
Note: If one of the fields is a label which might contain spaces, always place
that field last when specifying the $source array, and use the 3rd parameter
to explode() to limit the number of fields returned. This will ensure that
the complete label is extracted as a single field.  See the last example below.
    </para>

    <para>
To adjust the position of the pie chart labels, see
<xref linkend="SetLabelScalePosition"/>.
To turn the labels off completely, use
<literal>SetLabelScalePosition(False)</literal>.
    </para>

    <para>
<function>SetPieLabelType</function> also supports the use of two or three
format strings with 'printf' formatting type, as described in
<xref linkend="SetXLabelType"/> and
<xref linkend="conc-labels-format-printf"/>.
(The additional format strings are used for negative numbers, or zero.)
But this feature is almost never useful with pie charts, where all pie slices
have size greater than zero.
    </para>

  </refsect1>

  <refsect1>
    <title>Examples</title>
    <para>
In addition to the examples in this section,
see <xref linkend="ex-pielabeltype"/>.
    </para>
    <para>
Assume plot type <literal>pie</literal>, data type
<literal>text-data-single</literal>, and the follow data array:
<programlisting><![CDATA[
$data = array(
    array('Gold',        20),
    array('Silver',      13),
    array('Copper',       7),
    array('Tin',         18),
    array('Bronze',      10),
    array('Iron',         4),
    array('Platinum',     2),
    array('Nickel',       5),
);
]]></programlisting>
    </para>

    <variablelist>
      <varlistentry>
        <term>
For the default behavior of percentage labels with numeric formatting,
do not call <function>SetPieLabelType</function>.
Result: <literal>25.3%, 16.5%, 8.9%</literal> etc.
        </term>
        <listitem><!-- empty section is needed or it flows to next -->
<programlisting><![CDATA[...]]></programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
Show segment indexes (ordinal segment number from 0).
Result: <literal>0, 1, 2</literal> etc.
        </term>
        <listitem>
<programlisting><![CDATA[$plot->SetPieLabelType('index');
]]></programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
Show label strings from the data array.
Result: <literal>Gold, Silver, Copper</literal> etc.
        </term>
        <listitem>
<programlisting><![CDATA[$plot->SetPieLabelType('label');
]]></programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
Show label strings from the data array, with quote marks added.
Result: <literal>"Gold", "Silver", "Copper"</literal> etc.
        </term>
        <listitem>
<programlisting><![CDATA[$plot->SetPieLabelType('label', 'printf', '"%s"');
]]></programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
Show the numeric value of each segment, unformatted.
Result: <literal>20, 13, 7</literal> etc.
        </term>
        <listitem>
<programlisting><![CDATA[$plot->SetPieLabelType('value');
]]></programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
Show the numeric value of each segment, formatted with 3 decimal places.
Result: <literal>20.000, 13.000, 7.000</literal> etc.
        </term>
        <listitem>
<programlisting><![CDATA[$plot->SetPieLabelType('value', 'data', 3);
]]></programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
Use a custom formatting function to convert the data array labels to
upper case.
Result: <literal>GOLD, SILVER, COPPER</literal> etc.
        </term>
        <listitem>
<programlisting><![CDATA[function mylabels($str)
{
    return strtoupper($str);
}
$plot->SetPieLabelType('label', 'custom', 'mylabels');
]]></programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
Combine multiple label sources: data array label and percentage.
Result: <literal>Gold (25.3%), Silver (16.5%), Copper (8.9%)</literal> etc.
        </term>
        <listitem>
<programlisting><![CDATA[function mylabels($str)
{
    list($percent, $label) = explode(' ', $str, 2);
    return sprintf("%s (%.1f%%)", $label, $percent);
}
$plot->SetPieLabelType(array('percent', 'label'), 'custom', 'mylabels');
]]></programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.6.0. In earlier releases, only 'percent'
label type was available, and the labels were always formatted as fixed-point
values (format type 'data').
    </para>
    <para>
Versions before PHPlot-5.6.0 used a numeric precision set with
<xref linkend="SetPrecisionY"/> or <xref linkend="SetYLabelType"/>
for pie chart percentage labels, with a default of 1 decimal place.
(This was not documented.)
PHPlot-5.6.0 still does that, but only if <function>SetPieLabelType</function>
was never called (or reset to all defaults). That is, if
<function>SetPieLabelType</function> was not called to set up a label source
and formatting type, the Y label precision will be used if set, else 1 digit.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPieStartAngle">
  <refmeta>
    <refentrytitle>SetPieStartAngle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPieStartAngle</refname>
    <refpurpose>Set the starting angle for pie chart segments</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPieStartAngle(<parameter>$angle</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPieStartAngle</function> sets the starting angle for the first
segment in a pie chart.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$angle</replaceable></term>
        <listitem>
          <para>
Starting angle in degrees
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default starting angle is 0 degrees.
This results in the first pie segment starting on the right-pointing
horizontal radius ("East"), and extending upwards in a counter-clockwise
direction (by default).
    </para>
    <para>
See also <xref linkend="SetPieDirection"/> which is used to set the
direction for pie chart segments - clockwise or counter-clockwise.
    </para>
  </refsect1>

  <refsect1>
    <title>Example</title>
    <para>
See <xref linkend="ex-pieangle"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.0.0. Before that, the first segment
of a pie chart always started at 0 degrees.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPlotAreaBgImage">
  <refmeta>
    <refentrytitle>SetPlotAreaBgImage</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPlotAreaBgImage</refname>
    <refpurpose>Set a graphic file to be used in the plot area background</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPlotAreaBgImage(<parameter>$input_file</parameter>, <optional><parameter>$mode</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPlotAreaBgImage</function> sets an image file to be used as
the plot area background. The image can be scaled or tiled to fit.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$input_file</replaceable></term>
        <listitem>
          <para>
Path to the file to be used. The file can be any type allowed by GD, which
usually includes JPEG, GIF, and PNG.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$mode</replaceable></term>
        <listitem>
          <para>
Optional display mode for the background image: one of the strings
'centeredtile', 'tile', or 'scale'. The default is 'tile'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If a background image has been set, background color (set with
<xref linkend="SetPlotBgColor" />) is ignored.
    </para>
    <para>
Scale mode scales the supplied background image file to fit the plot area.
Tile and centeredtile modes repeat the supplied background image file as
needed to fit the plot area.  The difference is that centeredtile offsets the
start position within the background image by half its size, which works
better for some images.
    </para>
    <para>
SetPlotAreaBgImage sets a background for the plot area, while
<xref linkend="SetBgImage" /> sets a background for the entire image area.
If both are used, the plot area background overlays that portion
of the overall background.
    </para>
    <para>
If <varname>$input_file</varname> is <literal>NULL</literal>, no background
image will be used for the plot area.
    </para>
    <para>
If you are going to use a JPEG file for the plot area background, you should be
using a truecolor PHPlot image.  Truecolor images do not have a
limited-size color map like palette images (which PHPlot uses by default).
If you use  palette image with a JPEG background, the background will
likely overflow your image's color map and leave no free color slots for PHPlot
to use for plot elements.  The same is true if using a 24-bit color
(non-mapped) PNG file for a background if it has many colors.
For more on truecolor PHPlot images, see <xref linkend="adv-truecolor"/>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPlotAreaPixels">
  <refmeta>
    <refentrytitle>SetPlotAreaPixels</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPlotAreaPixels</refname>
    <refpurpose>Set the limits for the plot area in device coordinates</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPlotAreaPixels(<optional><parameter>$x1</parameter></optional>, <optional><parameter>$y1</parameter></optional>, <optional><parameter>$x2</parameter></optional>, <optional><parameter>$y2</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPlotAreaPixels</function> sets the area to be used for the plot
within the image, in device coordinates.
(Device coordinates are GD coordinates, with the origin at the top left
of the image, X values increase to the right, Y values increase down,
and the units in pixels.)
The plot area is equal to the image area minus the margins. By default, the
margins (and therefore the plot area) are automatically calculated based on
the space needed for titles, labels, etc.
Use SetPlotAreaPixels to override these automatic calculations and
control the plot area.
The four coordinate values are specified independently.
SetPlotAreaPixels and <xref linkend="SetMarginsPixels"/> perform the same
function with different semantics.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$x1</replaceable></term>
        <term><replaceable>$y1</replaceable></term>
        <listitem>
          <para>
Device coordinates of the top left corner of the area to use for the plot.
Each value is optional, and if omitted or NULL the automatically calculated
value is used.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$x2</replaceable></term>
        <term><replaceable>$y2</replaceable></term>
        <listitem>
          <para>
Device coordinates of the bottom right corner of the area to use for the plot.
Each value is optional, and if omitted or NULL the automatically calculated
value is used.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The plot area is equal to the image area minus the margins. By default, the
margins (and therefore the plot area) are automatically calculated based on
the space needed for items <emphasis>outside</emphasis> the plot area. The
plot area is then whatever space remains. Calculation for most plot types
takes into account the main title, axis titles, tick or data labels, and tick
marks (but not the legend, if drawn). For pie charts, only the main title
size is used when calculating the needed margins.
Use SetPlotAreaPixels to override these automatic calculations and
control the plot area.
    </para>
    <para>
SetPlotAreaPixels and <xref linkend="SetMarginsPixels"/> perform the same
function with different semantics. It makes no sense to use both - only the
last one called will have an effect.
    </para>
    <para>
SetPlotAreaPixels is also used when placing multiple plots on an image.
See <xref linkend="adv-multiplot" /> for more information.
    </para>
    <para>
Trailing defaulted arguments can be omitted, but non-trailing defaulted
arguments must be specified as NULL. For example, to fix the bottom right
corner of the plot area at (600, 400) and let PHPlot calculate the upper
left corner use:
      <programlisting><![CDATA[$plot->SetPlotAreaPixels(NULL, NULL, 600, 400);
]]></programlisting>
You do not have to specify both X and Y. The following example sets the right
edge of the plot area at X=600 and lets the other 3 edges be automatically
calculated:
      <programlisting><![CDATA[$plot->SetPlotAreaPixels(NULL, NULL, 600);
]]></programlisting>
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.6, SetPlotAreaPixels required all 4 arguments be
specified and not be NULL. Starting with PHPlot-5.0.7, each X and Y
parameter can either be specified or automatically calculated.
    </para>
    <para>
SetPlotAreaPixels and SetPlotAreaWorld can be called in either order.
Through PHPlot-5.0.4 this was because SetPlotAreaPixels would
reset the scale factors if <xref linkend="SetPlotAreaWorld" /> was already
called.
Starting with PHPlot-5.0.5, both functions just store the information,
and no calculations take place until <xref linkend="DrawGraph" /> is used.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPlotAreaWorld">
  <refmeta>
    <refentrytitle>SetPlotAreaWorld</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPlotAreaWorld</refname>
    <refpurpose>Override automatic data scaling to device coordinates</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPlotAreaWorld(<optional><parameter>$xmin</parameter></optional>, <optional><parameter>$ymin</parameter></optional>, <optional><parameter>$xmax</parameter></optional>, <optional><parameter>$ymax</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPlotAreaWorld</function> changes the range for World Coordinate
space. This is the coordinate space of the data to be plotted, and is
translated and scaled to fit into the Device Coordinate space of the image.
By default, PHPlot defines the world coordinate space based on the actual limits
of the data to be plotted. By using SetPlotAreaWorld, you can override one or
more of the calculated limits. Each parameter you specify overrides
the corresponding calculated limit. Each defaulted or NULL parameter is
ignored and the calculated limit is used.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xmin</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the desired X data range minimum value.
If omitted or NULL, the value is calculated from the actual plot data.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$ymin</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the desired Y data range minimum value.
If omitted or NULL, the value is calculated from the actual plot data.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$xmax</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the desired X data range maximum value.
If omitted or NULL, the value is calculated from the actual plot data.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$ymax</replaceable></term>
        <listitem>
          <para>
Optional argument specifying the desired Y data range maximum value.
If omitted or NULL, the value is calculated from the actual plot data.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Trailing defaulted arguments can be omitted, but non-trailing defaulted
arguments must be specified as NULL. For example, to set the minimum X
value to 10, the maximum X value to 100, and default the Y scaling, you can
use:
      <programlisting><![CDATA[$plot->SetPlotAreaWorld(10, NULL, 100);
]]></programlisting>
    </para>
    <para>
This function has no effect with pie charts, because they do not use world
coordinates.
    </para>
    <para>
See <xref linkend="adv-autorange"/> for more information about how PHPlot
calculates the limits of the World Coordinate space in the absence of values
set with <function>SetPlotAreaWorld</function>.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-6.0.0, <function>SetPlotAreaWorld</function> will
stop with an error if a fully specified range is invalid. That is, if
both $xmin and $xmax are given and not NULL, $xmin must be less than $xmax.
If both $ymin and $ymax are given and not NULL, $ymin must be less than $ymax.
In older versions, this error was not detected.
    </para>
    <para>
<function>SetPlotAreaPixels</function> and <function>SetPlotAreaWorld</function>
can be called in either order.
Through PHPlot-5.0.4 this was because SetPlotAreaWorld would
reset the scale factors if <xref linkend="SetPlotAreaPixels" /> was already
called.
Starting with PHPlot-5.0.5, both functions just store the information,
and no calculations take place until <xref linkend="DrawGraph" /> is used.
    </para>
    <para>
Through PHPlot-5.0.4, SetPlotAreaWorld needed to access and interpret the data
array, so it had to be called after <xref linkend="SetDataValues" /> sets the
data array, and after <xref linkend="SetDataType" /> (if used).
Starting with PHPlot-5.0.5, this restriction no longer applies and the
functions can be called in any order.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPlotBgColor">
  <refmeta>
    <refentrytitle>SetPlotBgColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPlotBgColor</refname>
    <refpurpose>Set plot area background color</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPlotBgColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPlotBgColor</function> sets the background color of the
plot area of the image (the area inside the margins, title, and usually the
axes).
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Background color is disabled by default. If you want a background color
for the plot area, you must enabled it with
<xref linkend="SetDrawPlotAreaBackground" />.
    </para>
    <para>
Background image takes priority over background color.
If a background image was set
with <xref linkend="SetPlotAreaBgImage" />,
then no background color will be drawn, even if it was enabled.
    </para>
    <para>
The default background color for the plot area is white (if enabled as noted
above). If background color for the plot area is not enabled, the overall
background color (or image) will be seen in the plot area.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPlotBorderType">
  <refmeta>
    <refentrytitle>SetPlotBorderType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPlotBorderType</refname>
    <refpurpose>Control how much of a border is drawn around the plot</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPlotBorderType(<parameter>$pbt</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPlotBorderType</function> controls how much of a border is
drawn around the plot.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$pbt</replaceable></term>
        <listitem>
          <para>
A string or array indicating where to draw the plot borders. If a string,
it must be one of the following values:
            <informaltable>
              <?dbfo table-width="60%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="Border position values"?>
                <colspec colname="c1" colwidth="20*" />
                <colspec colname="c2" colwidth="80*" />
                <thead>
                  <row>
                    <entry>Value</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>bottom</entry>
                    <entry>Border on bottom plot</entry>
                  </row>
                  <row>
                    <entry>full</entry>
                    <entry>Border on all four sides of the plot</entry>
                  </row>
                  <row>
                    <entry>left</entry>
                    <entry>Border on left side of plot</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No plot area border</entry>
                  </row>
                  <row>
                    <entry>right</entry>
                    <entry>Border on right side of plot</entry>
                  </row>
                  <row>
                    <entry>sides</entry>
                    <entry>Border on left and right sides of plot</entry>
                  </row>
                  <row>
                    <entry>top</entry>
                    <entry>Border on top of plot</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
An array of strings can be used. Each element in the array must be one of
the above values. For example, use either
<literal>array('left', 'right', 'bottom')</literal>
or <literal>array('sides', 'bottom')</literal>
to get a plot border on the sides and bottom but not the top.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, left and right side borders are drawn for all plot types except
pie charts. For pie charts, no borders are drawn by default.
    </para>
    <para>
Plot border color is set by <xref linkend="SetGridColor" /> (this color
also applies to the axes and other elements).
The default color is black.
    </para>
    <para>
The X and Y axis lines and the plot border are all drawn in the same color.
Usually, the X axis line is drawn at the bottom of the plot area, and the Y
axis line is drawn on the left side of the plot area.
(See <xref linkend="SetXAxisPosition" /> and <xref linkend="SetYAxisPosition" />
for more information on the axis positions.)
Enabling or disabling a plot border edge that corresponds to an axis line will
have no visible effect because the axis line will be drawn there.
    </para>
    <para>
The preceding paragraph does not apply to pie charts, which do not have
axis lines.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.5.0, plot area borders were not available for pie charts,
and the default border type was always 'sides'. Starting with PHPlot-5.6.0,
pie charts can also have plot area borders. The default plot area border
type is 'none' for pie charts, and 'sides' for all other plot types.
    </para>
    <para>
Through PHPlot-5.1.1, the available choices were 'left', 'sides', 'full', or
'none', and only a single string option was supported.
Starting with PHPlot-5.1.2, the additional choices 'right', 'top', and
'bottom' were added, as well as the ability to pass an array of choices.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPlotType">
  <refmeta>
    <refentrytitle>SetPlotType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPlotType</refname>
    <refpurpose>Select the type of plot - how the data will be graphed</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPlotType(<parameter>$pt</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPlotType</function> selects a type of plot from among the plot
types supported by PHPlot.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$pt</replaceable></term>
        <listitem>
          <para>
A string indicating the type of plot. The following types are available:
            <itemizedlist spacing="compact">
              <listitem><para>area</para></listitem>
              <listitem><para>bars</para></listitem>
              <listitem><para>boxes</para></listitem>
              <listitem><para>bubbles</para></listitem>
              <listitem><para>candlesticks</para></listitem>
              <listitem><para>candlesticks2</para></listitem>
              <listitem><para>linepoints</para></listitem>
              <listitem><para>lines</para></listitem>
              <listitem><para>ohlc</para></listitem>
              <listitem><para>pie</para></listitem>
              <listitem><para>points</para></listitem>
              <listitem><para>squared</para></listitem>
              <listitem><para>squaredarea</para></listitem>
              <listitem><para>stackedarea</para></listitem>
              <listitem><para>stackedbars</para></listitem>
              <listitem><para>stackedsquaredarea</para></listitem>
              <listitem><para>thinbarline</para></listitem>
            </itemizedlist>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  <refsect1>
    <title>Notes</title>
    <para>
The default plot type is 'linepoints'.
    </para>
    <para>
A complete description of the available plot types can be found in
<xref linkend="conc-plottypes" />.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Plot types 'squaredarea' and 'stackedsquaredarea' were added in PHPlot-6.2.0.
     </para>
    <para>
Plot type 'boxes' was added in PHPlot-6.1.0.
     </para>
    <para>
Plot type 'bubbles' was added in PHPlot-5.5.0.
     </para>
    <para>
Plot types 'candlesticks', 'candlesticks2', and 'ohlc'
were added in PHPlot-5.3.0.
     </para>
    <para>
Plot type 'stackedarea' was added in PHPlot-5.1.1.
     </para>
  </refsect1>
</refentry>

<refentry id="SetPointShapes">
  <refmeta>
    <refentrytitle>SetPointShapes</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPointShapes</refname>
    <refpurpose>Select a point shape for each data set</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPointShapes(<parameter>$pt</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPointShapes</function> assigns a point shape to each data set
in a plot.
'Point' here refers to the marker drawn at each data point in 'points' and
'linepoints' type plots.
For example, if each data row contains 4 Y values, the first
point shape will be used for the first Y value, the second point shape for
the second Y value, etc. There are 20 point shapes to chose from.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$pt</replaceable></term>
        <listitem>
          <para>
An array of point shape names, or a string naming a single point shape.
If a string, that shape name is used for all data sets.
If an array, the array values name the point shapes for each subsequent
data set in a plot.
The following shapes are available:
            <informaltable>
              <?dbfo table-width="100%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="3">
                <?dbhtml table-summary="Available shape names"?>
                <colspec colname="c1" colwidth="10*" />
                <colspec colname="c2" colwidth="20*" />
                <colspec colname="c3" colwidth="70*" />
                <thead>
                  <row>
                    <entry>Shape</entry>
                    <entry>Shape Name</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-bowtie.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>bowtie shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>bowtie</entry>
                    <entry>Two filled triangles pointing right and left towards the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-box.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>box shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>box</entry>
                    <entry>A square outline centered on the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-circle.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>circle shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>circle</entry>
                    <entry>A hollow circle centered on the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-cross.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>cross shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>cross</entry>
                    <entry>An X centered on the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-delta.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>delta shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>delta</entry>
                    <entry>A filled triangle pointing up, centered on the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-diamond.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>diamond shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>diamond</entry>
                    <entry>A filled diamond (square rotated 45 degrees), centered on the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-dot.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>dot shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>dot</entry>
                    <entry>A filled circle centered on the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-down.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>down shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>down</entry>
                    <entry>An unfilled triangle pointing down, centered on the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-halfline.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>halfline shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>halfline</entry>
                    <entry>A short line from the point going left.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-home.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>home shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>home</entry>
                    <entry>A filled 5-sided shape, centered on the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-hourglass.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>hourglass shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>hourglass</entry>
                    <entry>Two filled triangles pointing up and down towards the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-line.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>line shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>line</entry>
                    <entry>A horizontal line centered on the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-plus.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>plus shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>plus</entry>
                    <entry>A plus sign centered on the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-rect.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>rect shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>rect</entry>
                    <entry>A filled square centered on the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-star.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>star shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>star</entry>
                    <entry>Four lines crossing at the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-target.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>target shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>target</entry>
                    <entry>A square outline with two filled squares and two open squares, centered on the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-triangle.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>triangle shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>triangle</entry>
                    <entry>A filled triangle pointing down from the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-trianglemid.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>trianglemid shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>trianglemid</entry>
                    <entry>A filled triangle pointing down to the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-up.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>up shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>up</entry>
                    <entry>An unfilled triangle pointing up, centered on the point.</entry>
                  </row>
                  <row>
                    <entry align="center"> 
                      <inlinemediaobject>
                        <imageobject>
                          <imagedata fileref="images/shape-yield.png" scale="50" format="PNG" />
                        </imageobject>
                        <textobject><phrase>yield shape</phrase></textobject>
                      </inlinemediaobject>
                    </entry>
                    <entry>yield</entry>
                    <entry>A filled triangle pointing down, centered on the point.</entry>
                  </row>
                  <row>
                    <entry> </entry>
                    <entry>none</entry>
                    <entry>No marker (see notes).</entry>
                  </row>

                </tbody>
              </tgroup>
            </informaltable>
<xref linkend="example-linepoints1" /> also shows all of the point shapes.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$pt</parameter>, it
must use zero-based sequential integer indexes.
    </para>
    <para>
This applies only to 'points' and 'linepoints' plot types.
    </para>
    <para>
By default, ten shapes are used in order:
diamond, dot, delta, home, yield, box, circle, up, down, and cross.
    </para>
    <para>
A point shape can be set to 'none' to suppress the point markers for that
data set.
This is only useful with 'linepoints' plot types, and results in a 'lines'
plot type for that data set: a line only, but no markers.
    </para>
    <para>
PHPlot duplicates the entries in the shorter of the two arrays,
point sizes (set by <xref linkend="SetPointSizes"/>) and point shapes,
to make both arrays the same size. Then it uses the entries in order,
restarting at the beginning, for each data set at each X value.
For example, if point sizes is (6, 10), and point shapes is ('diamond',
'dot', 'rect'), then PHPlot first extends point sizes to (6, 10, 6) to
match the point shapes. If there are 4 data sets to plot, PHPlot draws the
point markers at each X value as: diamond (size 6), dot (size 10),
rect (size 6), diamond (size 6).
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, these ten shapes were available: halfline, line, plus,
cross, rect, circle, dot, diamond, triangle, trianglemid, and none. The
default shape for all data sets was 'diamond'.
Starting with PHPlot-5.1.0, ten new point shapes were added, and different shape
defaults were assigned for ten data sets.
To restore the behavior in PHPlot-5.0.7 and earlier, call
<literal>SetPointShapes('diamond')</literal>.
    </para>
    <para>
Using 'none' as a point shape was added in PHPlot-5.0rc3.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPointSizes">
  <refmeta>
    <refentrytitle>SetPointSizes</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPointSizes</refname>
    <refpurpose>Sets the point size for each data set</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPointSizes(<parameter>$ps</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPointSizes</function> assigns a point size to each data
set in a plot.
'Point' here refers to the marker drawn at each data point in 'points' and
'linepoints' type plots.
For example, if each data row contains 4 Y values, the first
point size will be used for the first Y value, the second point size for
the second Y value, etc.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ps</replaceable></term>
        <listitem>
          <para>
An array of point sizes, or a single value. All values are in pixels.
If a single value, that size is used for all data sets.
If an array, the array values are the sizes for each subsequent
data set in a plot.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If an array is used for <parameter>$ps</parameter>, it
must use zero-based sequential integer indexes.
    </para>
    <para>
This applies only to 'points' and 'linepoints' plot types.
    </para>
    <para>
PHPlot duplicates the entries in the shorter of the two arrays,
point sizes and point shapes (set by <xref linkend="SetPointShapes"/>),
to make both arrays the same size. Then it uses the entries in order,
restarting at the beginning, for each data set at each X value.
For example, if point sizes is (6, 10), and point shapes is ('diamond',
'dot', 'rect'), then PHPlot first extends point sizes to (6, 10, 6) to
match the point shapes. If there are 4 data sets to plot, PHPlot draws the
point markers at each X value as: diamond (size 6), dot (size 10),
rect (size 6), diamond (size 6).
    </para>
    <para>
By default, all point sizes are 6 pixels.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, the default size array was (5, 5, 3). However, there
were bugs in processing the sizes of the point shapes and point sizes arrays.
Also, for some point sizes, PHPlot rounded the size up to the next even number.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPrecisionX">
  <refmeta>
    <refentrytitle>SetPrecisionX</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPrecisionX</refname>
    <refpurpose>Set precision for numeric formated X labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPrecisionX(<parameter>$prec</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPrecisionX</function> sets the desired numeric precision
for X tick and data labels, and also enables 'data' mode formatting
of those labels with <xref linkend="SetXLabelType" />.
    </para>
    <note>
      <para>
This function is retained for compatibility, but use of
<xref linkend="SetXLabelType"/> is preferred.
      </para>
    </note>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$prec</replaceable></term>
        <listitem>
          <para>
The desired numeric precision.
This is the number of decimal positions to output.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Setting numeric precision with this function automatically enables 'data'
mode formatting as if <literal>SetXLabelType('data')</literal> was called.
    </para>
    <para>
The default is to format numbers with 1 decimal position, but only
if 'data' mode formatting is selected.
    </para>
    <para>
This function applies to both X tick labels and X data labels.
(X data labels are axis data labels for vertical plots,
or data value labels within the plot area for horizontal plots.
See <xref linkend="conc-labels"/> for more on labels.)
Using 'data' format for X axis data labels only makes sense
when your data array contains numeric data in the label position.
    </para>
    <para>
See <xref linkend="SetPrecisionY"/> for Y tick and data labels.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-5.0.6, using <code>SetPrecisionX($n)</code>
is exactly the same as calling <code>SetXLabelType('data', $n)</code>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPrecisionY">
  <refmeta>
    <refentrytitle>SetPrecisionY</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPrecisionY</refname>
    <refpurpose>Set precision for numeric formated Y labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPrecisionY(<parameter>$prec</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPrecisionY</function> sets the desired numeric precision
for Y tick and data labels, and also enables 'data' mode formatting
of those labels with <xref linkend="SetYLabelType" />.
    </para>
    <note>
      <para>
This function is retained for compatibility, but use of
<xref linkend="SetYLabelType"/> is preferred.
      </para>
    </note>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$prec</replaceable></term>
        <listitem>
          <para>
The desired numeric precision.
This is the number of decimal positions to output.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Setting numeric precision with this function automatically enables 'data'
mode formatting as if <literal>SetYLabelType('data')</literal> was called.
    </para>
    <para>
The default is to format numbers with 1 decimal position, but only
if 'data' mode formatting is selected.
    </para>
    <para>
This function applies to both Y tick labels and Y data labels.
(Y data labels are data value labels within the plot area for vertical plots,
or axis data labels for horizontal plots.
See <xref linkend="conc-labels"/> for more on labels.)
Using 'data' format for Y axis data labels only makes sense
when your data array contains numeric data in the label position.
    </para>
    <para>
See <xref linkend="SetPrecisionX"/> for X tick and data labels.
    </para>
    <para>
This function also affects pie chart labels, for backward compatibility.
When drawing a pie chart, if <xref linkend="SetPieLabelType"/> was not called,
and <function>SetPrecisionY</function> was called, then the precision set
with <function>SetPrecisionY</function> is used when formatting pie chart
labels.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-5.0.6, using <code>SetPrecisionY($n)</code>
is exactly the same as calling <code>SetYLabelType('data', $n)</code>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetPrintImage">
  <refmeta>
    <refentrytitle>SetPrintImage</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetPrintImage</refname>
    <refpurpose>Determine whether or not to automatically output the image
when the plot is drawn</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetPrintImage(<parameter>$pi</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetPrintImage</function> determines whether or not to automatically
output the image (as if <xref linkend="PrintImage" /> was used) when a plot
is drawn (with <xref linkend="DrawGraph" />).  The default is True.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$pi</replaceable></term>
        <listitem>
          <para>
True to have DrawGraph automatically print (output) the image, False to
prevent DrawGraph from outputting the image.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
When putting multiple plots on one image, is is necessary to use
<function>SetPrintImage(False)</function> to defer output of the image
until after all the plots have been drawn.
See <xref linkend="adv-multiplot"/> for more information on putting
multiple plots on an image.
    </para>
    <para>
Calling <function>SetPrintImage(False)</function> is also needed when using
<xref linkend="EncodeImage"/> to return the image data (rather than sending
it to standard output or to a file).
    </para>
  </refsect1>
</refentry>

<refentry id="SetRGBArray">
  <refmeta>
    <refentrytitle>SetRGBArray</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetRGBArray</refname>
    <refpurpose>Select a color map</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetRGBArray(<parameter>$color_array</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetRGBArray</function> selects a color map to use. A color map is
an array of color names available for use in the plot. You can select from
pre-defined color maps, or define your own. Each color in a color map has a
name, and 3 or 4 color component values (red, green, blue, and optional
alpha). The red, green, and blue components are in the range 0 through 255, and
the optional alpha component is in the range 0 through 127.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color_array</replaceable></term>
        <listitem>
          <para>
An array or a string. If an array, each element defines a color in the color
map. The array element key is the color name, and the array element value
is an array of three or four components. (See example below).
          </para>
          <para>
Or, a string selecting a built-in color map.
Use 'small' to select a map of 36 colors, or 'large'
to select a much larger color map.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If SetRGBArray is not called, the 'small' color map is used.
    </para>
    <para>
More information about the color maps can be found in
<xref linkend="conc-colors-map" />.
More information about using the alpha component can be found in
<xref linkend="adv-truecolor" />.
    </para>
    <para>
Color names are case sensitive.
    </para>
    <para>
For the large color map to be loaded with SetRGBArray('large'), the file
<filename>rgb.inc.php</filename> must be found on the PHP include path or
in the same directory as <filename>phplot.php</filename>.
This file is included in the PHPlot distribution.
    </para>
    <para>
You are not limited to using only the colors in the color map. The color
map defines which <emphasis>color names</emphasis> you can use, and exactly
what they mean. You can also specify colors numerically.
    </para>
    <para>
PHPlot resolves a color name to its component values (red, green, blue) at
the time the element's color is set, using whatever color map is present at
that time. For PHPlot's default colors, this happens when the PHPlot object
is created. This means that changes to the color map affect only future color
settings.  See the Color Resolution example below for more.
After using <function>SetRGBArray</function>, you will probably want to define
element and data colors with the functions listed in
<xref linkend="ref-colorstyle"/>.
    </para>
  </refsect1>
  <refsect1>
    <title>Examples</title>
    <para><?dbfo keep-together="always"?>
An example of a user-defined color map is:
      <programlisting><![CDATA[array( 'black' => array(0, 0, 0),
       'white' => array(255, 255, 255),
       'gray'  => array(190, 190, 190),
       'red'   => array(255, 0, 0),
       'green' => array(0, 255, 0),
       'blue'  => array(0, 0, 255) )
]]></programlisting>
    </para>

    <para>
The following example is provided for the note above on color resolution.
The main title will be black, the X title will be blue, and the Y title
will be green. This is because:
      <itemizedlist>
        <listitem>
          <para>
The main title color is defaulted, so it gets defined as black by the
PHPlot constructor. The later redefinition of <emphasis>black</emphasis>
in the color array has no effect on this title.
          </para>
        </listitem>
        <listitem>
          <para>
The X title color is set to blue, using the default ('small') color map's
definition of <emphasis>blue</emphasis> at that time.
          </para>
        </listitem>
        <listitem>
          <para>
The Y title color is green, because a new color map was loaded before the Y
title color was set, and that color map defines a color named
<emphasis>blue</emphasis> as RGB #00ff00 which is green.
          </para>
        </listitem>
      </itemizedlist>
      <programlisting><![CDATA[$plot = new PHPlot();
...
$plot->SetXTitleColor('blue');
$plot->SetRGBArray(array('black' => array(255,0,0), 'blue' => array(0, 255, 0)));
$plot->SetYTitleColor('blue');
...
]]></programlisting>
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-6.0.0, specifying an invalid string for
<parameter>$color_array</parameter> results in an error message.
In older releases, a two color black/white color map would be loaded with
no error reported.
    </para>
    <para>
Versions of this manual written for releases before PHPlot-6.0.0
incorrectly stated that your color map must include the colors that PHPlot
uses as internal defaults (black, white, and gray), and incorrectly implied
that you could redefine existing colors (for example, change black to
(r=255,g=0,b=0) to make it red) and have that apply to the default element
colors. The actual behavior is as described in the note above about color
resolution.
    </para>
  </refsect1>
</refentry>

<refentry id="SetShading">
  <refmeta>
    <refentrytitle>SetShading</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetShading</refname>
    <refpurpose>Set the size of the drop shadow for bar and pie charts.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetShading(<parameter>$s</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetShading</function> sets the size in pixels of the drop shadow
used to give bar and pie charts a 3-D look. The 3-D look can be disabled by
setting the shading to zero.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$s</replaceable></term>
        <listitem>
          <para>
Desired shading size in pixels. If this is set to 0, pie charts are flat
(not rotated away from the screen) with no shadow, and bars in bar charts
and stackedbar charts are drawn as rectangles without drop shadows.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default is shading enabled with a size of 5 pixels.
    </para>
    <para>
If shading is turned off for bar and stackedbar charts, the bars
will be drawn with borders. The color of the borders is set with
<xref linkend="SetDataBorderColors" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetSkipBottomTick">
  <refmeta>
    <refentrytitle>SetSkipBottomTick</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetSkipBottomTick</refname>
    <refpurpose>Suppress the bottom Y axis tick mark and label</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetSkipBottomTick(<parameter>$skip</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetSkipBottomTick</function> can be used to skip (suppress) the
bottom-most Y tick mark and its label.
See also
<xref linkend="SetSkipLeftTick" />,
<xref linkend="SetSkipRightTick" />, and
<xref linkend="SetSkipTopTick" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$skip</replaceable></term>
        <listitem>
          <para>
If True, don't draw the bottom Y tick mark and label;
if False, draw the bottom Y tick mark and label.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, no tick marks or labels are skipped.
    </para>
  </refsect1>
</refentry>

<refentry id="SetSkipLeftTick">
  <refmeta>
    <refentrytitle>SetSkipLeftTick</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetSkipLeftTick</refname>
    <refpurpose>Suppress the first X axis tick mark and label</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetSkipLeftTick(<parameter>$skip</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetSkipLeftTick</function> can be used to skip (suppress) the
left-most X tick mark and its label.
See also
<xref linkend="SetSkipBottomTick" />,
<xref linkend="SetSkipRightTick" />, and
<xref linkend="SetSkipTopTick" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
      <term><replaceable>$skip</replaceable></term>
        <listitem>
          <para>
If True, don't draw the first X tick mark and label;
if False, draw the first X tick mark and label.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, no tick marks or labels are skipped.
    </para>
  </refsect1>
</refentry>

<refentry id="SetSkipRightTick">
  <refmeta>
    <refentrytitle>SetSkipRightTick</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetSkipRightTick</refname>
    <refpurpose>Suppress the last X axis tick mark and label</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetSkipRightTick(<parameter>$skip</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetSkipRightTick</function> can be used to skip (suppress) the
right-most X tick mark and its label.
See also
<xref linkend="SetSkipBottomTick" />,
<xref linkend="SetSkipLeftTick" />, and
<xref linkend="SetSkipTopTick" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$skip</replaceable></term>
        <listitem>
          <para>
If True, don't draw the last X tick mark and label;
if False, draw the last X tick mark and label.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, no tick marks or labels are skipped.
    </para>
  </refsect1>
</refentry>

<refentry id="SetSkipTopTick">
  <refmeta>
    <refentrytitle>SetSkipTopTick</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetSkipTopTick</refname>
    <refpurpose>Suppress the top Y axis tick mark and label</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetSkipTopTick(<parameter>$skip</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetSkipTopTick</function> can be used to skip (suppress) the
top-most Y tick mark and its label.
See also
<xref linkend="SetSkipBottomTick" />,
<xref linkend="SetSkipLeftTick" />, and
<xref linkend="SetSkipRightTick" />.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$skip</replaceable></term>
        <listitem>
          <para>
If True, don't draw the top Y tick mark and label;
if False, draw the top Y tick mark and label.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, no tick marks or labels are skipped.
    </para>
  </refsect1>
</refentry>

<refentry id="SetTextColor">
  <refmeta>
    <refentrytitle>SetTextColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetTextColor</refname>
    <refpurpose>Set general text color</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetTextColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetTextColor</function> sets the default color which is used for
legend text, tick labels, and data labels.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default text color is black.
    </para>
    <para>
Starting with PHPlot-5.7.0, there are more specific functions to set
the color for labels: <xref linkend="SetDataLabelColor"/>,
<xref linkend="SetDataValueLabelColor"/>, and
<xref linkend="SetTickLabelColor"/>.
All of these elements default to using the color set with
<function>SetTextColor</function>.
    </para>

    <para>
Starting with PHPlot-6.0.0, the legend text color can be set with
<xref linkend="SetLegendTextColor"/>. If that function is not used,
then the legend text uses the color set with <function>SetTextColor</function>.
    </para>

  </refsect1>

  <refsect1>
    <title>Example</title>
    <para>
Legend text and data labels will be blue, and tick labels will be red.
Note that the functions may be used in any order, with the same results.
      <programlisting><![CDATA[$plot->SetTextColor('blue');
$plot->SetTickLabelColor('red');]]></programlisting>
    </para>
  </refsect1>

</refentry>

<refentry id="SetTickColor">
  <refmeta>
    <refentrytitle>SetTickColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetTickColor</refname>
    <refpurpose>Set the color of the axis tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetTickColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetTickColor</function> sets the color of the axis tick marks.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default color for the tick marks is black.
    </para>
  </refsect1>
</refentry>

<refentry id="SetTickLabelColor">
  <refmeta>
    <refentrytitle>SetTickLabelColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetTickLabelColor</refname>
    <refpurpose>Set the color for tick labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetTickLabelColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetTickLabelColor</function> sets the color which is used for tick
labels along the X and Y axis lines.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If <function>SetTickLabelColor</function> is not used, tick labels are
drawn using the general text color set with <xref linkend="SetTextColor"/>.
If neither <function>SetTickLabelColor</function> nor
<function>SetTextColor</function> is used, the default color is black.
    </para>
    <para>
See also <xref linkend="conc-labels"/> for information about different
label types.
    </para>
    <para>
PHPlot has a deprecated function called <function>SetLabelColor</function>.
Do not use this function. It does not set the color used for labels.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.7.0. In earlier releases, the tick
label colors could only be set using <xref linkend="SetTextColor"/>, which
also changed the color of other elements.
    </para>
  </refsect1>
</refentry>

<refentry id="SetTitle">
  <refmeta>
    <refentrytitle>SetTitle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetTitle</refname>
    <refpurpose>Set the main title text for the plot</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetTitle(<parameter>$title</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetTitle</function> sets the main plot title text. This is
displayed centered at the top of the plot.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$title</replaceable></term>
        <listitem>
          <para>
The title text to be displayed.
The string can contain multiple lines, separated by newlines (in PHP: "\n").
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
</refentry>

<refentry id="SetTitleColor">
  <refmeta>
    <refentrytitle>SetTitleColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetTitleColor</refname>
    <refpurpose>Set the color of the main plot title</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetTitleColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetTitleColor</function> sets the color of the main plot title
(as set with <xref linkend="SetTitle" />), and the default color for the
X and Y titles (as set with <xref linkend="SetXTitle" /> and
<xref linkend="SetYTitle" />).
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default color for the main title is black.
    </para>
    <para>
Use just SetTitleColor if you want all three titles to have the same color.
If you want different colors for the main, X, and/or Y titles,
use SetTitleColor to set the main title color,
and use <xref linkend="SetXTitleColor"/>
and/or <xref linkend="SetYTitleColor"/> to set the color of the other titles.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.1.3, this function set the color for all three titles.
Starting with PHPlot-5.2.0, it sets the main title color, and the default color for X
and Y titles.
    </para>
  </refsect1>
</refentry>

<refentry id="SetTransparentColor">
  <refmeta>
    <refentrytitle>SetTransparentColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetTransparentColor</refname>
    <refpurpose>Designate one color to be transparent</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetTransparentColor(<optional><parameter>$color</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetTransparentColor</function> designates one color in the image
to be transparent. The designated color will not be visible (assuming the
image is viewed with a program which supports transparency) - instead,
everything drawn in that color will be transparent.
By default, no color is transparent.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to designate as transparent.
See <xref linkend="conc-colors" /> for more on color values.
If this parameter is omitted or NULL, the default behavior of not having a
transparent color is restored.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This will only work if both the selected image file format
(see <xref linkend="SetFileFormat" />)
and the user's browser or viewer support transparency.
GIF format supports transparency.
PNG format also supports transparency, but viewer support is more limited.
    </para>
    <para>
As an alternative to designating a single color as transparent, you can
control the transparency, or alpha value, of any color.
See <xref linkend="adv-truecolor"/> for more information.
    </para>
    <para>
An image either has a transparent color or it does not. (This is aside from
use of alpha values for colors.) If you designate 'yellow' as transparent,
for example, everything drawn on the image in yellow becomes transparent,
regardless of when it was drawn - before or after the transparent color
selection. This is because the transparent color designation occurs in the
image's color map - it does not change the pixels in the image.
    </para>
  </refsect1>

  <refsect1>
    <title>Example</title>
    <para>
To set the plot image background to be transparent, pick a color (here
'yellow') that won't be used anywhere else on the image, and use code
like this:
      <programlisting><![CDATA[$plot->SetBackgroundColor('yellow');
$plot->SetTransparentColor('yellow');
]]></programlisting>
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
The ability to specify NULL or omit the parameter to disable having a
transparent color was added in PHPlot-6.0.0.
    </para>
  </refsect1>
</refentry>

<refentry id="SetTTFPath">
  <refmeta>
    <refentrytitle>SetTTFPath</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetTTFPath</refname>
    <refpurpose>Set the default TrueType font directory</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetTTFPath(<parameter>$path</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetTTFPath</function> sets the directory where
<xref linkend="SetFont" /> and <xref linkend="SetFontTTF" />
can find TrueType font files.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$path</replaceable></term>
        <listitem>
          <para>
Full path to a directory containing TrueType fonts.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default TrueType font directory is '.', meaning fonts will be
loaded from the directory containing your main PHP script.
PHPlot also attempts to load fonts without any path, which allows GD
to try to locate the font using its own internal rules. This works on
some platforms, but not on others.
    </para>
    <para>
SetTTFPath does not enable the use of TrueType fonts.
See the note at the end of the reference for <xref linkend="SetUseTTF" />
on how to set up and use TrueType fonts.
    </para>
    <para>
The default TrueType font directory is also used to find an internally-set
default font. This means that if you use SetTTFPath, but do not specify a
font name (with <xref linkend="SetDefaultTTFont"/>,
<xref linkend="SetFont"/>, or <xref linkend="SetFontTTF"/>),
PHPlot will attempt to select a default font from its internal list, but
using the directory you specify with SetTTFPath.
This can be useful on platforms where you are willing to use a default
font, but the internal GD rules on how to locate fonts do not work.
    </para>
    <para>
See <xref linkend="conc-text-fonts"/> for more information.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Use of the default TrueType font directory to locate the initial, default
font was implemented in PHPlot-5.1.3.
Also with this release, fonts are first searched for without a path, which
allows GD to try to locate the font using its internal rules.
    </para>
    <para>
Starting with PHPlot-5.0rc3, the default TrueType font directory is used both
for the default font set with <xref linkend="SetDefaultTTFont" /> and for
fonts set with <xref linkend="SetFont" />. Refer to those two functions for
details.
    </para>
  </refsect1>
</refentry>

<refentry id="SetUseTTF">
  <refmeta>
    <refentrytitle>SetUseTTF</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetUseTTF</refname>
    <refpurpose>Set the default font type</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetUseTTF(<parameter>$ttf</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetUseTTF</function> sets the default font type to TrueType fonts or
built-in GD fonts, and re-initializes all font settings.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ttf</replaceable></term>
        <listitem>
          <para>
True to use TrueType fonts by default, False to use built-in GD fonts
by default.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Changing the font type re-initializes all the font settings to the PHPlot
defaults.
      <itemizedlist>
        <listitem>
          <para>
<literal>SetUseTTF(FALSE)</literal> resets all text elements to use the
built-in GD fonts in the default sizes, and sets GD fonts as the default.
          </para>
        </listitem>
        <listitem>
          <para>
<literal>SetUseTTF(TRUE)</literal> resets all text elements to use TrueType
fonts, in the default point sizes, but without changing the default font
name (if one was set). It sets TrueType fonts as the default.
          </para>
        </listitem>
        <listitem>
          <para>
<literal>SetDefaultTTFont(NULL)</literal> or
<literal>SetDefaultTTFont()</literal> resets all text elements to use
TrueType fonts, in the default point sizes, and also erases any default
font name. See <xref linkend="SetDefaultTTFont"/> for details.
          </para>
        </listitem>
      </itemizedlist>
    </para>

    <para>
By default, built-in GD fonts are used.
    </para>
    <para>
When you enable TrueType fonts with SetUseTTF, there must be a valid
default font. You can use <xref linkend="SetDefaultTTFont" /> to
establish a default font, but since this also enables TrueType fonts
as the default, you need not use SetUseTTF in that case.
On some platforms, PHPlot can find a valid default font on its own.
See <xref linkend="conc-text-fonts"/> for more information on the default
font.
    </para>
    <para>
After enabling TrueType fonts, you can use
<xref linkend="SetFont" /> or <xref linkend="SetFontTTF" />
to select fonts and sizes for individual text elements in the plot.
You can also use <xref linkend="SetFontGD" /> to use GD fonts for one or
more elements, overriding the default font type.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.1.2, there was a fixed default font called
<filename>benjamingothic.ttf</filename>, which used to be included with PHPlot,
but was removed in 2006. (It was not generally suitable for plotting anyway.)
As a result, you had to use <xref linkend="SetDefaultTTFont"/> to set a
valid default font before enabling TrueType fonts with SetUseTTF().
But since SetDefaultTTFont() itself turned on TrueType fonts, SetUseTTF() was
rarely useful.
Starting with PHPlot-5.1.3, PHPlot will try a number of sans-serif font
names, trying to find a valid font to use as the default. On platforms
where this works, SetUseTTF(True) can be used without any other font setup
in order to use the default TrueType font for all text.
    </para>
    <para>
Through PHPlot-5.0.5, this function enabled or disabled the use of TrueType
font text, since all text on a graph had to be either TrueType or all GD.
Starting with PHPlot-5.0.6, this function selects the default font type (and
still re-initializes all fonts). Both GD and TrueType font text can now be
used on a graph.
    </para>
  </refsect1>

</refentry>

<refentry id="SetXAxisPosition">
  <refmeta>
    <refentrytitle>SetXAxisPosition</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXAxisPosition</refname>
    <refpurpose>Move the X axis</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXAxisPosition(<optional><parameter>$pos</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXAxisPosition</function> sets the position of the X axis.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$pos</replaceable></term>
        <listitem>
          <para>
The Y position in world coordinates for the X axis.
(World coordinates are the coordinate space of your data points.)
If the value is omitted or an empty string, the default behavior is restored.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The given position is truncated (towards 0) to an integer value.
    </para>
    <para>
The default axis position differs for vertical and horizontal plots.
For vertical plots, the X axis position defaults to Y=0, provided Y=0 is
within the range of the graph. If Y=0 is not within the range of the graph,
the X axis position will default to the edge with the smallest absolute Y
value.  This means the X axis will be at the bottom of the graph if all
values of Y are greater than zero, and at the top of the graph if all
values of Y are less than zero.  (For log scale plots, however, the default
X axis position is Y=1.)
For horizontal plots, the X axis position defaults to the bottom of the plot.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.3.0, the argument was required, and there was no way to
restore the default behavior (because the argument value was always converted
to an integer).
Starting with PHPlot-5.3.1, the argument may be given as an empty string,
or omitted, to restore the default behavior.
    </para>
    <para>
Through PHPlot-5.1.3, there was no special handling for horizontal plots.
The X axis always defaulted to Y=0 or the Y with the smallest absolute value.
    </para>
    <para>
Through PHPlot-5.1.0, the default position for the X axis was the bottom of
the graph whenever Y=0 was not within the range the graph, regardless of
whether the data was all positive or all negative.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXDataLabelAngle">
  <refmeta>
    <refentrytitle>SetXDataLabelAngle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXDataLabelAngle</refname>
    <refpurpose>Set the text angle for X data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXDataLabelAngle(<parameter>$xdla</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXDataLabelAngle</function> sets the text angle for X data labels.
If using TrueType fonts, any angle can be used.
If using built-in GD fonts, only 0 degree and 90 degree text can be used.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xdla</replaceable></term>
        <listitem>
          <para>
Desired angle for label text, in degrees.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This function applies to both X axis data labels and X data value labels.
See <xref linkend="conc-labels"/> for more information on data labels.
    </para>
    <para>
By default, X Data Labels are drawn at the same angle as X Tick Labels, as
set with <xref linkend="SetXLabelAngle"/>.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added to PHPlot in 5.1.0. Through PHPlot-5.0.7,
<xref linkend="SetXLabelAngle"/> set the angle for both text and data labels.
    </para>
    <para>
Through PHPlot-5.0.7, there was a deprecated function by the same name that
simply called SetXLabelAngle.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXDataLabelPos">
  <refmeta>
    <refentrytitle>SetXDataLabelPos</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXDataLabelPos</refname>
    <refpurpose>Position and control X data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXDataLabelPos(<parameter>$xdlp</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXDataLabelPos</function> determines if and where X data labels
are drawn.
For vertical plots, these are X axis data labels, which display the label
strings from your data array.
The labels can be drawn at the bottom of the plot (below the X axis),
above the plot, in both positions, or neither.
For horizontal plots, these are X data value labels, displaying the value of the
data point within the plot area.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xdlp</replaceable></term>
        <listitem>
          <para>
A string indicating the desired position for the X data labels:
            <informaltable>
              <?dbfo table-width="75%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="X data label position choices"?>
                <colspec colname="c1" colwidth="14*" />
                <colspec colname="c2" colwidth="86*" />
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotdown</entry>
                    <entry>Data labels below the plot.
                        This is for vertical plots.</entry>
                  </row>
                  <row>
                    <entry>plotup</entry>
                    <entry>Data labels above the plot.
                        This is for vertical plots.</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>Data labels both below and above the plot.
                        This is for vertical plots.</entry>
                  </row>
                  <row>
                    <entry>plotin</entry>
                    <entry>Data value labels within the plot area.
                        For bar charts, this displays the value to the right
                        (or left) of each bar.
                        For stacked bar charts, this display only the bar total
                        labels and not the bar segment labels.
                        For other plot types, see notes below.
                    </entry>
                  </row>
                  <row>
                    <entry>plotstack</entry>
                    <entry>Data value labels to the right (or left) of each bar,
                      and just left of the end of each bar segment.
                      This is valid for horizontal stacked bar plots only.
                      It turns on both bar total labels (as with 'plotin')
                      and bar segment labels.
                    </entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No data labels or data value labels</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
With vertical plots, this function controls the X axis data labels.
For an example, see <xref linkend="ex-area1"/>,
where the labels are enabled by default and displayed below the X axis.
With horizontal plots, this function controls the X data value labels.
For examples, see <xref linkend="example-horizbar"/> 
and <xref linkend="example-horizstackedbar" />.
    </para>
    <para>
The default position for X data labels (for vertical plots) is below the plot.
However, PHPlot only enables the data labels if SetXDataLabelPos was used to
position them, or if <xref linkend="SetXTickLabelPos"/> was not used to
enable the tick labels and the data labels are not all empty.
    </para>
    <para>
The default position for X data value labels (for horizontal plots) is 'none',
meaning no labels.
For plot types 'bars' and 'stackedbars', X data value labels are drawn
(if enabled) at fixed positions within or left/right of the bars.
For plot types 'lines', 'points', and 'linepoints', X data labels
are drawn (if enabled) above the data points by default.
The position can be changed (see <xref linkend="adv-tuning-labels"/>), but
PHPlot does not attempt to prevent interference between the labels and
other plot elements.
X data value labels are not available with other plot types.
    </para>
    <para>
For tick labels, see <xref linkend="SetXTickLabelPos" />.
    </para>
    <para>
The bar segment labels, if enabled ('plotstack'), are drawn inside the bars
and may not be very visible if dark colors are used for the bar fill.
Bar segment labels will be omitted for segments which are too short.
    </para>
    <para>
X data value labels will be drawn to the left of the bars for negative values.
This only applies to horizontal bar charts.
Stacked bar charts are not allowed to have negative values.
    </para>
    <para>
If X data label lines are enabled with <xref linkend="SetDrawXDataLabelLines"/>,
then SetXDataLabelPos() also determines the direction of the lines which
are drawn from the data points.
    </para>
    <para>
The X data label text angle is set with <xref linkend="SetXDataLabelAngle"/>.
The X data label text format can be controlled with
<xref linkend="SetXDataLabelType"/> or <xref linkend="SetXLabelType"/>.
    </para>
    <para>
X data value labels do work with horizontal error plots (plot types 'lines',
'points', and 'linepoints' and data type
<link linkend="data-data-yx-error">data-data-yx-error</link>).
The labels will identify the base X values of the points.
You can change the default label positions (offset and angle) as explained in
<xref linkend="adv-tuning-labels"/>).
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Horizontal error plots, with data labels, were first available in PHPlot-6.1.0.
    </para>
    <para>
Horizontal lines, points, and linepoints plots and data value labels for
them were first available in PHPlot-6.0.0.
    </para>
    <para>
Horizontal bar plot data value labels were added in PHPlot-5.1.3.
Through PHPlot-5.1.2, the 'plotin' and 'plotstack' values were not available.
    </para>
    <para>
Through PHPlot-5.0.7, the default position for X data labels was below the
plot ('plotdown').
This would result in overlaid data and tick labels by default.
In addition, positioning the X tick labels with
<xref linkend="SetXTickLabelPos"/> with a position other than 'none'
resulted in disabling the X data labels, and vice-versa.
If both tick and data labels were positioned, the later setting overrode
the earlier, which was turned off.
Starting with PHPlot-5.1.0, PHPlot handles tick and data label positions
as described in the notes above.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXDataLabelType">
  <refmeta>
    <refentrytitle>SetXDataLabelType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXDataLabelType</refname>
    <refpurpose>Set formatting type for X data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXDataLabelType(<parameter>$type</parameter>, <optional><parameter>...</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXDataLabelType</function> sets the formatting type for X data
labels. By default, data labels are formatted the same as tick labels.
If <xref linkend="SetXLabelType"/> is not used, then there is no special
formatting for either label type, so the labels are output as-is.
Available format types are 'data', 'time', 'printf', and 'custom'.
    </para>
    <para>
'data' formatting formats the labels as floating point numbers,
with digits grouped into thousands (3 digit groups),
and with user-defined precision.
Grouping separator characters can be set with <xref linkend="SetNumberFormat" />.
The precision (number of digits after the decimal point) can be set
as an additional argument to SetXDataLabelType.
A prefix and suffix string can also be specified.
    </para>
    <para>
'time' formatting formats the labels as date/time values, with the
format string specified as an additional argument to SetXDataLabelType.
    </para>
    <para>
'printf' formatting formats the labels using the standard
<function>sprintf</function> function. One, two, or three format strings
are specified as additional arguments to SetXDataLabelType.
    </para>
    <para>
'custom' formatting formats the labels using a caller-provided function,
with an optional pass-through argument. This provides the maximum
flexibility in formatting labels.
    </para>

  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
There is one required argument, $type. Other arguments depend on the value
of the $type argument.
      <variablelist>
        <varlistentry>
          <term><replaceable>$type</replaceable></term>
          <listitem>
            <para>
A string indicating the desired formatting mode: 'data', 'time', 'printf',
or 'custom'. Or, an empty string meaning revert to no formatting.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'data', there are three optional arguments:
      <variablelist>
        <varlistentry>
          <term><replaceable>$precision</replaceable></term>
          <listitem>
            <para>
The formatting precision, or number of decimal places (optional).
If omitted, the default is 1.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$prefix</replaceable></term>
          <listitem>
            <para>
A prefix string to be placed before the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$suffix</replaceable></term>
          <listitem>
            <para>
A suffix string to be placed after the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'time', there is one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format</replaceable></term>
          <listitem>
            <para>
Formatting string, used with <function>strftime()</function>.
For example, '%Y-%m-%d' results in formatting a <literal>time_t</literal>
value as a year, month, and day numbers.
If omitted, the default is '%H:%M:%S' (hours, minutes, and seconds).
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'printf', there can be one, two, or three optional arguments:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format1</replaceable>,
              <optional><replaceable>$format2</replaceable>,
                <optional><replaceable>$format3</replaceable>
              </optional></optional>
          </term>
          <listitem>
            <para>
Format string(s), used with <function>sprintf()</function>.
The format string(s) must contain at most one conversion specification
(%-code) which consumes a single argument.
If no format strings are specified, the default value of '%e' uses scientific
notation with default field sizes.
            </para>
            <para>
If a single format string is given (<literal>$format1</literal>),
it is used for all label values.
            </para>
            <para>
If two format strings are given (<literal>$format1, $format2</literal>),
then the first string <literal>$format1</literal> is used to format the value
of the label if it is greater than or equal to zero.
The second string <literal>$format2</literal> is used to format
the absolute value of the label if it is less than zero.
            </para>
            <para>
If three format strings are given (<literal>$format1, $format2,
$format3</literal>),
then the first string <literal>$format1</literal> is used to format the value
of the label if it is greater than zero.
The second string <literal>$format2</literal> is used to format
the absolute value of the label if it is less than zero.
The third string <literal>$format3</literal> is used when the value of the
label is zero.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'custom', there is one required argument and one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$callback</replaceable></term>
          <listitem>
            <para>
A callback function to format the label. This is either the name of a
function (as a string), or a two-element array with an object instance and
method name. (Refer to the PHP documentation for more information on the
callback type.)
The callback will be called with two, three, or four arguments:
the value of the label to be formatted, the pass-through argument (see next),
and the row and column of the data point (if applicable to the label type).
See <xref linkend="conc-labels-format-custom2"/> for more on the row and
column arguments supplied to the callback.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$callback_arg</replaceable></term>
          <listitem>
            <para>
A pass-through argument for the callback function.
If omitted, NULL is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This function applies to both X axis data labels and X data value labels.
(There is no ambiguity, because vertical plots have only X axis data labels,
and horizontal plots have only X data value labels.)
    </para>
    <para>
See <xref linkend="conc-labels"/> for more information on labels, and
specifically <xref linkend="conc-labels-format"/> for more information on
formatting labels.
    </para>
    <para>
The default formatting mode is to do no special formatting of the labels.
Strings will be output as-is, and numbers will be output using PHP's
default formatting.
If you need to change label formatting back to the default,
or to override a format type you set for tick labels and have no
formatting for data labels,
use SetXDataLabelType without arguments, or with an empty string argument.
    </para>
    <para>
When using a custom label formatting function, do not assume the labels are
formatted in any particular order, or only once each.
    </para>
    <para>
When using 2 or 3 'printf' format strings, the labels being formatted must
be numeric values.
    </para>
    <para>
When using 2 or 3 'printf' format strings, the second one is used to format
the <emphasis>absolute value</emphasis> of the label, so you generally must
provide some indication in the format string that the value is negative.
    </para>
  </refsect1>

  <refsect1>
    <title>Examples</title>
    <para>
See <xref linkend="SetXLabelType" />.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
The 'printf' label format type was extended to support 2 or 3 format strings
in PHPlot-6.2.0. Before that release, only a single format string could be used.
    </para>
    <para>
Custom label formatting functions are passed the row and column arguments
(if applicable) starting with PHPlot-5.8.0.
    </para>
    <para>
This function was added in PHPlot-5.1.0.
Through PHPlot-5.0.7, data labels and tick labels always used the same
formatting, as set with <xref linkend="SetXLabelType"/>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXLabelAngle">
  <refmeta>
    <refentrytitle>SetXLabelAngle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXLabelAngle</refname>
    <refpurpose>Set the text angle for X labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXLabelAngle(<parameter>$xla</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXLabelAngle</function> sets the text angle for X tick labels.
Unless <xref linkend="SetXDataLabelAngle"/> is called, the same angle is
also used for X data labels.
If using TrueType fonts, any angle can be used.
If using built-in GD fonts, only 0 degree and 90 degree text can be used.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xla</replaceable></term>
        <listitem>
          <para>
Desired angle for label text, in degrees.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default text angle for X labels is 0 degrees, for horizontal text.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, SetXLabelAngle sets the angle for both tick and data
labels. Starting with PHPlot-5.1.0, these can be controlled independently
using <xref linkend="SetXDataLabelAngle"/>.
For compatibility, data label angles default to the value set for tick label
angles with SetXLabelAngle.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXLabelType">
  <refmeta>
    <refentrytitle>SetXLabelType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXLabelType</refname>
    <refpurpose>Set formatting type for X tick labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXLabelType(<parameter>$type</parameter>, <optional><parameter>...</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXLabelType</function> sets the formatting type for X tick labels,
and the default formatting type for X data labels.
(If <xref linkend="SetXDataLabelType"/> is never called,
<function>SetXLabelType</function> effectively sets the formatting type
for both X tick labels and X data labels.)
By default, there is no special formatting, so the labels are output as-is.
Available format types are 'data', 'time', 'printf', and 'custom'.
    </para>
    <para>
'data' formatting formats the labels as floating point numbers,
with digits grouped into thousands (3 digit groups),
and with user-defined precision.
Grouping separator characters can be set with <xref linkend="SetNumberFormat" />.
The precision (number of digits after the decimal point) can be set with
<xref linkend="SetPrecisionX" />, or as an additional argument to SetXLabelType.
A prefix and suffix string can also be specified.
    </para>
    <para>
'time' formatting formats the labels as date/time values,
using a format specifier set by <xref linkend="SetXTimeFormat" />
or using an additional argument to SetXLabelType.
    </para>
    <para>
'printf' formatting formats the labels using the standard
<function>sprintf</function> function. One, two, or three format strings
are specified as additional arguments to SetXLabelType.
    </para>
    <para>
'custom' formatting formats the labels using a caller-provided function,
with an optional pass-through argument. This provides the maximum
flexibility in formatting labels.
    </para>

  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
There is one required argument, $type. Other arguments depend on the value
of the $type argument.
      <variablelist>
        <varlistentry>
          <term><replaceable>$type</replaceable></term>
          <listitem>
            <para>
A string indicating the desired formatting mode: 'data', 'time', 'printf',
or 'custom'. Or, an empty string meaning revert to no formatting.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'data', there are three optional arguments:
      <variablelist>
        <varlistentry>
          <term><replaceable>$precision</replaceable></term>
          <listitem>
            <para>
The formatting precision, or number of decimal places (optional).
If omitted, the value set with <xref linkend="SetPrecisionX" /> is used,
or if that was never called then the default is 1.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$prefix</replaceable></term>
          <listitem>
            <para>
A prefix string to be placed before the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$suffix</replaceable></term>
          <listitem>
            <para>
A suffix string to be placed after the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'time', there is one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format</replaceable></term>
          <listitem>
            <para>
Format string, used with <function>strftime()</function>.
For example, '%Y-%m-%d' results in formatting a <literal>time_t</literal>
value as a year, month, and day numbers.
If omitted, the value set with <xref linkend="SetXTimeFormat" /> is used,
or if that was never called then the default is '%H:%M:%S' (hours, minutes,
and seconds).
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'printf', there can be one, two, or three optional arguments:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format1</replaceable>,
              <optional><replaceable>$format2</replaceable>,
                <optional><replaceable>$format3</replaceable>
              </optional></optional>
          </term>
          <listitem>
            <para>
Format string(s), used with <function>sprintf()</function>.
The format string(s) must contain at most one conversion specification
(%-code) which consumes a single argument.
If no format strings are specified, the default value of '%e' uses scientific
notation with default field sizes.
            </para>
            <para>
If a single format string is given (<literal>$format1</literal>),
it is used for all label values.
            </para>
            <para>
If two format strings are given (<literal>$format1, $format2</literal>),
then the first string <literal>$format1</literal> is used to format the value
of the label if it is greater than or equal to zero.
The second string <literal>$format2</literal> is used to format
the absolute value of the label if it is less than zero.
            </para>
            <para>
If three format strings are given (<literal>$format1, $format2,
$format3</literal>),
then the first string <literal>$format1</literal> is used to format the value
of the label if it is greater than zero.
The second string <literal>$format2</literal> is used to format
the absolute value of the label if it is less than zero.
The third string <literal>$format3</literal> is used when the value of the
label is zero.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'custom', there is one required argument and one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$callback</replaceable></term>
          <listitem>
            <para>
A callback function to format the label. This is either the name of a
function (as a string), or a two-element array with an object instance and
method name. (Refer to the PHP documentation for more information on the
callback type.)
The callback will be called with two, three, or four arguments:
the value of the label to be formatted, the pass-through argument (see next),
and the row and column of the data point (if applicable to the label type).
See <xref linkend="conc-labels-format-custom2"/> for more on the row and
column arguments supplied to the callback.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$callback_arg</replaceable></term>
          <listitem>
            <para>
A pass-through argument for the callback function.
If omitted, NULL is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="conc-labels"/> for more information on labels, and
specifically <xref linkend="conc-labels-format"/> for more information on
formatting labels.
    </para>
    <para>
The default formatting mode is to do no special formatting of the labels.
Strings will be output as-is, and numbers will be output using PHP's
default formatting.
If you need to change label formatting back to the default,
use SetXLabelType without arguments, or with an empty string argument.
    </para>
    <para>
A side effect of <xref linkend="SetPrecisionX" /> is to call this function
SetXLabelType and set the format type to 'data'.
Note that <xref linkend="SetXTimeFormat" /> does not have a corresponding
side effect on the format type.
    </para>
    <para>
When using a custom label formatting function, do not assume the labels are
formatted in any particular order, or only once each.
    </para>
    <para>
When using 2 or 3 'printf' format strings, the labels being formatted must
be numeric values.
    </para>
    <para>
When using 2 or 3 'printf' format strings, the second one is used to format
the <emphasis>absolute value</emphasis> of the label, so you generally must
provide some indication in the format string that the value is negative.
    </para>
  </refsect1>

  <refsect1>
    <title>Examples</title>
    <para>
The following tables show some label formatting examples.
These also apply to <function>SetXLabelType</function>,
<xref linkend="SetXDataLabelType"/>, <xref linkend="SetYLabelType"/>,
and <xref linkend="SetYDataLabelType"/>.
    </para>

    <para><?dbfo keep-together="always"?>
Data (numeric) formatting with two digits of precision.
Grouping and decimal separators depend on locale.
      <informaltable>
        <?dbfo table-width="100%"?>
        <tgroup cols="3">
          <?dbhtml table-summary="Examples of label formatting, Part 1"?>
          <colspec colname="c1" colwidth="60*" />
          <colspec colname="c2" colwidth="20*" />
          <colspec colname="c3" colwidth="20*" />
          <thead>
            <row>
              <entry>Code:</entry>
              <entry>Value:</entry>
              <entry>Result:</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry morerows="1"><programlisting><![CDATA[$plot->SetXLabelType('data', 2);
]]></programlisting></entry>
              <entry>1234.56</entry>
              <entry>1,234.56</entry>
            </row>
            <row> <!-- First cell is spanned by entry above -->
              <entry>3.14159</entry>
              <entry>3.14</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>

    <para><?dbfo keep-together="always"?>
Data (numeric) formatting with prefix.
&amp;#8364; is the entity code for the Euro sign in Unicode. (Numeric entity
codes are handled by the GD library, but not named character entity codes.)
Here we use it as a prefix, common usage for English.
The Euro sign may appear differently in your browser. But when used with
PHPlot it requires a Unicode font on the server.
      <informaltable>
        <?dbfo table-width="100%"?>
        <tgroup cols="3">
          <?dbhtml table-summary="Examples of label formatting, Part 2"?>
          <colspec colname="c1" colwidth="60*" />
          <colspec colname="c2" colwidth="20*" />
          <colspec colname="c3" colwidth="20*" />
          <thead>
            <row>
              <entry>Code:</entry>
              <entry>Value:</entry>
              <entry>Result:</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><programlisting><![CDATA[$plot->SetXLabelType('data', 0, '&amp;#8364;');
]]></programlisting></entry>
              <entry>1000000</entry>
              <entry>&euro;1,000,000</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>

    <para><?dbfo keep-together="always"?>
Data (numeric) formatting with suffix.
Here we use the Euro as a suffix, common usage for French, represented by a
3 byte UTF code.
You can use html_entity_decode() with UTF-8 as the character set
to translate &amp;euro; into this sequence. 
SetNumberFormat is used here to override the locale settings for
thousands and decimal separators.
      <informaltable>
        <?dbfo table-width="100%"?>
        <tgroup cols="3">
          <?dbhtml table-summary="Examples of label formatting, Part 3"?>
          <colspec colname="c1" colwidth="60*" />
          <colspec colname="c2" colwidth="20*" />
          <colspec colname="c3" colwidth="20*" />
          <thead>
            <row>
              <entry>Code:</entry>
              <entry>Value:</entry>
              <entry>Result:</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry morerows="1"><programlisting><![CDATA[$plot->SetNumberFormat(',', '.');
$plot->SetXLabelType('data', 2, '',
                     "\xe2\x82\xac");
]]></programlisting></entry>
              <entry>1e6</entry>
              <entry>1.000.000,00&euro;</entry>
            </row>
            <row> <!-- First cell is spanned by entry above -->
              <entry>4321.123</entry>
              <entry>4.321,123&euro;</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>

    <para><?dbfo keep-together="always"?>
Date/time formatting.
The given value is mktime(0,0,0,4,15,2008).
The format string could be set with SetXTimeFormat instead.
      <informaltable>
        <?dbfo table-width="100%"?>
        <tgroup cols="3">
          <?dbhtml table-summary="Examples of label formatting, Part 4"?>
          <colspec colname="c1" colwidth="60*" />
          <colspec colname="c2" colwidth="20*" />
          <colspec colname="c3" colwidth="20*" />
          <thead>
            <row>
              <entry>Code:</entry>
              <entry>Value:</entry>
              <entry>Result:</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><programlisting><![CDATA[$plot->SetXLabelType('time', '%m/%Y');
]]></programlisting></entry>
              <entry>1208232000</entry>
              <entry>04/2008</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>

    <para><?dbfo keep-together="always"?>
Formatting using printf.
Note PHP printf may differ from the standard C library. For example, PHP
outputs only a one digit exponent here.
      <informaltable>
        <?dbfo table-width="100%"?>
        <tgroup cols="3">
          <?dbhtml table-summary="Examples of label formatting, Part 5"?>
          <colspec colname="c1" colwidth="60*" />
          <colspec colname="c2" colwidth="20*" />
          <colspec colname="c3" colwidth="20*" />
          <thead>
            <row>
              <entry>Code:</entry>
              <entry>Value:</entry>
              <entry>Result:</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><programlisting><![CDATA[$plot->SetXLabelType('printf', '%8.2e');
]]></programlisting></entry>
              <entry>1234</entry>
              <entry>&nbsp;1.23e+3</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>

    <para><?dbfo keep-together="always"?>
When two format strings are used with printf formatting, the first is used
for non-negative values, and the second for negative values (with the
absolute value formatted).
      <informaltable>
        <?dbfo table-width="100%"?>
        <tgroup cols="3">
          <?dbhtml table-summary="Examples of label formatting, Part 6"?>
          <colspec colname="c1" colwidth="60*" />
          <colspec colname="c2" colwidth="20*" />
          <colspec colname="c3" colwidth="20*" />
          <thead>
            <row>
              <entry>Code:</entry>
              <entry>Value:</entry>
              <entry>Result:</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry morerows="1"><programlisting><![CDATA[$plot->SetXLabelType('printf', '%.2f', '(%.2f)');
]]></programlisting></entry>
              <entry>15.6</entry>
              <entry>15.60</entry>
            </row>
            <row> <!-- First cell is spanned by entry above -->
              <entry>-9.87</entry>
              <entry>(9.87)</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>

    <para><?dbfo keep-together="always"?>
When three format strings are used with printf formatting, the first is used
for positive values, the second for negative values (with the absolute value
formatted), and the third for zero.
You can suppress zero with an empty third format string.
      <informaltable>
        <?dbfo table-width="100%"?>
        <tgroup cols="3">
          <?dbhtml table-summary="Examples of label formatting, Part 7"?>
          <colspec colname="c1" colwidth="60*" />
          <colspec colname="c2" colwidth="20*" />
          <colspec colname="c3" colwidth="20*" />
          <thead>
            <row>
              <entry>Code:</entry>
              <entry>Value:</entry>
              <entry>Result:</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry morerows="2"><programlisting><![CDATA[$plot->SetXLabelType('printf', 'GAIN:$%.2f',
    'LOSS:($%.2f)', '[Unchanged]');
]]></programlisting></entry>
              <entry>9.1</entry>
              <entry>GAIN:$9.10</entry>
            </row>
            <row> <!-- First cell is spanned by entry above -->
              <entry>-26.35</entry>
              <entry>LOSS:($26.35)</entry>
            </row>
            <row> <!-- First cell is spanned by entry above -->
              <entry>0</entry>
              <entry>[Unchanged]</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </para>

    <para><?dbfo keep-together="always"?>
In this example, a custom formatting function is used to format values in
decimal degrees as degrees, minutes, and seconds.
(This only works for non-negative angles.)
      <informaltable>
        <?dbfo table-width="100%"?>
        <tgroup cols="3">
          <?dbhtml table-summary="Examples of label formatting, Part 8"?>
          <colspec colname="c1" colwidth="60*" />
          <colspec colname="c2" colwidth="20*" />
          <colspec colname="c3" colwidth="20*" />
          <thead>
            <row>
              <entry>Code:</entry>
              <entry>Value:</entry>
              <entry>Result:</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry morerows="2"><programlisting><![CDATA[function deg_min_sec($value)
{
  $deg = (int)$value;
  $value = ($value - $deg) * 60;
  $min = (int)$value;
  $sec = (int)(($value - $min) * 60);
  return "{$deg}d {$min}m {$sec}s";
}
$plot->SetXLabelType('custom', 'deg_min_sec');
]]></programlisting></entry>
              <entry>75.12345</entry>
              <entry>75d 7m 24s</entry>
            </row>
            <row> <!-- First cell is spanned by entry above -->
              <entry>0</entry>
              <entry>0d 0m 0s</entry>
            </row>
            <row> <!-- First cell is spanned by entry above -->
              <entry>136.5</entry>
              <entry>136d 30m 0s</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
The 'printf' label format type was extended to support 2 or 3 format strings
in PHPlot-6.2.0. Before that release, only a single format string could be used.
    </para>
    <para>
Custom label formatting functions are passed the row and column arguments
(if applicable) starting with PHPlot-5.8.0.
    </para>
    <para>
Through PHPlot-5.0.7, this function set the format type for both X tick
labels and X data labels.
Starting with PHPlot-5.1.0, a new function <xref linkend="SetXDataLabelType"/>
was added to allow separate control of tick and data labels.
<function>SetXLabelType</function> now sets the format type for X tick labels,
and the default format type for X data labels.
    </para>
    <para>
New label format types 'printf' and 'custom' were added at PHPlot-5.0.6, 
as well as all arguments after the first. In PHPlot-5.0.5 and earlier, you
must use SetXTimeFormat and SetPrecisionX to set the formatting parameters.
Starting with PHPlot-5.0.6, you have the choice of using those, or
providing additional arguments to SetXLabelType.
Also added was the ability to add a prefix and suffix to 'data' formatted
labels. In PHPlot-5.0.5 and earlier, there was an undocumented class variable 
<parameter>data_units_text</parameter> that was applied as a suffix to 'data'
mode labels, for both X and Y. This continues to work, but is deprecated.
    </para>
    <para>
Starting with PHPlot-5.0.6, you can use an empty string or no argument at all
to reset to the default of no formatting.
    </para>
    <para>
Starting with PHPlot-5.0.4, empty string data labels are ignored when
formatting with 'data' or 'time' formats. You can use this to suppress
some data labels, or control label density, with 'data' and 'time'
formatted labels.
    </para>
    <para>
Through PHPlot-5.0rc3, empty strings would still be formatted.  With 'data'
format, an empty string would result in a zero value, and with 'time'
format an empty string would cause an error. As a result, with older releases,
if you don't want to use data labels when using 'data' or 'time' formats,
you must  turn off X data label display with
<xref linkend="SetXDataLabelPos" />,
even if your data array labels are empty strings.
    </para>
    <para>
Through PHPlot-5.0rc3, when the formatting mode is 'data'
the thousands grouping separator was always a comma,
and a period was used as a decimal point.
Starting with 5.0.4, PHPlot attempts to get the correct values for your
locale.  You can set the separator characters yourself instead with
<xref linkend="SetNumberFormat" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXScaleType">
  <refmeta>
    <refentrytitle>SetXScaleType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXScaleType</refname>
    <refpurpose>Select linear or logarithmic scale</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXScaleType(<parameter>$st</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXScaleType</function> sets the scale type along the X axis 
to be either linear (the default) or logarithmic.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$st</replaceable></term>
        <listitem>
          <para>
A string specifying the scale type: 'linear' or 'log'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
No X value may be less than or equal to 0 with logarithmic X scale.
    </para>
    <para>
Support for logarithmic scales in PHPlot is limited. One problem is that
tick interval is fixed for the entire range of data, which is inappropriate
for logarithmic scales where the data spans more than one magnitude.
    </para>
    <para>
The default X and Y scale types are linear.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTickAnchor">
  <refmeta>
    <refentrytitle>SetXTickAnchor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTickAnchor</refname>
    <refpurpose>Set an anchor point for X tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXTickAnchor(<optional><parameter>$xta</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTickAnchor</function> sets an anchor point for X tick marks.
This ensures that a tick mark will be placed at that value (if it is within
the plotted data range).  The effect of this function is to slide the set
of tick marks along the axis until one of them falls on the anchor.  This
also affects the position of the tick labels and X grid lines. It does not
change the plotted data values, nor the range of values along the X axis.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xta</replaceable></term>
        <listitem>
          <para>
The desired X anchor point, in world coordinates.
If omitted or NULL, the default of not using an anchor is restored.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, PHPlot will place the left-most tick mark at the left end of
the X axis range.
For example, if the X range is -5 to 5, and the tick increment is 2, tick
marks will be placed at X=-5, -3, -1, 1, 3, and 5.
Note that in this case there would be no tick mark at the Y axis position X=0.
    </para>
    <para>
When using the default method of calculating and adjusting the plot range,
PHPlot will select a whole multiple of the tick increment as the left end
of the X plot range. Another way of looking at this is that PHPlot implicitly
anchors the X tick marks at 0, when it calculates the range with the
default adjustment method.
If you set the plot range with <xref linkend="SetPlotAreaWorld"/>, or
change the range end adjustment method, the tick marks may not be anchored
at 0 unless you use <function>SetXTickAnchor(0)</function>.
More on this can be found in <xref linkend="adv-autorange"/>.
    </para>
    <para>
If an X tick anchor is set, and its value is within the plotted range,
PHPlot will adjust the left-most tick mark so that there is a tick mark
at the X tick anchor position.
For example, if the X range is -5 to 5, the tick increment is 2, and the X
tick anchor is set to 0, ticks marks will be placed at X=-4, -2, 0, 2, and 4.
    </para>
    <para>
The X tick anchor need not be within the plotted range. If the tick anchor
is outside the plotted range, the tick marks will still be adjusted so that
a tick marked would be placed at the anchor if the data range was extended
to include it.
For example, if the X range is -5 to 5, the tick increment is 2, and the X
tick anchor is set to 10, ticks marks will still be placed at X=-4, -2, 0, 2,
and 4 as in the previous example.
    </para>
    <para>
See <xref linkend="ex-xtickanchor"/> for an example of setting an X tick anchor.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function did not change at PHPlot-6.0.0, however a new method of
automatically calculating the plot range was introduced which always
anchors the X tick marks at 0, when using the default settings.
Therefore, <function>SetXTickAnchor(0)</function> is usually no
longer needed to get a tick mark at X=0.
In releases before PHPlot-6.0.0, <function>SetXTickAnchor</function> was
usually necessary to get reasonable tick marks, unless the left end of the X
plot range happened to be 0, or was set to 0 or a multiple of the tick
increment.
    </para>
    <para>
This function was added in PHPlot-5.4.0.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTickCrossing">
  <refmeta>
    <refentrytitle>SetXTickCrossing</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTickCrossing</refname>
    <refpurpose>Set crossing length of X tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXTickCrossing(<parameter>$xc</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTickCrossing</function> sets the length by which the X tick
marks cross the X axis or plot border (depending on the tick position
set with <xref linkend="SetXTickPos" />) pointing inwards.
See figure below.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xc</replaceable></term>
        <listitem>
          <para>
Desired X tick crossing length in pixels.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default tick crossing length is 3 pixels.
    </para>
    <para>
The following figure shows the four length measurements used to draw the
tick marks. (In this plot, the tick lengths have been increased from the
defaults.)
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/ticksize.png" scale="58" format="PNG" />
          </imageobject>
          <textobject>
            <phrase>Tick size controls</phrase>
          </textobject>
        </mediaobject>
      </informalfigure>
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTickIncrement">
  <refmeta>
    <refentrytitle>SetXTickIncrement</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTickIncrement</refname>
    <refpurpose>Set the length of the interval between X ticks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXTickIncrement(<optional><parameter>$ti</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTickIncrement</function> sets the length of the interval between
X tick marks (the tick increment, or tick step).
You can use either this function or <xref linkend="SetNumXTicks" />
(but not both) to control the tick mark spacing.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ti</replaceable></term>
        <listitem>
          <para>
Desired tick increment, in world coordinates.
If the value is omitted or an empty string, the default behavior is restored.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If neither <function>SetXTickIncrement</function> nor 
<xref linkend="SetNumXTicks" /> is used, the tick interval
is automatically calculated by PHPlot.
See <xref linkend="adv-autorange-tick"/> for details.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
Before PHPlot-6.0.0, if neither the number of ticks nor the tick increment
were specified, PHPlot calculated the tick increment as 1/10 of the X data
range.
Starting with PHPlot-6.0.0, a more complex algorithm is used which tries
to produce 'natural' tick increments.
    </para>

    <para>
Starting with PHPlot-6.0.0, if you call both <function>SetNumXTicks</function>
and <function>SetXTickIncrement</function>, the tick increment has priority
and the specified number of ticks is ignored.
Before PHPlot-6.0.0, the behavior was order-dependent: whichever function
was used last had priority.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTickLabelPos">
  <refmeta>
    <refentrytitle>SetXTickLabelPos</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTickLabelPos</refname>
    <refpurpose>Position the X tick labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXTickLabelPos(<parameter>$xtlp</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTickLabelPos</function> determines where (and if) the
X tick labels are drawn. The labels can be drawn at the bottom of the plot,
above the plot, in both positions, at the X axis (even if it is in the
middle of the plot), or not drawn at all.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xtlp</replaceable></term>
        <listitem>
          <para>
A string indicating the desired position for the X tick labels:
            <informaltable>
              <?dbfo table-width="75%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="X tick label position choices"?>
                <colspec colname="c1" colwidth="14*" />
                <colspec colname="c2" colwidth="86*" />
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotdown</entry>
                    <entry>Tick labels below the plot</entry>
                  </row>
                  <row>
                    <entry>plotup</entry>
                    <entry>Tick labels above the plot</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>Tick labels both below and above the plot</entry>
                  </row>
                  <row>
                    <entry>xaxis</entry>
                    <entry>Tick labels at X axis (even if the axis is in
                      the middle of the plot)</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No tick labels</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default position for the X tick labels is chosen to avoid overlapping
tick and data labels.
For vertical plots, the X tick labels will default to 'none' if the X data
labels have been enabled using <xref linkend="SetXDataLabelPos"/>.
If neither SetXTickLabelPos nor SetXDataLabelPos are used, PHPlot will
enable just data labels if they are non-empty, and otherwise it will enable
just tick labels, and position them below the plot.
For horizontal plots, there is no conflict (because data labels are drawn
along Y), so the tick label position defaults to 'plotdown'.
    </para>
    <para>
This applies only to tick labels.
For data labels, see <xref linkend="SetXDataLabelPos" />.
You may want the tick marks to be in the same position as the tick labels.
To position the tick marks, see <xref linkend="SetXTickPos" />.
    </para>
    <para>
See <xref linkend="SetXAxisPosition" /> for positioning the X axis.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.0.7, the default position for X tick labels was below the
plot ('plotdown').
This would result in overlaid data and tick labels by default.
In addition, positioning the X data labels with
<xref linkend="SetXDataLabelPos"/> with a position other than 'none'
resulted in disabling the X tick labels, and vice-versa.
If both tick and data labels were positioned, the later setting overrode
the earlier, which was turned off.
Starting with PHPlot-5.1.0, PHPlot handles tick and data label positions
as described in the notes above.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTickLength">
  <refmeta>
    <refentrytitle>SetXTickLength</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTickLength</refname>
    <refpurpose>Set outer length of X tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXTickLength(<parameter>$xln</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTickLength</function> sets the length of the X tick marks
pointing outwards from the plot. For example, for tick marks on an X axis
at the bottom of the plot, this is the length from the X axis down.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xln</replaceable></term>
        <listitem>
          <para>
Desired X tick length in pixels.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default tick length is 5 pixels.
    </para>
    <para>
See figure under <xref linkend="SetXTickCrossing" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTickPos">
  <refmeta>
    <refentrytitle>SetXTickPos</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTickPos</refname>
    <refpurpose>Position the X tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXTickPos(<parameter>$tp</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTickPos</function> determines where (and if) the
X tick marks are drawn. The tick marks can be drawn at the bottom of the plot,
above the plot, in both positions, at the X axis (even if it is in the
middle of the plot), or not drawn at all.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xtp</replaceable></term>
        <listitem>
          <para>
A string indicating the desired position for the X tick marks:
            <informaltable>
              <?dbfo table-width="75%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="X tick position choices"?>
                <colspec colname="c1" colwidth="14*" />
                <colspec colname="c2" colwidth="86*" />
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotdown</entry>
                    <entry>Tick marks below the plot</entry>
                  </row>
                  <row>
                    <entry>plotup</entry>
                    <entry>Tick marks above the plot</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>Tick marks both below and above the plot</entry>
                  </row>
                  <row>
                    <entry>xaxis</entry>
                    <entry>Tick marks at X axis (even if the axis is in
                      the middle of the plot)</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No tick marks</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default position for the X tick marks is below the plot.
    </para>
    <para>
This applies only to tick marks.
You may want the tick labels to be in the same positions as the tick
marks.  To position the tick labels, see <xref linkend="SetXTickLabelPos" />.
    </para>
    <para>
See <xref linkend="SetXAxisPosition" /> for positioning the X axis.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTimeFormat">
  <refmeta>
    <refentrytitle>SetXTimeFormat</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTimeFormat</refname>
    <refpurpose>Set date/time formatting string for X labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXTimeFormat(<parameter>$xtf</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTimeFormat</function> sets the formatting string for X tick
and data labels when 'time' formatting mode for X labels is in effect.
Use <xref linkend="SetXLabelType" /> to select the formatting mode for labels.
The formatting string is used with the PHP <function>strftime</function>
to format labels as date/time strings.
    </para>
    <note>
      <para>
This function is retained for compatibility, but use of
<xref linkend="SetXLabelType"/> is preferred.
      </para>
    </note>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$xtf</replaceable></term>
        <listitem>
          <para>
Formatting string for X labels, used with <function>strftime()</function>.
For example, if the label value is 1104534000 (which is the
<literal>time_t</literal> representation of 6:00 PM on the last day of 2004),
'%Y-%m-%d.%H:%M:%S' results in '2004-12-31.18:00:00',
and '%d %b %Y' results in '31 Dec 2004'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This applies to X tick labels, and also to X data labels unless overridden
by <xref linkend="SetXDataLabelType"/>.
    </para>
    <para>
To use date/time formatting, the label values must be Unix time_t
values (number of seconds since Unix epoch).
    </para>
    <para>
Unlike <xref linkend="SetPrecisionX" />, SetXTimeFormat does not
automatically enable the correct label formatting mode. You
must call <literal>SetXLabelType('time')</literal> to use date/time
formatting of labels.
    </para>
    <para>
The default time format is '%H:%M:%S', showing hours, minutes, and seconds
(and ignoring any date information).
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-5.0.6, the time format can be set with
<xref linkend="SetXLabelType" /> instead.
    </para>
    <para>
The default time format was undefined prior to PHPlot-5.0rc3.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTitle">
  <refmeta>
    <refentrytitle>SetXTitle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTitle</refname>
    <refpurpose>Sets the X axis title, and optionally its position</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXTitle(<parameter>$xtitle</parameter>, <optional><parameter>$xpos</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTitle</function> sets the text to be displayed as the X axis
title. Optionally, it also sets the position of the title and the axis
itself: below the graph (the usual place), above the graph, both, or
neither.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>

      <varlistentry>
        <term><replaceable>$xtitle</replaceable></term>
        <listitem>
          <para>
The text string to use for the X axis title.
The string can contain multiple lines, separated by newlines (in PHP: "\n").
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$xpos</replaceable></term>
        <listitem>
          <para>
Optional position for the X axis and title. Use one of the following
strings for the position:
            <informaltable>
              <?dbfo table-width="50%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="X axis position choices"?>
                <colspec colname="c1" colwidth="20*" />
                <colspec colname="c2" colwidth="80*" />
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotdown</entry>
                    <entry>X axis below the plot</entry>
                  </row>
                  <row>
                    <entry>plotup</entry>
                    <entry>X axis above the plot</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>One X axis above, and one below</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No X axis, no X axis title</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
The default is 'plotdown'.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>
  <refsect1>
    <title>Notes</title>
    <para>
By default, there is no X axis title.
If <function>SetXTitle</function> is called with an empty string as the title,
the default behavior is restored.
This includes not leaving space on the graph for the title.
    </para>
  </refsect1>
</refentry>

<refentry id="SetXTitleColor">
  <refmeta>
    <refentrytitle>SetXTitleColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetXTitleColor</refname>
    <refpurpose>Set the color of the X Title</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetXTitleColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetXTitleColor</function> sets the color of the X title
(as set with <xref linkend="SetXTitle" />).
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Use this function if you want the X title to have a different color than
the main title.
See <xref linkend="conc-titles"/> for more about plot titles.
    </para>
    <para>
By default, the X title defaults to use the same color as the main plot title.
The main plot title color is set with <xref linkend="SetTitleColor"/>, and
it defaults to black.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.2.0.
Through PHPlot-5.1.3, the main, X, and Y titles always used the same color.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYAxisPosition">
  <refmeta>
    <refentrytitle>SetYAxisPosition</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYAxisPosition</refname>
    <refpurpose>Move the Y axis</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYAxisPosition(<option><parameter>$pos</parameter></option>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYAxisPosition</function> sets the position of the Y axis.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$pos</replaceable></term>
        <listitem>
          <para>
The X position in world coordinates for the Y axis.
(World coordinates are the coordinate space of your data points.)
If the value is omitted or an empty string, the default behavior is restored.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The given position is truncated (towards 0) to an integer value.
    </para>
    <para>
The default axis position differs for vertical and horizontal plots.
For vertical plots, the Y axis position defaults to the left side of the plot.
For horizontal plots, the Y axis position defaults to X=0, provided X=0 is
within the range of the graph. If X=0 is not within the range of the graph,
the Y axis position will default to the edge with the smallest absolute X
value.  This means the Y axis will be on the left side of the graph if all
values of X are greater than zero, and on the right side of the graph if all
values of X are less than zero.  (For log scale plots, however, the default
Y axis position is X=1.)
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Through PHPlot-5.3.0, the argument was required, and there was no way to
restore the default behavior (because the argument value was always converted
to an integer).
Starting with PHPlot-5.3.1, the argument may be given as an empty string,
or omitted, to restore the default behavior.
    </para>
    <para>
Through PHPlot-5.1.3, there was no special handling for horizontal plots.
The Y axis always defaulted to the left side of the plot. When plotting
negative data with horizontal plots, it was usually necessary to use
<literal>SetYAxisPosition(0)</literal> to force the bars to start from X=0.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYDataLabelAngle">
  <refmeta>
    <refentrytitle>SetYDataLabelAngle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYDataLabelAngle</refname>
    <refpurpose>Set the text angle for Y data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYDataLabelAngle(<parameter>$ydla</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYDataLabelAngle</function> sets the text angle for Y data labels.
If using TrueType fonts, any angle can be used.
If using built-in GD fonts, only 0 degree and 90 degree text can be used.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ydla</replaceable></term>
        <listitem>
          <para>
Desired angle for label text, in degrees.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This function applies to both Y axis data labels and Y data value labels.
See <xref linkend="conc-labels"/> for more information on data labels.
    </para>
    <para>
By default, Y data labels are drawn at 0 degrees.
(This is different from X data labels, which default to the angle set
for X tick labels.)
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.1.0. Through PHPlot-5.0.7,
Y data labels were always drawn at 0 degrees.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYDataLabelPos">
  <refmeta>
    <refentrytitle>SetYDataLabelPos</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYDataLabelPos</refname>
    <refpurpose>Position and control Y data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYDataLabelPos(<parameter>$ydlp</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYDataLabelPos</function> determines if and where Y data labels
are drawn.
For horizontal plots, these are Y axis data labels, which display the label
strings from your data array.
The labels can be drawn at the left side of the plot (left of the Y axis),
on the right side, in both positions, or neither.
For vertical plots, these are Y data value labels, displaying the value of the
data point within the plot area.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ydlp</replaceable></term>
        <listitem>
          <para>
A string indicating the desired position for the Y data labels:
            <informaltable>
              <?dbfo table-width="75%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="Y data label position choices"?>
                <colspec colname="c1" colwidth="14*" />
                <colspec colname="c2" colwidth="86*" />
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotleft</entry>
                    <entry>Data labels left of the plot.
                        This is for horizontal plots.</entry>
                  </row>
                  <row>
                    <entry>plotright</entry>
                    <entry>Data labels right of the plot.
                        This is for horizontal plots.</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>Data labels both left and right of the plot.
                        This is for horizontal plots.</entry>
                  </row>
                  <row>
                    <entry>plotin</entry>
                    <entry>Data value labels within the plot area.
                        For bar charts, this displays the value above (or
                        below) each bar.
                        For stacked bar charts, this displays only the bar total
                        labels and not the bar segment labels.
                        For other plot types, see notes below.
                    </entry>
                  </row>
                  <row>
                    <entry>plotstack</entry>
                    <entry>Data value labels above (or below) each bar, and
                      below the top of each bar segment.
                      This is valid for vertical stacked bar plots only.
                      It turns on both bar total labels (as with 'plotin')
                      and bar segment labels.
                    </entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No data labels or data value labels</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
With vertical plots, this function controls the Y data value labels.
For examples, see <xref linkend="example-bars4" />,
<xref linkend="example-stackedbars3" />,
and <xref linkend="example-linepoints2" />.
With horizontal plots, this function controls the Y axis data labels.
For examples, see <xref linkend="example-horizbar"/> 
and <xref linkend="example-horizstackedbar" />,
where the labels are enabled by default and displayed to the left of the Y axis.
    </para>
    <para>
The default position for Y data labels (for horizontal plots) is left of the plot.
However, PHPlot only enables the data labels if SetYDataLabelPos was used to
position them, or if <xref linkend="SetYTickLabelPos"/> was not used to
enable the tick labels and the data labels are not all empty.
    </para>
    <para>
The default position for Y data value labels (for vertical plots) is 'none',
meaning no labels.
For plot types 'bars' and 'stackedbars', Y data value labels are drawn
(if enabled) at fixed positions within or above/below the bars.
For plot types 'lines', 'points', 'linepoints', and 'squared', Y data labels
are drawn (if enabled) above the data points by default.
The position can be changed (see <xref linkend="adv-tuning-labels"/>), but
PHPlot does not attempt to prevent interference between the labels and
other plot elements.
Y data value labels are not available with other plot types.
    </para>
    <para>
For tick labels, see <xref linkend="SetYTickLabelPos" />.
    </para>
    <para>
The bar segment labels, if enabled ('plotstack'), are drawn inside the bars
and may not be very visible if dark colors are used for the bar fill.
Bar segment labels will be omitted for segments which are too narrow.
    </para>
    <para>
Y data value labels will be drawn below the bars for negative values.
This only applies to vertical bar charts.
Stacked bar charts are not allowed to have negative values.
    </para>
    <para>
If Y data label lines are enabled with <xref linkend="SetDrawYDataLabelLines"/>,
then SetYDataLabelPos() also determines the direction of the lines which
are drawn from the data points.
    </para>
    <para>
The Y data label text angle is set with <xref linkend="SetYDataLabelAngle"/>.
The Y data label text format can be controlled with
<xref linkend="SetYDataLabelType"/> or <xref linkend="SetYLabelType"/>.
    </para>
    <para>
Y data value labels do work with error plots (plot types 'lines', 'points',
and 'linepoints' and data type
<link linkend="data-data-error">data-data-error</link>).
The labels will identify the base Y values of the points.
However, the default label position above the points will overlap the error
bars. To prevent this, change the position angle as explained in
<xref linkend="adv-tuning-labels"/>). For example:
<programlisting><![CDATA[// Setup for error plot with data value labels
$plot->SetDataType('data-data-error');
$plot->SetYDataLabelPos('plotin');
$plot->data_value_label_angle = 45; // Position the labels at 45 degrees
]]></programlisting>
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Data value labels were first available for error plots in PHPlot-6.0.0.
    </para>
    <para>
Through PHPlot-5.2.0, data value labels were only available for bars and
stackedbars plot types.
Starting with PHPlot-5.3.0, data value labels are also implemented for
lines, points, linepoints, and squared plot types.
    </para>
    <para>
Horizontal plot types were added in PHPlot-5.1.2 and PHPlot-5.1.3, and
the Y Data Labels were extended to include the Y axis data labels for
horizontal plots in addition to the data value labels for vertical plots.
    </para>
    <para>
The data value label feature for stacked bar graphs was added in PHPlot-5.1.1.
    </para>
    <para>
The data value label feature for bar graphs was added to PHPlot-5.0rc3.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYDataLabelType">
  <refmeta>
    <refentrytitle>SetYDataLabelType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYDataLabelType</refname>
    <refpurpose>Set formatting type for Y data labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYDataLabelType(<parameter>$type</parameter>, <optional><parameter>...</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYDataLabelType</function> sets the formatting type for Y data
labels.  By default, data labels are formatted the same as tick labels.
If <xref linkend="SetYLabelType"/> is not used, then there is no special
formatting for either label type, so the labels are output as-is.
Available format types are 'data', 'time', 'printf', and 'custom'.
    </para>
    <para>
'data' formatting formats the labels as floating point numbers,
with digits grouped into thousands (3 digit groups),
and with user-defined precision
Grouping separator characters can be set with <xref linkend="SetNumberFormat" />.
The precision (number of digits after the decimal point) can be set
as an additional argument to SetYDataLabelType.
A prefix and suffix string can also be specified.
    </para>
    <para>
'time' formatting formats the labels as date/time values, with the
format string specified as an additional argument to SetYDataLabelType.
    </para>
    <para>
'printf' formatting formats the labels using the standard
<function>sprintf</function> function. One, two, or three format strings
are specified as additional arguments to SetYDataLabelType.
    </para>
    <para>
'custom' formatting formats the labels using a caller-provided function,
with an optional pass-through argument. This provides the maximum
flexibility in formatting labels.
    </para>

  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
There is one required argument, $type. Other arguments depend on the value
of the $type argument.
      <variablelist>
        <varlistentry>
          <term><replaceable>$type</replaceable></term>
          <listitem>
            <para>
A string indicating the desired formatting mode: 'data', 'time', 'printf',
or 'custom'. Or, an empty string meaning revert to no formatting.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'data', there are three optional arguments:
      <variablelist>
        <varlistentry>
          <term><replaceable>$precision</replaceable></term>
          <listitem>
            <para>
The formatting precision, or number of decimal places (optional).
If omitted, the default is 1.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$prefix</replaceable></term>
          <listitem>
            <para>
A prefix string to be placed before the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$suffix</replaceable></term>
          <listitem>
            <para>
A suffix string to be placed after the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'time', there is one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format</replaceable></term>
          <listitem>
            <para>
Formatting string, used with <function>strftime()</function>.
For example, '%Y-%m-%d' results in formatting a <literal>time_t</literal>
value as a year, month, and day numbers.
If omitted, the default is '%H:%M:%S' (hours, minutes, and seconds).
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'printf', there can be one, two, or three optional arguments:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format1</replaceable>,
              <optional><replaceable>$format2</replaceable>,
                <optional><replaceable>$format3</replaceable>
              </optional></optional>
          </term>
          <listitem>
            <para>
Format string(s), used with <function>sprintf()</function>.
The format string(s) must contain at most one conversion specification
(%-code) which consumes a single argument.
If no format strings are specified, the default value of '%e' uses scientific
notation with default field sizes.
            </para>
            <para>
If a single format string is given (<literal>$format1</literal>),
it is used for all label values.
            </para>
            <para>
If two format strings are given (<literal>$format1, $format2</literal>),
then the first string <literal>$format1</literal> is used to format the value
of the label if it is greater than or equal to zero.
The second string <literal>$format2</literal> is used to format
the absolute value of the label if it is less than zero.
            </para>
            <para>
If three format strings are given (<literal>$format1, $format2,
$format3</literal>),
then the first string <literal>$format1</literal> is used to format the value
of the label if it is greater than zero.
The second string <literal>$format2</literal> is used to format
the absolute value of the label if it is less than zero.
The third string <literal>$format3</literal> is used when the value of the
label is zero.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'custom', there is one required argument and one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$callback</replaceable></term>
          <listitem>
            <para>
A callback function to format the label. This is either the name of a
function (as a string), or a two-element array with an object instance and
method name. (Refer to the PHP documentation for more information on the
callback type.)
The callback will be called with two, three, or four arguments:
the value of the label to be formatted, the pass-through argument (see next),
and the row and column of the data point (if applicable to the label type).
See <xref linkend="conc-labels-format-custom2"/> for more on the row and
column arguments supplied to the callback.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$callback_arg</replaceable></term>
          <listitem>
            <para>
A pass-through argument for the callback function.
If omitted, NULL is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This function applies to both Y axis data labels and Y data value labels.
(There is no ambiguity, because vertical plots have only Y data value labels,
and horizontal plots have only Y axis data labels.)
    </para>
    <para>
See <xref linkend="conc-labels"/> for more information on labels, and
specifically <xref linkend="conc-labels-format"/> for more information on
formatting labels.
    </para>
    <para>
The default formatting mode is to do no special formatting of the labels.
Strings will be output as-is, and numbers will be output using PHP's
default formatting.
If you need to change label formatting back to the default,
or to override a format type you set for tick labels and have no
formatting for data labels,
use SetYDataLabelType without arguments, or with an empty string argument.
    </para>
    <para>
When using a custom label formatting function, do not assume the labels are
formatted in any particular order, or only once each.
    </para>
    <para>
When using 2 or 3 'printf' format strings, the labels being formatted must
be numeric values.
    </para>
    <para>
When using 2 or 3 'printf' format strings, the second one is used to format
the <emphasis>absolute value</emphasis> of the label, so you generally must
provide some indication in the format string that the value is negative.
    </para>
  </refsect1>
  <refsect1>
    <title>Examples</title>
    <para>
See <xref linkend="SetXLabelType" />.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
The 'printf' label format type was extended to support 2 or 3 format strings
in PHPlot-6.2.0. Before that release, only a single format string could be used.
    </para>
    <para>
Custom label formatting functions are passed the row and column arguments
(if applicable) starting with PHPlot-5.8.0.
    </para>
    <para>
This function was added in PHPlot-5.1.0.
Through PHPlot-5.0.7, data labels and tick labels always used the same
formatting, as set with <xref linkend="SetYLabelType"/>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYLabelAngle">
  <refmeta>
    <refentrytitle>SetYLabelAngle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYLabelAngle</refname>
    <refpurpose>Set the text angle for Y tick labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYLabelAngle(<parameter>$yla</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYLabelAngle</function> sets the text angle for Y tick labels.
If using TrueType fonts, any angle can be used.
If using built-in GD fonts, only 0 degree and 90 degree text can be used.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$yla</replaceable></term>
        <listitem>
          <para>
Desired angle for label text, in degrees.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default text angle for Y labels is 0 degrees, for horizontal text.
    </para>
    <para>
This does not apply to Y data labels.
For those, see <xref linkend="SetYDataLabelAngle"/>.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYLabelType">
  <refmeta>
    <refentrytitle>SetYLabelType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYLabelType</refname>
    <refpurpose>Set formatting type for Y tick labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYLabelType(<parameter>$type</parameter>, <optional><parameter>...</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYLabelType</function> sets the formatting type for Y tick labels,
and the default formatting type for Y data labels.
(If <xref linkend="SetYDataLabelType"/> is never called,
<function>SetYLabelType</function> effectively sets the formatting type
for both Y tick labels and Y data labels.)
By default, there is no special formatting, so the labels are output as-is.
Available format types are 'data', 'time', 'printf', and 'custom'.
    </para>
    <para>
'data' formatting formats the labels as floating point numbers,
with digits grouped into thousands (3 digit groups),
and with user-defined precision
Grouping separator characters can be set with <xref linkend="SetNumberFormat" />.
The precision (number of digits after the decimal point) can be set with
<xref linkend="SetPrecisionY" />, or as an additional argument to SetYLabelType.
A prefix and suffix string can also be specified.
    </para>
    <para>
'time' formatting formats the labels as date/time values,
using a format specifier set by <xref linkend="SetYTimeFormat" />
or using an additional argument to SetYLabelType.
    </para>
    <para>
'printf' formatting formats the labels using the standard
<function>sprintf</function> function. One, two, or three format strings
are specified as additional arguments to SetYLabelType.
    </para>
    <para>
'custom' formatting formats the labels using a caller-provided function,
with an optional pass-through argument. This provides the maximum
flexibility in formatting labels.
    </para>

  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
There is one required argument, $type. Other arguments depend on the value
of the $type argument.
      <variablelist>
        <varlistentry>
          <term><replaceable>$type</replaceable></term>
          <listitem>
            <para>
A string indicating the desired formatting mode: 'data', 'time', 'printf',
or 'custom'. Or, an empty string meaning revert to no formatting.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'data', there are three optional arguments:
      <variablelist>
        <varlistentry>
          <term><replaceable>$precision</replaceable></term>
          <listitem>
            <para>
The formatting precision, or number of decimal places (optional).
If omitted, the value set with <xref linkend="SetPrecisionY" /> is used,
or if that was never called then the default is 1.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$prefix</replaceable></term>
          <listitem>
            <para>
A prefix string to be placed before the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$suffix</replaceable></term>
          <listitem>
            <para>
A suffix string to be placed after the formatted label values. This could
be used for a currency symbol, for example. The default is an empty string.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'time', there is one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format</replaceable></term>
          <listitem>
            <para>
Formatting string, used with <function>strftime()</function>.
For example, '%Y-%m-%d' results in formatting a <literal>time_t</literal>
value as a year, month, and day numbers.
If omitted, the value set with <xref linkend="SetYTimeFormat" /> is used,
or if that was never called then the default is '%H:%M:%S' (hours, minutes,
and seconds).
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'printf', there can be one, two, or three optional arguments:
      <variablelist>
        <varlistentry>
          <term><replaceable>$format1</replaceable>,
              <optional><replaceable>$format2</replaceable>,
                <optional><replaceable>$format3</replaceable>
              </optional></optional>
          </term>
          <listitem>
            <para>
Format string(s), used with <function>sprintf()</function>.
The format string(s) must contain at most one conversion specification
(%-code) which consumes a single argument.
If no format strings are specified, the default value of '%e' uses scientific
notation with default field sizes.
            </para>
            <para>
If a single format string is given (<literal>$format1</literal>),
it is used for all label values.
            </para>
            <para>
If two format strings are given (<literal>$format1, $format2</literal>),
then the first string <literal>$format1</literal> is used to format the value
of the label if it is greater than or equal to zero.
The second string <literal>$format2</literal> is used to format
the absolute value of the label if it is less than zero.
            </para>
            <para>
If three format strings are given (<literal>$format1, $format2,
$format3</literal>),
then the first string <literal>$format1</literal> is used to format the value
of the label if it is greater than zero.
The second string <literal>$format2</literal> is used to format
the absolute value of the label if it is less than zero.
The third string <literal>$format3</literal> is used when the value of the
label is zero.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>

    <para>
For type 'custom', there is one required argument and one optional argument:
      <variablelist>
        <varlistentry>
          <term><replaceable>$callback</replaceable></term>
          <listitem>
            <para>
A callback function to format the label. This is either the name of a
function (as a string), or a two-element array with an object instance and
method name. (Refer to the PHP documentation for more information on the
callback type.)
The callback will be called with two, three, or four arguments:
the value of the label to be formatted, the pass-through argument (see next),
and the row and column of the data point (if applicable to the label type).
See <xref linkend="conc-labels-format-custom2"/> for more on the row and
column arguments supplied to the callback.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>$callback_arg</replaceable></term>
          <listitem>
            <para>
A pass-through argument for the callback function.
If omitted, NULL is used.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
See <xref linkend="conc-labels"/> for more information on labels, and
specifically <xref linkend="conc-labels-format"/> for more information on
formatting labels.
    </para>
    <para>
The default formatting mode is to do no special formatting of the labels.
Strings will be output as-is, and numbers will be output using PHP's
default formatting.
If you need to change label formatting back to the default,
use SetYLabelType without arguments, or with an empty string argument.
    </para>
    <para>
A side effect of <xref linkend="SetPrecisionY" /> is to call this function
SetYLabelType and set the format type mode to 'data'.
Note that <xref linkend="SetYTimeFormat" /> does not have a corresponding
side effect on the format type.
    </para>
    <para>
When using a custom label formatting function, do not assume the labels are
formatted in any particular order, or only once each.
    </para>
    <para>
When using 2 or 3 'printf' format strings, the labels being formatted must
be numeric values.
    </para>
    <para>
When using 2 or 3 'printf' format strings, the second one is used to format
the <emphasis>absolute value</emphasis> of the label, so you generally must
provide some indication in the format string that the value is negative.
    </para>
  </refsect1>
  <refsect1>
    <title>Examples</title>
    <para>
See <xref linkend="SetXLabelType" />.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
The 'printf' label format type was extended to support 2 or 3 format strings
in PHPlot-6.2.0. Before that release, only a single format string could be used.
    </para>
    <para>
Custom label formatting functions are passed the row and column arguments
(if applicable) starting with PHPlot-5.8.0.
    </para>
    <para>
Through PHPlot-5.0.7, this function set the format type for both Y tick
labels and Y data labels.
Starting with PHPlot-5.1.0, a new function <xref linkend="SetYDataLabelType"/>
was added to allow separate control of tick and data labels.
<function>SetYLabelType</function> now sets the format type for Y tick labels,
and the default format type for Y data labels.
    </para>
    <para>
New label format types 'printf' and 'custom' were added at PHPlot-5.0.6, 
as well as all arguments after the first. In PHPlot-5.0.5 and earlier, you
must use SetYTimeFormat and SetPrecisionY to set the formatting parameters.
Starting with PHPlot-5.0.6, you have the choice of using those, or
providing additional arguments to SetYLabelType.
Also added was the ability to add a prefix and suffix to 'data' formatted
labels. In PHPlot-5.0.5 and earlier, there was an undocumented class variable 
<parameter>data_units_text</parameter> that was applied as a suffix to 'data'
mode labels, for both X and Y. This continues to work, but is deprecated.
    </para>
    <para>
Starting with PHPlot-5.0.6, you can use an empty string or no argument at all
to reset to the default of no formatting.
    </para>
    <para>
Through PHPlot-5.0rc3, when the formatting mode is 'data'
the thousands grouping separator was always a comma,
and a period was used as a decimal point.
Starting with 5.0.4, PHPlot attempts to get the correct values for your
locale.  You can set the separator characters yourself instead with
<xref linkend="SetNumberFormat" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYScaleType">
  <refmeta>
    <refentrytitle>SetYScaleType</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYScaleType</refname>
    <refpurpose>Select linear or logarithmic scale</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYScaleType(<parameter>$st</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYScaleType</function> sets the scale type along the Y axis 
to be either linear (the default) or logarithmic.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$st</replaceable></term>
        <listitem>
          <para>
A string specifying the scale type: 'linear' or 'log'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
No Y value may be less than or equal to 0 with logarithmic Y scale.
    </para>
    <para>
Support for logarithmic scales in PHPlot is limited. One problem is that
tick interval is fixed for the entire range of data, which is inappropriate
for logarithmic scales where the data spans more than one magnitude.
    </para>
    <para>
The default X and Y scale types are linear.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTickAnchor">
  <refmeta>
    <refentrytitle>SetYTickAnchor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTickAnchor</refname>
    <refpurpose>Set an anchor point for Y tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYTickAnchor(<optional><parameter>$yta</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTickAnchor</function> sets an anchor point for Y tick marks.
This ensures that a tick mark will be placed at that value (if it is within
the plotted data range).  The effect of this function is to slide the set
of tick marks along the axis until one of them falls on the anchor.  This
also affects the position of the tick labels and Y grid lines. It does not
change the plotted data values, nor the range of values along the Y axis.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$yta</replaceable></term>
        <listitem>
          <para>
The desired Y anchor point, in world coordinates.
If omitted or NULL, the default of not using an anchor is restored.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
By default, PHPlot will place the bottom-most tick mark at the bottom of
the Y axis range.
For example, if the Y range is -5 to 5, and the tick increment is 2, tick
marks will be placed at Y=-5, -3, -1, 1, 3, and 5.
Note that in this case there would be no tick mark at the X axis position Y=0.
    </para>
    <para>
When using the default method of calculating and adjusting the plot range,
PHPlot will select a whole multiple of the tick increment as the bottom
of the Y plot range. Another way of looking at this is that PHPlot implicitly
anchors the Y tick marks at 0, when it calculates the range with the
default adjustment method.
If you set the plot range with <xref linkend="SetPlotAreaWorld"/>, or
change the range end adjustment method, the tick marks may not be anchored
at 0 unless you use <function>SetYTickAnchor(0)</function>.
More on this can be found in <xref linkend="adv-autorange"/>.
    </para>
    <para>
If a Y tick anchor is set, and its value is within the plotted range,
PHPlot will adjust the bottom-most tick mark so that there is a tick mark
at the Y tick anchor position.
For example, if the Y range is -5 to 5, the tick increment is 2, and the Y
tick anchor is set to 0, ticks marks will be placed at Y=-4, -2, 0, 2, and 4.
    </para>
    <para>
The Y tick anchor need not be within the plotted range. If the tick anchor
is outside the plotted range, the tick marks will still be adjusted so that
a tick marked would be placed at the anchor if the data range was extended
to include it.
For example, if the Y range is -5 to 5, the tick increment is 2, and the Y
tick anchor is set to 10, ticks marks will still be placed at Y=-4, -2, 0, 2,
and 4 as in the previous example.
    </para>
    <para>
See <xref linkend="ex-ytickanchor"/> for an example of setting a Y tick anchor.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function did not change at PHPlot-6.0.0, however a new method of
automatically calculating the plot range was introduced which always
anchors the Y tick marks at 0, when using the default settings.
Therefore, <function>SetYTickAnchor(0)</function> is usually no
longer needed to get a tick mark at Y=0.
In releases before PHPlot-6.0.0, <function>SetYTickAnchor</function> was
usually necessary to get reasonable tick marks, unless the bottom of the Y
plot range happened to be 0, or was set to 0 or a multiple of the tick
increment.
    </para>
    <para>
This function was added in PHPlot-5.4.0.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTickCrossing">
  <refmeta>
    <refentrytitle>SetYTickCrossing</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTickCrossing</refname>
    <refpurpose>Set crossing length of Y tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYTickCrossing(<parameter>$yc</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTickCrossing</function> sets the length by which the Y tick
marks cross the Y axis or plot border (depending on the tick position
set with <xref linkend="SetYTickPos" />) pointing inwards.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$yc</replaceable></term>
        <listitem>
          <para>
Desired X tick crossing length in pixels.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default tick crossing length is 3 pixels.
    </para>
    <para>
See figure under <xref linkend="SetXTickCrossing" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTickIncrement">
  <refmeta>
    <refentrytitle>SetYTickIncrement</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTickIncrement</refname>
    <refpurpose>Set the length of the interval between Y ticks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYTickIncrement(<optional><parameter>$ti</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTickIncrement</function> sets the length of the interval between
Y tick marks (the tick increment, or tick step).
You can use either this function or <xref linkend="SetNumYTicks" />
(but not both) to control the tick mark spacing.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ti</replaceable></term>
        <listitem>
          <para>
Desired tick increment, in world coordinates.
If the value is omitted or an empty string, the default behavior is restored.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
If neither <function>SetYTickIncrement</function> nor 
<xref linkend="SetNumYTicks" /> is used, the tick interval
is automatically calculated by PHPlot.
See <xref linkend="adv-autorange-tick"/> for details.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
Before PHPlot-6.0.0, if neither the number of ticks nor the tick increment
were specified, PHPlot calculated the tick increment as 1/10 of the X data
range.
Starting with PHPlot-6.0.0, a more complex algorithm is used which tries
to produce 'natural' tick increments.
    </para>

    <para>
Starting with PHPlot-6.0.0, if you call both <function>SetNumYTicks</function>
and <function>SetYTickIncrement</function>, the tick increment has priority
and the specified number of ticks is ignored.
Before PHPlot-6.0.0, the behavior was order-dependent: whichever function
was used last had priority.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTickLabelPos">
  <refmeta>
    <refentrytitle>SetYTickLabelPos</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTickLabelPos</refname>
    <refpurpose>Position the Y tick labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYTickLabelPos(<parameter>$ytlp</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTickLabelPos</function> determines where (and if) the
Y tick labels are drawn. The labels can be drawn on the left side of the plot,
on the right side of the plot, in both positions, at the Y axis (even if it is
in the middle of the plot), or not drawn at all.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ytlp</replaceable></term>
        <listitem>
          <para>
A string indicating the desired position for the Y tick labels:
            <informaltable>
              <?dbfo table-width="75%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="Y tick label position choices"?>
                <colspec colname="c1" colwidth="14*" />
                <colspec colname="c2" colwidth="86*" />
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotleft</entry>
                    <entry>Tick labels on the left side of the plot</entry>
                  </row>
                  <row>
                    <entry>plotright</entry>
                    <entry>Tick labels on the right side of the plot</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>Tick labels on both left and right sides of the
                       plot</entry>
                  </row>
                  <row>
                    <entry>yaxis</entry>
                    <entry>Tick labels at Y axis (even if the axis is in
                      the middle of the plot)</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No tick labels</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default position for the Y tick labels is chosen to avoid overlapping
tick and data labels.
For vertical plots, there is no conflict (because data labels are drawn
along X), so the tick label position defaults to 'plotleft'.
For horizontal plots, the Y tick labels will default to 'none' if the Y data
labels have been enabled using <xref linkend="SetYDataLabelPos"/>.
If neither SetYTickLabelPos nor SetYDataLabelPos are used, PHPlot will
enable just data labels if they are non-empty, and otherwise it will enable
just tick labels, and position them to the left of the plot.
    </para>
    <para>
This applies only to tick labels.
For data labels, see <xref linkend="SetYDataLabelPos" />.
You may want the tick marks to be in the same position as the tick labels.
To position the tick marks, see <xref linkend="SetYTickPos" />.
    </para>
    <para>
See <xref linkend="SetYAxisPosition" /> for positioning the Y axis.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTickLength">
  <refmeta>
    <refentrytitle>SetYTickLength</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTickLength</refname>
    <refpurpose>Set outer length of Y tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYTickLength(<parameter>$yln</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTickLength</function> sets the length of the Y tick marks
pointing outwards from the plot. For example, for tick marks on a Y axis
on the left side of the plot, this is the length from the axis to the left.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$yln</replaceable></term>
        <listitem>
          <para>
Desired Y tick length in pixels.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default tick length is 5 pixels.
    </para>
    <para>
See figure under <xref linkend="SetXTickCrossing" />.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTickPos">
  <refmeta>
    <refentrytitle>SetYTickPos</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTickPos</refname>
    <refpurpose>Position the Y tick marks</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYTickPos(<parameter>$tp</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTickPos</function> determines where (and if) the
Y tick marks are drawn. The tick marks can be drawn on the left side of the
plot, on the right side the plot, in both positions, at the Y axis (even if
it is in the middle of the plot), or not drawn at all.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$tp</replaceable></term>
        <listitem>
          <para>
A string indicating the desired position for the Y tick marks:
            <informaltable>
              <?dbfo table-width="75%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="Y tick position choices"?>
                <colspec colname="c1" colwidth="14*" />
                <colspec colname="c2" colwidth="86*" />
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotleft</entry>
                    <entry>Tick marks on the left side of the plot</entry>
                  </row>
                  <row>
                    <entry>plotright</entry>
                    <entry>Tick marks on the right side of the plot</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>Tick marks on both left and right sides of the
                       plot</entry>
                  </row>
                  <row>
                    <entry>yaxis</entry>
                    <entry>Tick marks at Y axis (even if the axis is in
                      the middle of the plot)</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No tick marks</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The default position for the Y tick marks is on the left side of the plot.
    </para>
    <para>
This applies only to tick marks.
You may want the tick labels to be in the same positions as the tick
marks.  To position the tick labels, see <xref linkend="SetYTickLabelPos" />.
    </para>
    <para>
See <xref linkend="SetYAxisPosition" /> for positioning the Y axis.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTimeFormat">
  <refmeta>
    <refentrytitle>SetYTimeFormat</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTimeFormat</refname>
    <refpurpose>Set date/time formatting string for Y labels</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYTimeFormat(<parameter>$ytf</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTimeFormat</function> sets the formatting string for Y tick
and data labels when 'time' formatting mode for Y labels is in effect.
(Y data labels are only available with bar charts and stacked bar charts.)
Use <xref linkend="SetYLabelType" /> to select the formatting mode for labels.
The formatting string is used with the PHP <function>strftime</function>
to format labels as date/time strings.
    </para>
    <note>
      <para>
This function is retained for compatibility, but use of
<xref linkend="SetYLabelType"/> is preferred.
      </para>
    </note>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ytf</replaceable></term>
        <listitem>
          <para>
Formatting string for Y labels, used with <function>strftime()</function>.
For example, if the label value is 1104534000 (which is the
<literal>time_t</literal> representation of 6:00 PM on the last day of 2004),
'%Y-%m-%d.%H:%M:%S' results in '2004-12-31.18:00:00',
and '%d %b %Y' results in '31 Dec 2004'.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
This applies to Y tick labels, and also to Y data labels unless overridden
by <xref linkend="SetYDataLabelType"/>.
    </para>
    <para>
To use date/time formatting, the label values must be Unix time_t
values (number of seconds since Unix epoch).
    </para>
    <para>
Unlike <xref linkend="SetPrecisionY" />, SetYTimeFormat does not
automatically enable the correct label formatting mode. You
must call <literal>SetYLabelType('time')</literal> to use date/time
formatting of labels.
    </para>
    <para>
The default time format is '%H:%M:%S', showing hours, minutes, and seconds
(and ignoring any date information).
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
Starting with PHPlot-5.0.6, the time format can be set with
<xref linkend="SetYLabelType" /> instead.
    </para>
    <para>
The default time format was undefined prior to PHPlot-5.0rc3.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTitle">
  <refmeta>
    <refentrytitle>SetYTitle</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTitle</refname>
    <refpurpose>Sets the Y axis title, and optionally its position</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYTitle(<parameter>$ytitle</parameter>, <optional><parameter>$ypos</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTitle</function> sets the text to be displayed as the Y axis
title. Optionally, it also sets the position of the title and the axis
itself: on the left side of the graph (the usual place), on the right side,
both, or neither.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$ytitle</replaceable></term>
        <listitem>
          <para>
The text string to use for the Y axis title.
The string can contain multiple lines, separated by newlines (in PHP: "\n").
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><replaceable>$ypos</replaceable></term>
        <listitem>
          <para>
Optional position for the Y axis and title. Use one of the following
strings for the position:
            <informaltable>
              <?dbfo table-width="50%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="Y axis position choices"?>
                <colspec colname="c1" colwidth="20*" />
                <colspec colname="c2" colwidth="80*" />
                <thead>
                  <row>
                    <entry>Position</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>plotleft</entry>
                    <entry>Y axis on the left side of the plot</entry>
                  </row>
                  <row>
                    <entry>plotright</entry>
                    <entry>Y axis on the right side of the plot</entry>
                  </row>
                  <row>
                    <entry>both</entry>
                    <entry>One Y axis on the left, and one on the right</entry>
                  </row>
                  <row>
                    <entry>none</entry>
                    <entry>No Y axis, no Y axis title</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
The default is 'plotleft'.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>
  <refsect1>
    <title>Notes</title>
    <para>
By default, there is no Y axis title.
If <function>SetYTitle</function> is called with an empty string as the title,
the default behavior is restored.
This includes not leaving space on the graph for the title.
    </para>
  </refsect1>
</refentry>

<refentry id="SetYTitleColor">
  <refmeta>
    <refentrytitle>SetYTitleColor</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>SetYTitleColor</refname>
    <refpurpose>Set the color of the Y Title</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;SetYTitleColor(<parameter>$color</parameter>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>SetYTitleColor</function> sets the color of the Y title
(as set with <xref linkend="SetYTitle" />).
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$color</replaceable></term>
        <listitem>
          <para>
Color value to use.
See <xref linkend="conc-colors" /> for more on color values.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Use this function if you want the Y title to have a different color than
the main title.
See <xref linkend="conc-titles"/> for more about plot titles.
    </para>
    <para>
By default, the Y title defaults to use the same color as the main plot title.
The main plot title color is set with <xref linkend="SetTitleColor"/>, and
it defaults to black.
    </para>
  </refsect1>
  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.2.0.
Through PHPlot-5.1.3, the main, X, and Y titles always used the same color.
    </para>
  </refsect1>
</refentry>

<refentry id="StartStream">
  <refmeta>
    <refentrytitle>StartStream</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>StartStream</refname>
    <refpurpose>Begin a Motion-JPEG (or other type) plot stream</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;StartStream()</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>StartStream</function> is used to begin producing streaming
plots. This is a series of plots that are displayed rapidly, resulting in
a moving video-like sequence.
<function>StartStream</function> outputs the initial HTTP headers for the
stream, disables browser-side caching, and prepares for the plot stream.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <para>
None
    </para>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
The three functions <function>StartStream()</function>,
<xref linkend="PrintImageFrame"/>, and <xref linkend="EndStream"/>
are used together to produce streaming plots.
Scripts producing streaming plots must use a web server.
The PHP CLI will not work, because streaming plots require HTTP headers.
    </para>
    <para>
For more on streaming plots, see <xref linkend="adv-streaming"/>.
    </para>
  </refsect1>

  <refsect1>
    <title>Example</title>
    <para>
See <xref linkend="PrintImageFrame"/> for a partial example, and
<xref linkend="adv-streaming-example"/> for the complete example.
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-5.8.0.
Prior releases are not able to produce streaming plots.
    </para>
  </refsect1>
</refentry>

<refentry id="TuneXAutoRange">
  <refmeta>
    <refentrytitle>TuneXAutoRange</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>TuneXAutoRange</refname>
    <refpurpose>Adjust tuning parameters for X axis range calculation</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;TuneXAutoRange(<optional><parameter>$zero_magnet</parameter></optional>, <optional><parameter>$adjust_mode</parameter></optional>, <optional><parameter>$adjust_amount</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>TuneXAutoRange</function> is used to adjust the parameters used by
PHPlot when automatically calculating the plot range along the X axis.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$zero_magnet</replaceable></term>
        <listitem>
          <para>
Optional value for the X axis <emphasis>zero magnet</emphasis>, which
controls how far PHPlot will extend the plot range to include 0 if it doesn't
already include 0.
This is a floating point value between 0 and 1 inclusive, where 0 disables
the zero magnet, and 1 requires the range be always extended to include 0.
See <xref linkend="autorange-zero-magnet"/> for more information.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$adjust_mode</replaceable></term>
        <listitem>
          <para>
Optional value for the X axis range extension mode, which determines the
method PHPlot uses to extend the end of the plot range beyond the data
range. This is a single character:
            <informaltable>
              <?dbfo table-width="50%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="X range adjust mode choices"?>
                <colspec colname="c1" colwidth="20*" align="center" />
                <colspec colname="c2" colwidth="80*" />
                <thead>
                  <row>
                    <entry>Mode</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>T</entry>
                    <entry>
Tick : extend the range, then to the next tick mark.
                    </entry>
                  </row>
                  <row>
                    <entry>R</entry>
                    <entry>
Range : extend the range.
                    </entry>
                  </row>
                  <row>
                    <entry>I</entry>
                    <entry>
Integer : extend the range, then to the next integer value.
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
See <xref linkend="autorange-adjust-mode"/> for more information.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$adjust_amount</replaceable></term>
        <listitem>
          <para>
Optional value for the X axis range extension amount. This is a factor
of the overall range by which the range is extended to leave extra room for
labels, plot markers, etc.
See the <xref linkend="autorange-adjust-amount"/> for more information.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Specifying <literal>NULL</literal>, or omitting trailing unused parameters,
results in no change to that parameter.
    </para>
    <para>
PHPlot does not calculate or adjust ends of the plot range which are set
with <xref linkend="SetPlotAreaWorld"/>.
PHPlot also does not adjust the plot range for the X axis in the case where
X values are implied, rather than specified, in the data array
(data type <link linkend="text-data">text-data</link>, used with
vertical plots).
    </para>
    <para>
This applies to the X axis only, where X is the independent variable for
vertical plots, and the dependent variable for horizontal plots.
See also <xref linkend="TuneYAutoRange"/>.
    </para>

    <para>
See <xref linkend="adv-autorange-range"/> for more information on the
range calculations and parameters.
    </para>

    <para>
The default for the zero magnet is 6/7, which results in up to 600% range
extension.
The default adjustment mode is <literal>T</literal>, which forces the axis
to end at a tick mark.
The default adjustment amount is either 0% or 3% (0.03), depending on the
plot type and whether X is the independent or dependent variable.
    </para>
  </refsect1>

  <refsect1>
    <title>Example</title>
    <para>
If you do not want PHPlot to extend your X axis to include zero, even if it
is relatively close, set the zero magnet to 0 to disable it.
<programlisting><![CDATA[$plot->TuneXAutoRange(0);
]]></programlisting>
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.0.0.
    </para>
  </refsect1>
</refentry>

<refentry id="TuneYAutoRange">
  <refmeta>
    <refentrytitle>TuneYAutoRange</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>TuneYAutoRange</refname>
    <refpurpose>Adjust tuning parameters for Y axis range calculation</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;TuneYAutoRange(<optional><parameter>$zero_magnet</parameter></optional>, <optional><parameter>$adjust_mode</parameter></optional>, <optional><parameter>$adjust_amount</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>TuneYAutoRange</function> is used to adjust the parameters used by
PHPlot when automatically calculating the plot range along the Y axis.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$zero_magnet</replaceable></term>
        <listitem>
          <para>
Optional value for the Y axis <emphasis>zero magnet</emphasis>, which
controls how far PHPlot will extend the plot range to include 0 if it doesn't
already include 0.
This is a floating point value between 0 and 1 inclusive, where 0 disables
the zero magnet, and 1 requires the range be always extended to include 0.
See <xref linkend="autorange-zero-magnet"/> for more information.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$adjust_mode</replaceable></term>
        <listitem>
          <para>
Optional value for the Y axis range extension mode, which determines the
method PHPlot uses to extend the end of the plot range beyond the data
range. This is a single character:
            <informaltable>
              <?dbfo table-width="50%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="Y range adjust mode choices"?>
                <colspec colname="c1" colwidth="20*" align="center" />
                <colspec colname="c2" colwidth="80*" />
                <thead>
                  <row>
                    <entry>Mode</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>T</entry>
                    <entry>
Tick : extend the range, then to the next tick mark.
                    </entry>
                  </row>
                  <row>
                    <entry>R</entry>
                    <entry>
Range : extend the range.
                    </entry>
                  </row>
                  <row>
                    <entry>I</entry>
                    <entry>
Integer : extend the range, then to the next integer value.
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
See <xref linkend="autorange-adjust-mode"/> for more information.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$adjust_amount</replaceable></term>
        <listitem>
          <para>
Optional value for the Y axis range extension amount. This is a factor
of the overall range by which the range is extended to leave extra room for
labels, plot markers, etc.
See the <xref linkend="autorange-adjust-amount"/> for more information.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Specifying <literal>NULL</literal>, or omitting trailing unused parameters,
results in no change to that parameter.
    </para>
    <para>
PHPlot does not calculate or adjust ends of the plot range which are set
with <xref linkend="SetPlotAreaWorld"/>.
PHPlot also does not adjust the plot range for the Y axis in the case where
Y values are implied, rather than specified, in the data array
(data type <link linkend="text-data-yx">text-data-yx</link>, used with
horizontal plots).
    </para>
    <para>
This applies to the Y axis only, where Y is the dependent variable for
vertical plots, and the independent variable for horizontal plots.
See also <xref linkend="TuneXAutoRange"/>.
    </para>

    <para>
See <xref linkend="adv-autorange-range"/> for more information on the
range calculations and parameters.
    </para>

    <para>
The default for the zero magnet is 6/7, which results in up to 600% range
extension.
The default adjustment mode is <literal>T</literal>, which forces the axis
to end at a tick mark.
The default adjustment amount is either 0% or 3% (0.03), depending on the
plot type and whether Y is the independent or dependent variable.
    </para>
  </refsect1>

  <refsect1>
    <title>Examples</title>
    <para>
If you want a plot with 'zero suppression' (not including zero on the Y
axis), you can disable the zero magnet as follows:
<programlisting><![CDATA[$plot->TuneYAutoRange(0);
]]></programlisting>
This emphasizes small changes in large numbers.
    </para>

    <para>
If you want PHPlot to set the plot range to exactly the data range,
with no extensions or adjustments, set the zero magnet to 0 to disable it,
select adjustment mode 'R' (range only), and set the adjustment amount to 0%.
Your Y axis will go from the smallest to the largest Y value in your data
array, with no extra space on either side.
<programlisting><![CDATA[$plot->TuneYAutoRange(0, 'R', 0);
]]></programlisting>
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.0.0.
    </para>
  </refsect1>
</refentry>

<refentry id="TuneXAutoTicks">
  <refmeta>
    <refentrytitle>TuneXAutoTicks</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>TuneXAutoTicks</refname>
    <refpurpose>Adjust tuning parameters for X axis tick increment calculation</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;TuneXAutoTicks(<optional><parameter>$min_ticks</parameter></optional>, <optional><parameter>$tick_mode</parameter></optional>, <optional><parameter>$tick_inc_integer</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>TuneXAutoTicks</function> is used to adjust the parameters used by
PHPlot when automatically calculating the tick increment along the X axis.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$min_ticks</replaceable></term>
        <listitem>
          <para>
Sets the minimum number of tick intervals along the X axis.
This is an integer greater than zero.
See <xref linkend="autotick-min-ticks"/> for more information.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$tick_mode</replaceable></term>
        <listitem>
          <para>
Selects from one of three available modes for calculating the tick increment
along the X axis:
            <informaltable>
              <?dbfo table-width="50%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="X axis tick modes"?>
                <colspec colname="c1" colwidth="20*" />
                <colspec colname="c2" colwidth="80*" />
                <thead>
                  <row>
                    <entry>Mode</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>decimal</entry>
                    <entry>Use a power of 10 times 1, 2, or 5</entry>
                  </row>
                  <row>
                    <entry>binary</entry>
                    <entry>Use a power of 2</entry>
                  </row>
                  <row>
                    <entry>date</entry>
                    <entry>Use a date/time value</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
See <xref linkend="autotick-mode"/> for more information.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$tick_inc_integer</replaceable></term>
        <listitem>
          <para>
If TRUE, forces PHPlot to pick a whole number (integer) tick increment.
If FALSE, allows fractional tick increments.
See the <xref linkend="autotick-tick-inc-integer"/> for more information.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Specifying <literal>NULL</literal>, or omitting trailing unused parameters,
results in no change to that parameter.
    </para>
    <para>
If the tick increment is set with <xref linkend="SetXTickIncrement"/> or
indirectly with <xref linkend="SetNumXTicks"/>, then PHPlot does not need
to calculate the tick increment, and the parameters set with
<function>TuneXAutoTicks</function> are not used.
    </para>
    <para>
This applies to the X axis only, where X is the independent variable for
vertical plots, and the dependent variable for horizontal plots.
See also <xref linkend="TuneYAutoTicks"/>.
    </para>

    <para>
See <xref linkend="adv-autorange-tick"/> for more information on the
tick increment calculations and parameters.
    </para>

    <para>
The default for <literal>min_ticks</literal> is 8.
The maximum number of tick intervals is about 2.5 times the minimum number.
    </para>

    <para>
The default for <literal>tick_mode</literal> depends on the label formatting
type along the X axis. If <xref linkend="SetXLabelType"/>('time') is used to
select date/time formatting of labels, then the default for tick_mode is
<literal>'date'</literal>, otherwise it is <literal>'decimal'</literal>.
    </para>

    <para>
The default for <literal>tick_inc_integer</literal> is FALSE, meaning PHPlot
may use fractional tick increments. (Note this does not mean a tick
increment such as 2.5 would ever be selected. PHPlot uses whole numbers
above 1 and fractional increments between 0 and 1.)
    </para>
  </refsect1>

  <refsect1>
    <title>Example</title>
    <para>
Use a minimum of 10 tick intervals along the X axis, and do not allow tick
increments less than 1:
<programlisting><![CDATA[$plot->TuneXAutoRange(10, NULL, TRUE);
]]></programlisting>
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.0.0.
    </para>
  </refsect1>
</refentry>

<refentry id="TuneYAutoTicks">
  <refmeta>
    <refentrytitle>TuneYAutoTicks</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>TuneYAutoTicks</refname>
    <refpurpose>Adjust tuning parameters for Y axis tick increment calculation</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>$plot-&gt;TuneYAutoTicks(<optional><parameter>$min_ticks</parameter></optional>, <optional><parameter>$tick_mode</parameter></optional>, <optional><parameter>$tick_inc_integer</parameter></optional>)</synopsis>
  </refsynopsisdiv>

  <refsect1>
    <title>Description</title>
    <para>
<function>TuneYAutoTicks</function> is used to adjust the parameters used by
PHPlot when automatically calculating the tick increment along the Y axis.
    </para>
  </refsect1>

  <refsect1>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term><replaceable>$min_ticks</replaceable></term>
        <listitem>
          <para>
Sets the minimum number of tick intervals along the Y axis.
This is an integer greater than zero.
See <xref linkend="autotick-min-ticks"/> for more information.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$tick_mode</replaceable></term>
        <listitem>
          <para>
Selects from one of three available modes for calculating the tick increment
along the Y axis:
            <informaltable>
              <?dbfo table-width="50%"?> <!-- Table width hint for PDF only -->
              <tgroup cols="2">
                <?dbhtml table-summary="Y axis tick modes"?>
                <colspec colname="c1" colwidth="20*" />
                <colspec colname="c2" colwidth="80*" />
                <thead>
                  <row>
                    <entry>Mode</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>decimal</entry>
                    <entry>Use a power of 10 times 1, 2, or 5</entry>
                  </row>
                  <row>
                    <entry>binary</entry>
                    <entry>Use a power of 2</entry>
                  </row>
                  <row>
                    <entry>date</entry>
                    <entry>Use a date/time value</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
See <xref linkend="autotick-mode"/> for more information.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>$tick_inc_integer</replaceable></term>
        <listitem>
          <para>
If TRUE, forces PHPlot to pick a whole number (integer) tick increment.
If FALSE, allows fractional tick increments.
See the <xref linkend="autotick-tick-inc-integer"/> for more information.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1>
    <title>Notes</title>
    <para>
Specifying <literal>NULL</literal>, or omitting trailing unused parameters,
results in no change to that parameter.
    </para>
    <para>
If the tick increment is set with <xref linkend="SetYTickIncrement"/> or
indirectly with <xref linkend="SetNumYTicks"/>, then PHPlot does not need
to calculate the tick increment, and the parameters set with
<function>TuneYAutoTicks</function> are not used.
    </para>
    <para>
This applies to the Y axis only, where Y is the dependent variable for
vertical plots, and the independent variable for horizontal plots.
See also <xref linkend="TuneXAutoTicks"/>.
    </para>

    <para>
See <xref linkend="adv-autorange-tick"/> for more information on the
tick increment calculations and parameters.
    </para>

    <para>
The default for <literal>min_ticks</literal> is 8.
The maximum number of tick intervals is about 2.5 times the minimum number.
    </para>

    <para>
The default for <literal>tick_mode</literal> depends on the label formatting
type along the Y axis. If <xref linkend="SetYLabelType"/>('time') is used to
select date/time formatting of labels, then the default for tick_mode is
<literal>'date'</literal>, otherwise it is <literal>'decimal'</literal>.
    </para>

    <para>
The default for <literal>tick_inc_integer</literal> is FALSE, meaning PHPlot
may use fractional tick increments. (Note this does not mean a tick
increment such as 2.5 would ever be selected. PHPlot uses whole numbers
above 1 and fractional increments between 0 and 1.)
    </para>
  </refsect1>

  <refsect1>
    <title>Example</title>
    <para>
Use a minimum of 9 tick intervals along the Y axis, and pick a power of
2 as a tick increment:
<programlisting><![CDATA[$plot->TuneYAutoRange(9, 'binary');
]]></programlisting>
    </para>
  </refsect1>

  <refsect1>
    <title>History</title>
    <para>
This function was added in PHPlot-6.0.0.
    </para>
  </refsect1>
</refentry>

</reference>
