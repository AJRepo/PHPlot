<!-- $Id$
     PHPlot Callbacks
-->
<chapter id="callbacks">
<title>Callbacks</title>
<abstract><title></title>
  <para>
This chapter documents the callback feature in PHPlot.
  </para>
</abstract>

<para>
Callbacks allow a programmer using PHPlot to insert their own functions
into the graph drawing process. Callbacks are currently also used for
development and testing of PHPlot.
</para>

<warning>
  <para>
All PHPlot class variables, and all methods/functions which are not
documented in the "Reference" section of the PHPlot Reference Manual, are
considered to be for internal use and are subject to be changed or removed
at any time.
If you call internal functions, or access internal class variables,
you greatly increase the risk of breaking your application with
future PHPlot releases.
  </para>
</warning>

<sect1 id="callbacks-api">
<title>Callbacks Application Interface</title>
<para>
Refer to these entries in the Function Reference:
  <itemizedlist>
    <listitem>
      <para>
<xref linkend="SetCallback"/> - Register a callback function
      </para>
    </listitem>
    <listitem>
      <para>
<xref linkend="GetCallback"/> - Return a currently registered callback function
      </para>
    </listitem>
    <listitem>
      <para>
<xref linkend="RemoveCallback"/> - Unregister a callback function
      </para>
    </listitem>
  </itemizedlist>
</para>

<para>
Either a function name or an object and method can be registered as
a callback with <xref linkend="SetCallback"/>.
For more information about using callbacks with objects and methods,
see the PHP manual under
<ulink url="http://www.php.net/manual/en/language.pseudo-types.php#language.types.callback">Types, Pseudo Types, Callback</ulink>
and the documentation for the PHP
<ulink url="http://www.php.net/manual/en/function.call-user-func.php ">call_user_func</ulink>
function.
Also refer to <xref linkend="callbacks-objects"/> later in this manual.
Whether calling a function or an object method as a callback,
the same calling sequence is used.
</para>
<para>
  <programlisting><![CDATA[function_name($img, $passthrough_arg, [other_args...])
]]></programlisting>
</para>
<para>
  <variablelist>
    <varlistentry>
      <term>$img</term>
      <listitem>
        <para>
The GD image resource for the plot image.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>$passthrough_arg</term>
      <listitem>
        <para>
The third argument supplied to SetCallback ($arg) when the callback is
established. This allows the programmer to pass information to the callback
without using global variables. This can be any PHP type including array.
To pass a reference, you should put it into an array and pass the array.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>other_args...</term>
      <listitem>
        <para>
Zero or more additional arguments supplied by PHPlot to callbacks of this
type. Refer to <xref linkend="callbacks-names"/> to see what callback
reasons supply extra arguments.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>
</para>

<para>
For example, given this callback setup:
  <programlisting><![CDATA[$plot->SetCallback('draw_graph', 'my_drawing_callback', $myvar);
]]></programlisting>
Then PHPlot will call:
  <programlisting><![CDATA[my_drawing_callback($img, $myvar_value, $plot_area);
]]></programlisting>
Where $myvar_value is the value of $myvar at the time SetCallback was called.
(The plot_area parameter is only supplied for the draw_graph callback in
PHPlot-5.1.0 and later.)
</para>

<para>
Some callbacks are expected to return a value. This is documented in 
<xref linkend="callbacks-names"/>. In all other cases, the return value
from a callback function is ignored.
(Callbacks which return a value were implemented in PHPlot-5.1.3.)
</para>
</sect1>

<sect1 id="callbacks-access">
<title>Callback Function Access</title>
<para>
By default, the callback function has access only to the GD image resource
as the $img argument, the pass-through argument provided when the callback
function was registered, and additional arguments (if any) provided by
PHPlot for the callback. It does not have access to the PHPlot
class object instance, nor any of its contents.
</para>

<para>
If you need access to the internals of the PHPlot class instance from your
callback, you have three options.
  <orderedlist>
    <listitem>
      <para>
You can declare your PHPlot class instance variable as
<emphasis>global</emphasis>.
      </para>
    </listitem>
    <listitem>
      <para>
You can pass the instance variable as the $arg when registering the
callback. With PHP5, this will pass a reference to the object, which allows
reading and changing variables. (PHP4 would pass a copy of the object at the
time the callback function is being set up, which would probably not be
useful. There are work-arounds, but PHP4 is no longer supported.)
      </para>
    </listitem>
    <listitem>
      <para>
You can use a class method which extends PHPlot.
This is described in <xref linkend="callbacks-objects"/>.
      </para>
    </listitem>
  </orderedlist>
</para>

<para>
As stated in the warning at the top of this chapter, any access to the class
internals is risky and subject to break with any new update to PHPlot.
</para>

</sect1>


<sect1 id="callbacks-names">
<title>Available Callbacks</title>
<para>
This section defines the currently available callback names. A callback
name is also called a <emphasis>reason</emphasis>.
</para>

<para>
Most of the callbacks currently available are drawing callbacks, activated
during the graph drawing process started by <xref linkend="DrawGraph"/>.
By convention, a drawing callback occurs right after the event which it names.
For example, the <command>draw_titles</command> callback will be called after
drawing the plot titles.
</para>

<para>
Debug callbacks are for use when developing and debugging PHPlot itself.
Needless to say, their use for other purposes is discouraged.
</para>

<para>
The following table lists the available callback reasons.
</para>

<para>
  <informaltable id="callback-reasons">
    <tgroup cols="4">
      <?dbhtml table-summary="PHPlot available callback reasons"?>
      <colspec colname="c1" colwidth="26*" />
      <colspec colname="c2" colwidth="19*" />
      <colspec colname="c3" colwidth="19*" />
      <colspec colname="c4" colwidth="40*" />
      <thead>
        <row>
          <entry>Callback Name:</entry>
          <entry>Calling Point:</entry>
          <entry>Extra Parameters:</entry>
          <entry>Notes:</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>data_color</entry>
          <entry>Every time a color is needed for a data element.</entry>
          <entry>$row, $col, $extra</entry>
          <entry>The callback is expected to return an integer color index
             into the data colors array. This is for custom color selection.
             For more information, see
             <xref linkend="conc-colors-datacolor-callback"/>.</entry>
        </row>
        <row>
          <entry>draw_setup</entry>
          <entry>After all setup, before drawing anything.</entry>
          <entry>(None)</entry>
          <entry>Anything drawn here will be covered by the background.</entry>
        </row>
        <row>
          <entry>draw_image_background</entry>
          <entry>After drawing the image backgrounds and border.</entry>
          <entry>(None)</entry>
          <entry></entry>
        </row>
        <row>
          <entry>draw_plotarea_background</entry>
          <entry>After drawing the plot area background.</entry>
          <entry>plot_area</entry>
          <entry>plot_area parameter was added in PHPlot-5.1.0</entry>
        </row>
        <row>
          <entry>draw_titles</entry>
          <entry>After drawing the plot title, X and Y titles.</entry>
          <entry>(None)</entry>
          <entry>Called even if no titles were set.</entry>
        </row>
        <row>
          <entry>draw_axes</entry>
          <entry>After drawing the X and Y axis and grid lines.</entry>
          <entry>(None)</entry>
          <entry>Not called for pie charts.</entry>
        </row>
        <row>
          <entry>draw_graph</entry>
          <entry>After drawing the body of the graph.</entry>
          <entry>plot_area</entry>
          <entry>plot_area parameter was added in PHPlot-5.1.0</entry>
        </row>
        <row>
          <entry>draw_border</entry>
          <entry>After drawing the plot area border.</entry>
          <entry>(None)</entry>
          <entry>Not called for pie charts.</entry>
        </row>
        <row>
          <entry>draw_legend</entry>
          <entry>After drawing the legend, if legend is enabled.</entry>
          <entry>(None)</entry>
          <entry>Not called if no legend was set.</entry>
        </row>
        <row>
          <entry>draw_all</entry>
          <entry>After all drawing is complete.</entry>
          <entry>plot_area</entry>
          <entry>Added in PHPlot-5.1.0</entry>
        </row>
        <row>
          <entry>debug_textbox</entry>
          <entry>Just before drawing any text.</entry>
          <entry>$px, $py, $bbox_width, $bbox_height</entry>
          <entry>Provides access to the orthogonal bounding box position
              and size for the text string.</entry>
        </row>
        <row>
          <entry>debug_scale</entry>
          <entry>Called at end of many scale calculation functions.</entry>
          <entry>Function name, then an array of variable name =&gt; value</entry>
          <entry>For displaying intermediate values in margin and scale
              calculations.</entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
</para>
<note>
  <title>Notes:</title>
  <para>
Several of the drawing callbacks include <parameter>plot_area</parameter>
as an extra parameter. This is an array of 4 values that define the plot area
within the image, in GD pixel coordinates, as left_x, top_y, right_x, and
bottom_y. For more information, see <xref linkend="dev-layout" />.
  </para>
  <para>
See <xref linkend="callbacks-drawing"/>
for information on using the drawing callbacks to annotate your plot.
  </para>
</note>

</sect1>

<sect1 id="callbacks-objects">
<title>Object Methods as Callbacks</title>
<para>
The callback function argument to <xref linkend="SetCallback"/>
can be an array of two elements: a class variable and a method.
This can be used with any class, but here we are interested in using an
extension of the PHPlot class.
Consider the following setup:
</para>
<para>
  <programlisting><![CDATA[class my_PHPlot extends PHPlot
{
  function my_PHPlot($width=600, $height=400, $outfile=NULL, $infile=NULL)
  {
    $this->PHPlot($width, $height, $outfile, $infile);
  }

  function callback($img, $arg)
  {
    fwrite(STDERR, "callback in object\n");
    fwrite(STDERR, "Plot area: ({$this->plot_area[0]}, {$this->plot_area[1]}) :");
    fwrite(STDERR, " ({$this->plot_area[2]}, {$this->plot_area[2]})\n");
  }
}
]]></programlisting>
</para>

<para>
We define a class which extends PHPlot, and a method 'callback' which
displays the plot area using the internal PHPlot class variable plot_area.
(Note we are using a PHP4-style constructor, which also works with PHP5.
You can use the PHP5 constructor method instead.)
</para>

<para>
We will then create an instance of the extended class, and set a callback.
  <programlisting><![CDATA[$plot = new my_PHPlot(400,300);
$plot->SetCallback('draw_titles', array($plot, 'callback'));
]]></programlisting>
This is for PHP5. For PHP4, you need to use a reference to the $plot instance.
Note that PHP4 is no longer supported.
</para>

<para>
When the draw_titles callback is triggered, it will call the 'callback'
method inside our extended class. Because this is an extension of the
PHPlot class, it has access to all the member variables via $this.
</para>

</sect1>

<sect1 id="callbacks-drawing">
<title>Using Callbacks to Annotate Plots</title>
<para>
This section contains information about using PHPlot callbacks to annotate
a plot with text and graphics. This is an advanced topic, and requires some
knowledge of both PHPlot and the PHP GD extension.
</para>
<warning>
  <para>
The information in this section uses features which are recent additions
to PHPlot, and in some cases uses PHPlot internal variables and functions.
As a result, these methods are less likely to work with older releases, and
more at risk to change or break in future releases.
  </para>
</warning>

<para>
This section will first provide general information and advice about
annotating plots using callbacks.
<!-- Note exception, link to example's section not example. -->
After, portions of the script from <xref linkend="ex-annotate" />
will be explained in more detail.
</para>

<para>
The emphasis here is on using callbacks, but annotation is also possible 
without callbacks.
You can use <xref linkend="SetPrintImage"/>(False) to disable automatic
output of your image. Then, when <xref linkend="DrawGraph"/> returns, you
can annotate your plot using GD functions on the <literal>img</literal>
member variable of your PHPlot object. Use of callbacks is preferred,
however, because it makes your script somewhat less dependent on PHPlot
internals (such as the <literal>img</literal> variable).
</para>

  <sect2>
    <title>Setting the callback</title>
    <para>
Use <xref linkend="SetCallback"/> to establish a drawing callback.
You can find a list of callbacks in <xref linkend="callbacks-names"/>.
The various callbacks with names starting 'draw_' are called at different
points in the drawing process. Drawn objects will cover items drawn at an
earlier stage. For example, if you draw a line from a 'draw_titles' callback
(which is called after the plot titles are drawn, but before the graph is
drawn), the line would be 'behind' and possibly covered by the plotted data.
    </para>
    <para>
Note that PHPlot does very little except save parameter values until you
call <xref linkend="DrawGraph"/>. For that reason, you should use GD functions
for annotation only from a drawing callback (that is, a callback with a name
starting with 'draw_').
The drawing callbacks are called after PHPlot calculations and image resource
setup, at which point everything is ready for drawing.
In addition, you should not use PHPlot functions which control plot
appearance from your drawing callback. These would either have no affect,
because it is too late, or produce unexpected results.
    </para>
  </sect2>

  <sect2>
    <title>Coordinates</title>
    <para>
When drawing with GD, you will use the <link linkend="def-devcoor">Device
Coordinate system</link>. The coordinates in this system are pixels, with
the origin in the upper left corner of your image. Y advances down and X
advances to the right.
    </para>
    <para>
If you want to make annotations relative to specific values in your plot data,
you need to translate those values from
<link linkend="def-worldcoor">World Coordinates</link> to device coordinates.
Use the PHPlot function <xref linkend="GetDeviceXY"/>
to perform this translation.
You will need access to your PHPlot object from inside your callback function
in order to use this (or any other PHPlot method function). You can make it
global, or designate it as the passthrough argument to SetCallback.
    </para>
    <para>
If your annotations will fall outside the plot area (for example, in an
area you reserved for annotation using <xref linkend="SetPlotAreaPixels"/>
or <xref linkend="SetMarginsPixels"/>, then you need not be concerned with
coordinate translation. Of course, you can also add annotations at fixed
pixel coordinates inside the plot area, however these may overlay (if done
from a draw_graph or later callback) or underlay (if done before the
draw_graph callback) the plotted data.
    </para>
  </sect2>

  <sect2>
    <title>Colors</title>
    <para>
Every GD drawing function you use will require a color value argument.
You are recommended to allocate your own colors in your callback using the
GD function <function>imagecolorresolve()</function>. This function
will always return a color index, by either re-using an existing color in
the image's color map, or by allocating a new color.
Using imagecolorresolve() rather than trying to access the PHPlot internal
variables for color indexes will protect your script from breaking if the
way PHPlot manages its internal colors ever changes.
    </para>
  </sect2>

  <sect2>
    <title>Text</title>
    <para>
Text can be added to your plot using GD functions which include
<function>imagestring</function>, for build-in simple fonts, and
<function>imagettftext</function> for TrueType font text. To use these
functions, you need device coordinates, as described above.
    </para>
    <para>
You can also add text to your plot using the PHPlot function
<function>DrawText</function>. This is documented only for internal
use by PHPlot, so there is a risk of future incompatibility. But this
function provides support for controlling the text justification, and works
better with multi-line text.
    </para>
  </sect2>

  <sect2>
    <title>Example</title>
    <para>
This example creates a bar chart and adds annotation. The goal is to draw an
ellipse and add text to the highest and lowest bars in a bar chart.
<!-- Note exception, link to example's section not example. -->
Refer to <xref linkend="ex-annotate" /> for the complete script and
output from this example.
    </para>

    <para>
The script starts with the usual PHPlot object creation and setup.
      <programlisting><![CDATA[$plot = new PHPlot(800, 600);
$plot->SetTitle('Monthly Widget Sales');
...
]]></programlisting>
(For the complete script, see the example referenced above.)
    </para>

    <para>
Before calling DrawGraph, establish the drawing callback. This uses the
<literal>draw_all</literal> callback, which gets called when all drawing is
complete in DrawGraph. (Note: If using PHPlot-5.0.7 or earlier, use
'draw_graph' instead, as 'draw_all' was not yet available.)
The name of our callback function is <literal>annotate_plot</literal>,
and we are passing the PHPlot object ($plot) as a pass-through parameter.
You can use a global or class callback instead -
see <xref linkend="callbacks-api"/> for more on these options.
      <programlisting><![CDATA[$plot->SetCallback('draw_all', 'annotate_plot', $plot);
]]></programlisting>
    </para>

    <para>
Here is the declaration of our callback function. The <literal>$img</literal>
parameter is provided by PHPlot itself, and is the GD resource for our image.
The <literal>$plot</literal> parameter is the pass-through argument we provided
above when establishing the callback.
Some callbacks make other parameters available. In fact, 'draw_all' provides
the plot area coordinates as an additional parameter, but we don't need that
here so we do not have to include that in the function declaration.
      <programlisting><![CDATA[function annotate_plot($img, $plot)
{
]]></programlisting>
    </para>

    <para>
As stated above, you should allocate your own colors, rather than trying to
get into PHPlot's internals for color values. Here we allocate two colors
and assign the color indexes to local variables:
      <programlisting><![CDATA[$red = imagecolorresolve($img, 255, 0, 0);
$green = imagecolorresolve($img, 0, 216, 0);
]]></programlisting>
    </para>

    <para>
Next, we want to draw graphics centered on two points in our data. The
points were calculated as best_index (X), best_sales (Y), worst_index (X),
and worst_sales (Y). In order to draw at these locations, we need to
translate the values from
<link linkend="def-worldcoor">World Coordinates</link> to
<link linkend="def-devcoor">Device Coordinates</link>.
This is done using the PHPlot function <xref linkend="GetDeviceXY"/>.
      <programlisting><![CDATA[list($best_x, $best_y) = $plot->GetDeviceXY($best_index, $best_sales);
list($worst_x, $worst_y) = $plot->GetDeviceXY($worst_index, $worst_sales);
]]></programlisting>
    </para>

    <para>
Now we are ready to draw some ellipses, centered on our two data points.
The values 50 and 20 are the width and height, in pixels.
      <programlisting><![CDATA[imageellipse($img, $best_x, $best_y, 50, 20, $green);
imageellipse($img, $worst_x, $worst_y, 50, 20, $red);
]]></programlisting>
    </para>

    <para>
As stated above, we have two options for text, and the example uses each method.
We can draw text using the GD functions, but we have to do a little more
work to position the text. Here the text is approximately centered
horizontally and above the data point. (Note ImageString by default uses the
upper left corner of the text string for positioning.)
      <programlisting><![CDATA[$font = '3';
$fh = imagefontheight($font);
$fw = imagefontwidth($font);
imagestring($img, $font, $best_x-$fw*4, $best_y-$fh-10, 'Good Job!', $green);
]]></programlisting>
    </para>

    <para>
Or, we can use the PHPlot internal function DrawText. With a PHPlot version
5.1.0 and later, we omit the font specification and it will default to the
generic font, which can be set with <xref linkend="SetFont"/>('generic', ...)
      <programlisting><![CDATA[$plot->DrawText('', 0, $worst_x, $worst_y-10, $red, 'Bad News!', 'center', 'bottom');
]]></programlisting>
    </para>

  </sect2>

</sect1>

</chapter>
